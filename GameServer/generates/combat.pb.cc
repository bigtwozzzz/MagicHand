// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: combat.proto

#include "combat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace combat {
PROTOBUF_CONSTEXPR AttackRequest::AttackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skill_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entity_type_)*/0
  , /*decltype(_impl_.attack_angle_)*/0
  , /*decltype(_impl_.cast_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttackRequestDefaultTypeInternal() {}
  union {
    AttackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttackRequestDefaultTypeInternal _AttackRequest_default_instance_;
PROTOBUF_CONSTEXPR HitEvent::HitEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attacker_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entity_type_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.new_status_)*/0
  , /*decltype(_impl_.new_monster_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitEventDefaultTypeInternal() {}
  union {
    HitEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitEventDefaultTypeInternal _HitEvent_default_instance_;
}  // namespace combat
static ::_pb::Metadata file_level_metadata_combat_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_combat_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_combat_2eproto = nullptr;

const uint32_t TableStruct_combat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::combat::AttackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::combat::AttackRequest, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::combat::AttackRequest, _impl_.entity_type_),
  PROTOBUF_FIELD_OFFSET(::combat::AttackRequest, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::combat::AttackRequest, _impl_.attack_angle_),
  PROTOBUF_FIELD_OFFSET(::combat::AttackRequest, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::combat::AttackRequest, _impl_.cast_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::combat::HitEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::combat::HitEvent, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::combat::HitEvent, _impl_.entity_type_),
  PROTOBUF_FIELD_OFFSET(::combat::HitEvent, _impl_.attacker_id_),
  PROTOBUF_FIELD_OFFSET(::combat::HitEvent, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::combat::HitEvent, _impl_.new_status_),
  PROTOBUF_FIELD_OFFSET(::combat::HitEvent, _impl_.new_monster_state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::combat::AttackRequest)},
  { 12, -1, -1, sizeof(::combat::HitEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::combat::_AttackRequest_default_instance_._instance,
  &::combat::_HitEvent_default_instance_._instance,
};

const char descriptor_table_protodef_combat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014combat.proto\022\006combat\032\014common.proto\"\231\001\n"
  "\rAttackRequest\022\021\n\tentity_id\030\001 \001(\t\022\'\n\013ent"
  "ity_type\030\002 \001(\0162\022.combat.EntityType\022\021\n\tta"
  "rget_id\030\003 \001(\t\022\024\n\014attack_angle\030\004 \001(\002\022\020\n\010s"
  "kill_id\030\005 \001(\t\022\021\n\tcast_time\030\006 \001(\002\"\300\001\n\010Hit"
  "Event\022\021\n\tentity_id\030\001 \001(\t\022\'\n\013entity_type\030"
  "\002 \001(\0162\022.combat.EntityType\022\023\n\013attacker_id"
  "\030\003 \001(\t\022\016\n\006damage\030\004 \001(\005\022\"\n\nnew_status\030\005 \001"
  "(\0162\016.common.Status\022/\n\021new_monster_state\030"
  "\006 \001(\0162\024.common.MonsterState*(\n\nEntityTyp"
  "e\022\r\n\tCHARACTER\020\000\022\013\n\007MONSTER\020\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_combat_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_combat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_combat_2eproto = {
    false, false, 437, descriptor_table_protodef_combat_2eproto,
    "combat.proto",
    &descriptor_table_combat_2eproto_once, descriptor_table_combat_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_combat_2eproto::offsets,
    file_level_metadata_combat_2eproto, file_level_enum_descriptors_combat_2eproto,
    file_level_service_descriptors_combat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_combat_2eproto_getter() {
  return &descriptor_table_combat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_combat_2eproto(&descriptor_table_combat_2eproto);
namespace combat {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_combat_2eproto);
  return file_level_enum_descriptors_combat_2eproto[0];
}
bool EntityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AttackRequest::_Internal {
 public:
};

AttackRequest::AttackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:combat.AttackRequest)
}
AttackRequest::AttackRequest(const AttackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.attack_angle_){}
    , decltype(_impl_.cast_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entity_id().empty()) {
    _this->_impl_.entity_id_.Set(from._internal_entity_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_id().empty()) {
    _this->_impl_.target_id_.Set(from._internal_target_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.skill_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skill_id().empty()) {
    _this->_impl_.skill_id_.Set(from._internal_skill_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.entity_type_, &from._impl_.entity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cast_time_) -
    reinterpret_cast<char*>(&_impl_.entity_type_)) + sizeof(_impl_.cast_time_));
  // @@protoc_insertion_point(copy_constructor:combat.AttackRequest)
}

inline void AttackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.entity_type_){0}
    , decltype(_impl_.attack_angle_){0}
    , decltype(_impl_.cast_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.skill_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttackRequest::~AttackRequest() {
  // @@protoc_insertion_point(destructor:combat.AttackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_id_.Destroy();
  _impl_.target_id_.Destroy();
  _impl_.skill_id_.Destroy();
}

void AttackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:combat.AttackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  _impl_.target_id_.ClearToEmpty();
  _impl_.skill_id_.ClearToEmpty();
  ::memset(&_impl_.entity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cast_time_) -
      reinterpret_cast<char*>(&_impl_.entity_type_)) + sizeof(_impl_.cast_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "combat.AttackRequest.entity_id"));
        } else
          goto handle_unusual;
        continue;
      // .combat.EntityType entity_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_entity_type(static_cast<::combat::EntityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "combat.AttackRequest.target_id"));
        } else
          goto handle_unusual;
        continue;
      // float attack_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.attack_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string skill_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_skill_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "combat.AttackRequest.skill_id"));
        } else
          goto handle_unusual;
        continue;
      // float cast_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.cast_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:combat.AttackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "combat.AttackRequest.entity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_id(), target);
  }

  // .combat.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_entity_type(), target);
  }

  // string target_id = 3;
  if (!this->_internal_target_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_id().data(), static_cast<int>(this->_internal_target_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "combat.AttackRequest.target_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_id(), target);
  }

  // float attack_angle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_angle = this->_internal_attack_angle();
  uint32_t raw_attack_angle;
  memcpy(&raw_attack_angle, &tmp_attack_angle, sizeof(tmp_attack_angle));
  if (raw_attack_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_attack_angle(), target);
  }

  // string skill_id = 5;
  if (!this->_internal_skill_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skill_id().data(), static_cast<int>(this->_internal_skill_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "combat.AttackRequest.skill_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_skill_id(), target);
  }

  // float cast_time = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = this->_internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_cast_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:combat.AttackRequest)
  return target;
}

size_t AttackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:combat.AttackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // string target_id = 3;
  if (!this->_internal_target_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_id());
  }

  // string skill_id = 5;
  if (!this->_internal_skill_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skill_id());
  }

  // .combat.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entity_type());
  }

  // float attack_angle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_angle = this->_internal_attack_angle();
  uint32_t raw_attack_angle;
  memcpy(&raw_attack_angle, &tmp_attack_angle, sizeof(tmp_attack_angle));
  if (raw_attack_angle != 0) {
    total_size += 1 + 4;
  }

  // float cast_time = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = this->_internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttackRequest::GetClassData() const { return &_class_data_; }


void AttackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttackRequest*>(&to_msg);
  auto& from = static_cast<const AttackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:combat.AttackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (!from._internal_target_id().empty()) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (!from._internal_skill_id().empty()) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  if (from._internal_entity_type() != 0) {
    _this->_internal_set_entity_type(from._internal_entity_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_angle = from._internal_attack_angle();
  uint32_t raw_attack_angle;
  memcpy(&raw_attack_angle, &tmp_attack_angle, sizeof(tmp_attack_angle));
  if (raw_attack_angle != 0) {
    _this->_internal_set_attack_angle(from._internal_attack_angle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = from._internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    _this->_internal_set_cast_time(from._internal_cast_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttackRequest::CopyFrom(const AttackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:combat.AttackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackRequest::IsInitialized() const {
  return true;
}

void AttackRequest::InternalSwap(AttackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_id_, lhs_arena,
      &other->_impl_.entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_id_, lhs_arena,
      &other->_impl_.target_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skill_id_, lhs_arena,
      &other->_impl_.skill_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_.cast_time_)
      + sizeof(AttackRequest::_impl_.cast_time_)
      - PROTOBUF_FIELD_OFFSET(AttackRequest, _impl_.entity_type_)>(
          reinterpret_cast<char*>(&_impl_.entity_type_),
          reinterpret_cast<char*>(&other->_impl_.entity_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_combat_2eproto_getter, &descriptor_table_combat_2eproto_once,
      file_level_metadata_combat_2eproto[0]);
}

// ===================================================================

class HitEvent::_Internal {
 public:
};

HitEvent::HitEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:combat.HitEvent)
}
HitEvent::HitEvent(const HitEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HitEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.attacker_id_){}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.new_status_){}
    , decltype(_impl_.new_monster_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entity_id().empty()) {
    _this->_impl_.entity_id_.Set(from._internal_entity_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attacker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attacker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attacker_id().empty()) {
    _this->_impl_.attacker_id_.Set(from._internal_attacker_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.entity_type_, &from._impl_.entity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_monster_state_) -
    reinterpret_cast<char*>(&_impl_.entity_type_)) + sizeof(_impl_.new_monster_state_));
  // @@protoc_insertion_point(copy_constructor:combat.HitEvent)
}

inline void HitEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.attacker_id_){}
    , decltype(_impl_.entity_type_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.new_status_){0}
    , decltype(_impl_.new_monster_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attacker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attacker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HitEvent::~HitEvent() {
  // @@protoc_insertion_point(destructor:combat.HitEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HitEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_id_.Destroy();
  _impl_.attacker_id_.Destroy();
}

void HitEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HitEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:combat.HitEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  _impl_.attacker_id_.ClearToEmpty();
  ::memset(&_impl_.entity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.new_monster_state_) -
      reinterpret_cast<char*>(&_impl_.entity_type_)) + sizeof(_impl_.new_monster_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "combat.HitEvent.entity_id"));
        } else
          goto handle_unusual;
        continue;
      // .combat.EntityType entity_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_entity_type(static_cast<::combat::EntityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string attacker_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_attacker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "combat.HitEvent.attacker_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Status new_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_status(static_cast<::common::Status>(val));
        } else
          goto handle_unusual;
        continue;
      // .common.MonsterState new_monster_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_monster_state(static_cast<::common::MonsterState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HitEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:combat.HitEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "combat.HitEvent.entity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_id(), target);
  }

  // .combat.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_entity_type(), target);
  }

  // string attacker_id = 3;
  if (!this->_internal_attacker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attacker_id().data(), static_cast<int>(this->_internal_attacker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "combat.HitEvent.attacker_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_attacker_id(), target);
  }

  // int32 damage = 4;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_damage(), target);
  }

  // .common.Status new_status = 5;
  if (this->_internal_new_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_new_status(), target);
  }

  // .common.MonsterState new_monster_state = 6;
  if (this->_internal_new_monster_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_new_monster_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:combat.HitEvent)
  return target;
}

size_t HitEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:combat.HitEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // string attacker_id = 3;
  if (!this->_internal_attacker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attacker_id());
  }

  // .combat.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entity_type());
  }

  // int32 damage = 4;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  // .common.Status new_status = 5;
  if (this->_internal_new_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_status());
  }

  // .common.MonsterState new_monster_state = 6;
  if (this->_internal_new_monster_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_monster_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HitEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitEvent::GetClassData() const { return &_class_data_; }


void HitEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HitEvent*>(&to_msg);
  auto& from = static_cast<const HitEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:combat.HitEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (!from._internal_attacker_id().empty()) {
    _this->_internal_set_attacker_id(from._internal_attacker_id());
  }
  if (from._internal_entity_type() != 0) {
    _this->_internal_set_entity_type(from._internal_entity_type());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_new_status() != 0) {
    _this->_internal_set_new_status(from._internal_new_status());
  }
  if (from._internal_new_monster_state() != 0) {
    _this->_internal_set_new_monster_state(from._internal_new_monster_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitEvent::CopyFrom(const HitEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:combat.HitEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitEvent::IsInitialized() const {
  return true;
}

void HitEvent::InternalSwap(HitEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_id_, lhs_arena,
      &other->_impl_.entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attacker_id_, lhs_arena,
      &other->_impl_.attacker_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitEvent, _impl_.new_monster_state_)
      + sizeof(HitEvent::_impl_.new_monster_state_)
      - PROTOBUF_FIELD_OFFSET(HitEvent, _impl_.entity_type_)>(
          reinterpret_cast<char*>(&_impl_.entity_type_),
          reinterpret_cast<char*>(&other->_impl_.entity_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_combat_2eproto_getter, &descriptor_table_combat_2eproto_once,
      file_level_metadata_combat_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace combat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::combat::AttackRequest*
Arena::CreateMaybeMessage< ::combat::AttackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::combat::AttackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::combat::HitEvent*
Arena::CreateMaybeMessage< ::combat::HitEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::combat::HitEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
