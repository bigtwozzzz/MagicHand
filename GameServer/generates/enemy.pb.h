// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enemy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_enemy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_enemy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_enemy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_enemy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enemy_2eproto;
namespace enemy {
class MonsterBase;
struct MonsterBaseDefaultTypeInternal;
extern MonsterBaseDefaultTypeInternal _MonsterBase_default_instance_;
class MoveRequest;
struct MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
}  // namespace enemy
PROTOBUF_NAMESPACE_OPEN
template<> ::enemy::MonsterBase* Arena::CreateMaybeMessage<::enemy::MonsterBase>(Arena*);
template<> ::enemy::MoveRequest* Arena::CreateMaybeMessage<::enemy::MoveRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace enemy {

// ===================================================================

class MonsterBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:enemy.MonsterBase) */ {
 public:
  inline MonsterBase() : MonsterBase(nullptr) {}
  ~MonsterBase() override;
  explicit PROTOBUF_CONSTEXPR MonsterBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonsterBase(const MonsterBase& from);
  MonsterBase(MonsterBase&& from) noexcept
    : MonsterBase() {
    *this = ::std::move(from);
  }

  inline MonsterBase& operator=(const MonsterBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterBase& operator=(MonsterBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonsterBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonsterBase* internal_default_instance() {
    return reinterpret_cast<const MonsterBase*>(
               &_MonsterBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MonsterBase& a, MonsterBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonsterBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonsterBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonsterBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonsterBase& from) {
    MonsterBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enemy.MonsterBase";
  }
  protected:
  explicit MonsterBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kCurrentHpFieldNumber = 3,
    kMaxHpFieldNumber = 4,
    kAttackPowerFieldNumber = 5,
    kAttackSpeedFieldNumber = 6,
    kMoveSpeedFieldNumber = 7,
    kPosXFieldNumber = 8,
    kPosYFieldNumber = 9,
    kPosZFieldNumber = 10,
    kDirectionFieldNumber = 11,
    kAttackRangeFieldNumber = 12,
    kStateFieldNumber = 13,
    kExpRewardFieldNumber = 14,
  };
  // string monster_id = 1;
  void clear_monster_id();
  const std::string& monster_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_monster_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_monster_id();
  PROTOBUF_NODISCARD std::string* release_monster_id();
  void set_allocated_monster_id(std::string* monster_id);
  private:
  const std::string& _internal_monster_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_monster_id(const std::string& value);
  std::string* _internal_mutable_monster_id();
  public:

  // .common.MonsterType type = 2;
  void clear_type();
  ::common::MonsterType type() const;
  void set_type(::common::MonsterType value);
  private:
  ::common::MonsterType _internal_type() const;
  void _internal_set_type(::common::MonsterType value);
  public:

  // int32 current_hp = 3;
  void clear_current_hp();
  int32_t current_hp() const;
  void set_current_hp(int32_t value);
  private:
  int32_t _internal_current_hp() const;
  void _internal_set_current_hp(int32_t value);
  public:

  // int32 max_hp = 4;
  void clear_max_hp();
  int32_t max_hp() const;
  void set_max_hp(int32_t value);
  private:
  int32_t _internal_max_hp() const;
  void _internal_set_max_hp(int32_t value);
  public:

  // int32 attack_power = 5;
  void clear_attack_power();
  int32_t attack_power() const;
  void set_attack_power(int32_t value);
  private:
  int32_t _internal_attack_power() const;
  void _internal_set_attack_power(int32_t value);
  public:

  // float attack_speed = 6;
  void clear_attack_speed();
  float attack_speed() const;
  void set_attack_speed(float value);
  private:
  float _internal_attack_speed() const;
  void _internal_set_attack_speed(float value);
  public:

  // float move_speed = 7;
  void clear_move_speed();
  float move_speed() const;
  void set_move_speed(float value);
  private:
  float _internal_move_speed() const;
  void _internal_set_move_speed(float value);
  public:

  // float pos_x = 8;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 9;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float pos_z = 10;
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // float direction = 11;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // float attack_range = 12;
  void clear_attack_range();
  float attack_range() const;
  void set_attack_range(float value);
  private:
  float _internal_attack_range() const;
  void _internal_set_attack_range(float value);
  public:

  // .common.MonsterState state = 13;
  void clear_state();
  ::common::MonsterState state() const;
  void set_state(::common::MonsterState value);
  private:
  ::common::MonsterState _internal_state() const;
  void _internal_set_state(::common::MonsterState value);
  public:

  // int32 exp_reward = 14;
  void clear_exp_reward();
  int32_t exp_reward() const;
  void set_exp_reward(int32_t value);
  private:
  int32_t _internal_exp_reward() const;
  void _internal_set_exp_reward(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:enemy.MonsterBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr monster_id_;
    int type_;
    int32_t current_hp_;
    int32_t max_hp_;
    int32_t attack_power_;
    float attack_speed_;
    float move_speed_;
    float pos_x_;
    float pos_y_;
    float pos_z_;
    float direction_;
    float attack_range_;
    int state_;
    int32_t exp_reward_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_enemy_2eproto;
};
// -------------------------------------------------------------------

class MoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:enemy.MoveRequest) */ {
 public:
  inline MoveRequest() : MoveRequest(nullptr) {}
  ~MoveRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveRequest(const MoveRequest& from);
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveRequest& from) {
    MoveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enemy.MoveRequest";
  }
  protected:
  explicit MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterIdFieldNumber = 1,
    kTargetXFieldNumber = 2,
    kTargetYFieldNumber = 3,
    kSpeedMultiplierFieldNumber = 4,
  };
  // string monster_id = 1;
  void clear_monster_id();
  const std::string& monster_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_monster_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_monster_id();
  PROTOBUF_NODISCARD std::string* release_monster_id();
  void set_allocated_monster_id(std::string* monster_id);
  private:
  const std::string& _internal_monster_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_monster_id(const std::string& value);
  std::string* _internal_mutable_monster_id();
  public:

  // float target_x = 2;
  void clear_target_x();
  float target_x() const;
  void set_target_x(float value);
  private:
  float _internal_target_x() const;
  void _internal_set_target_x(float value);
  public:

  // float target_y = 3;
  void clear_target_y();
  float target_y() const;
  void set_target_y(float value);
  private:
  float _internal_target_y() const;
  void _internal_set_target_y(float value);
  public:

  // float speed_multiplier = 4;
  void clear_speed_multiplier();
  float speed_multiplier() const;
  void set_speed_multiplier(float value);
  private:
  float _internal_speed_multiplier() const;
  void _internal_set_speed_multiplier(float value);
  public:

  // @@protoc_insertion_point(class_scope:enemy.MoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr monster_id_;
    float target_x_;
    float target_y_;
    float speed_multiplier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_enemy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MonsterBase

// string monster_id = 1;
inline void MonsterBase::clear_monster_id() {
  _impl_.monster_id_.ClearToEmpty();
}
inline const std::string& MonsterBase::monster_id() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.monster_id)
  return _internal_monster_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonsterBase::set_monster_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.monster_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.monster_id)
}
inline std::string* MonsterBase::mutable_monster_id() {
  std::string* _s = _internal_mutable_monster_id();
  // @@protoc_insertion_point(field_mutable:enemy.MonsterBase.monster_id)
  return _s;
}
inline const std::string& MonsterBase::_internal_monster_id() const {
  return _impl_.monster_id_.Get();
}
inline void MonsterBase::_internal_set_monster_id(const std::string& value) {
  
  _impl_.monster_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MonsterBase::_internal_mutable_monster_id() {
  
  return _impl_.monster_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MonsterBase::release_monster_id() {
  // @@protoc_insertion_point(field_release:enemy.MonsterBase.monster_id)
  return _impl_.monster_id_.Release();
}
inline void MonsterBase::set_allocated_monster_id(std::string* monster_id) {
  if (monster_id != nullptr) {
    
  } else {
    
  }
  _impl_.monster_id_.SetAllocated(monster_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.monster_id_.IsDefault()) {
    _impl_.monster_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enemy.MonsterBase.monster_id)
}

// .common.MonsterType type = 2;
inline void MonsterBase::clear_type() {
  _impl_.type_ = 0;
}
inline ::common::MonsterType MonsterBase::_internal_type() const {
  return static_cast< ::common::MonsterType >(_impl_.type_);
}
inline ::common::MonsterType MonsterBase::type() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.type)
  return _internal_type();
}
inline void MonsterBase::_internal_set_type(::common::MonsterType value) {
  
  _impl_.type_ = value;
}
inline void MonsterBase::set_type(::common::MonsterType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.type)
}

// int32 current_hp = 3;
inline void MonsterBase::clear_current_hp() {
  _impl_.current_hp_ = 0;
}
inline int32_t MonsterBase::_internal_current_hp() const {
  return _impl_.current_hp_;
}
inline int32_t MonsterBase::current_hp() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.current_hp)
  return _internal_current_hp();
}
inline void MonsterBase::_internal_set_current_hp(int32_t value) {
  
  _impl_.current_hp_ = value;
}
inline void MonsterBase::set_current_hp(int32_t value) {
  _internal_set_current_hp(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.current_hp)
}

// int32 max_hp = 4;
inline void MonsterBase::clear_max_hp() {
  _impl_.max_hp_ = 0;
}
inline int32_t MonsterBase::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline int32_t MonsterBase::max_hp() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.max_hp)
  return _internal_max_hp();
}
inline void MonsterBase::_internal_set_max_hp(int32_t value) {
  
  _impl_.max_hp_ = value;
}
inline void MonsterBase::set_max_hp(int32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.max_hp)
}

// int32 attack_power = 5;
inline void MonsterBase::clear_attack_power() {
  _impl_.attack_power_ = 0;
}
inline int32_t MonsterBase::_internal_attack_power() const {
  return _impl_.attack_power_;
}
inline int32_t MonsterBase::attack_power() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.attack_power)
  return _internal_attack_power();
}
inline void MonsterBase::_internal_set_attack_power(int32_t value) {
  
  _impl_.attack_power_ = value;
}
inline void MonsterBase::set_attack_power(int32_t value) {
  _internal_set_attack_power(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.attack_power)
}

// float attack_speed = 6;
inline void MonsterBase::clear_attack_speed() {
  _impl_.attack_speed_ = 0;
}
inline float MonsterBase::_internal_attack_speed() const {
  return _impl_.attack_speed_;
}
inline float MonsterBase::attack_speed() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.attack_speed)
  return _internal_attack_speed();
}
inline void MonsterBase::_internal_set_attack_speed(float value) {
  
  _impl_.attack_speed_ = value;
}
inline void MonsterBase::set_attack_speed(float value) {
  _internal_set_attack_speed(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.attack_speed)
}

// float move_speed = 7;
inline void MonsterBase::clear_move_speed() {
  _impl_.move_speed_ = 0;
}
inline float MonsterBase::_internal_move_speed() const {
  return _impl_.move_speed_;
}
inline float MonsterBase::move_speed() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.move_speed)
  return _internal_move_speed();
}
inline void MonsterBase::_internal_set_move_speed(float value) {
  
  _impl_.move_speed_ = value;
}
inline void MonsterBase::set_move_speed(float value) {
  _internal_set_move_speed(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.move_speed)
}

// float pos_x = 8;
inline void MonsterBase::clear_pos_x() {
  _impl_.pos_x_ = 0;
}
inline float MonsterBase::_internal_pos_x() const {
  return _impl_.pos_x_;
}
inline float MonsterBase::pos_x() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.pos_x)
  return _internal_pos_x();
}
inline void MonsterBase::_internal_set_pos_x(float value) {
  
  _impl_.pos_x_ = value;
}
inline void MonsterBase::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.pos_x)
}

// float pos_y = 9;
inline void MonsterBase::clear_pos_y() {
  _impl_.pos_y_ = 0;
}
inline float MonsterBase::_internal_pos_y() const {
  return _impl_.pos_y_;
}
inline float MonsterBase::pos_y() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.pos_y)
  return _internal_pos_y();
}
inline void MonsterBase::_internal_set_pos_y(float value) {
  
  _impl_.pos_y_ = value;
}
inline void MonsterBase::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.pos_y)
}

// float pos_z = 10;
inline void MonsterBase::clear_pos_z() {
  _impl_.pos_z_ = 0;
}
inline float MonsterBase::_internal_pos_z() const {
  return _impl_.pos_z_;
}
inline float MonsterBase::pos_z() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.pos_z)
  return _internal_pos_z();
}
inline void MonsterBase::_internal_set_pos_z(float value) {
  
  _impl_.pos_z_ = value;
}
inline void MonsterBase::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.pos_z)
}

// float direction = 11;
inline void MonsterBase::clear_direction() {
  _impl_.direction_ = 0;
}
inline float MonsterBase::_internal_direction() const {
  return _impl_.direction_;
}
inline float MonsterBase::direction() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.direction)
  return _internal_direction();
}
inline void MonsterBase::_internal_set_direction(float value) {
  
  _impl_.direction_ = value;
}
inline void MonsterBase::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.direction)
}

// float attack_range = 12;
inline void MonsterBase::clear_attack_range() {
  _impl_.attack_range_ = 0;
}
inline float MonsterBase::_internal_attack_range() const {
  return _impl_.attack_range_;
}
inline float MonsterBase::attack_range() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.attack_range)
  return _internal_attack_range();
}
inline void MonsterBase::_internal_set_attack_range(float value) {
  
  _impl_.attack_range_ = value;
}
inline void MonsterBase::set_attack_range(float value) {
  _internal_set_attack_range(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.attack_range)
}

// .common.MonsterState state = 13;
inline void MonsterBase::clear_state() {
  _impl_.state_ = 0;
}
inline ::common::MonsterState MonsterBase::_internal_state() const {
  return static_cast< ::common::MonsterState >(_impl_.state_);
}
inline ::common::MonsterState MonsterBase::state() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.state)
  return _internal_state();
}
inline void MonsterBase::_internal_set_state(::common::MonsterState value) {
  
  _impl_.state_ = value;
}
inline void MonsterBase::set_state(::common::MonsterState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.state)
}

// int32 exp_reward = 14;
inline void MonsterBase::clear_exp_reward() {
  _impl_.exp_reward_ = 0;
}
inline int32_t MonsterBase::_internal_exp_reward() const {
  return _impl_.exp_reward_;
}
inline int32_t MonsterBase::exp_reward() const {
  // @@protoc_insertion_point(field_get:enemy.MonsterBase.exp_reward)
  return _internal_exp_reward();
}
inline void MonsterBase::_internal_set_exp_reward(int32_t value) {
  
  _impl_.exp_reward_ = value;
}
inline void MonsterBase::set_exp_reward(int32_t value) {
  _internal_set_exp_reward(value);
  // @@protoc_insertion_point(field_set:enemy.MonsterBase.exp_reward)
}

// -------------------------------------------------------------------

// MoveRequest

// string monster_id = 1;
inline void MoveRequest::clear_monster_id() {
  _impl_.monster_id_.ClearToEmpty();
}
inline const std::string& MoveRequest::monster_id() const {
  // @@protoc_insertion_point(field_get:enemy.MoveRequest.monster_id)
  return _internal_monster_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveRequest::set_monster_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.monster_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:enemy.MoveRequest.monster_id)
}
inline std::string* MoveRequest::mutable_monster_id() {
  std::string* _s = _internal_mutable_monster_id();
  // @@protoc_insertion_point(field_mutable:enemy.MoveRequest.monster_id)
  return _s;
}
inline const std::string& MoveRequest::_internal_monster_id() const {
  return _impl_.monster_id_.Get();
}
inline void MoveRequest::_internal_set_monster_id(const std::string& value) {
  
  _impl_.monster_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveRequest::_internal_mutable_monster_id() {
  
  return _impl_.monster_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MoveRequest::release_monster_id() {
  // @@protoc_insertion_point(field_release:enemy.MoveRequest.monster_id)
  return _impl_.monster_id_.Release();
}
inline void MoveRequest::set_allocated_monster_id(std::string* monster_id) {
  if (monster_id != nullptr) {
    
  } else {
    
  }
  _impl_.monster_id_.SetAllocated(monster_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.monster_id_.IsDefault()) {
    _impl_.monster_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:enemy.MoveRequest.monster_id)
}

// float target_x = 2;
inline void MoveRequest::clear_target_x() {
  _impl_.target_x_ = 0;
}
inline float MoveRequest::_internal_target_x() const {
  return _impl_.target_x_;
}
inline float MoveRequest::target_x() const {
  // @@protoc_insertion_point(field_get:enemy.MoveRequest.target_x)
  return _internal_target_x();
}
inline void MoveRequest::_internal_set_target_x(float value) {
  
  _impl_.target_x_ = value;
}
inline void MoveRequest::set_target_x(float value) {
  _internal_set_target_x(value);
  // @@protoc_insertion_point(field_set:enemy.MoveRequest.target_x)
}

// float target_y = 3;
inline void MoveRequest::clear_target_y() {
  _impl_.target_y_ = 0;
}
inline float MoveRequest::_internal_target_y() const {
  return _impl_.target_y_;
}
inline float MoveRequest::target_y() const {
  // @@protoc_insertion_point(field_get:enemy.MoveRequest.target_y)
  return _internal_target_y();
}
inline void MoveRequest::_internal_set_target_y(float value) {
  
  _impl_.target_y_ = value;
}
inline void MoveRequest::set_target_y(float value) {
  _internal_set_target_y(value);
  // @@protoc_insertion_point(field_set:enemy.MoveRequest.target_y)
}

// float speed_multiplier = 4;
inline void MoveRequest::clear_speed_multiplier() {
  _impl_.speed_multiplier_ = 0;
}
inline float MoveRequest::_internal_speed_multiplier() const {
  return _impl_.speed_multiplier_;
}
inline float MoveRequest::speed_multiplier() const {
  // @@protoc_insertion_point(field_get:enemy.MoveRequest.speed_multiplier)
  return _internal_speed_multiplier();
}
inline void MoveRequest::_internal_set_speed_multiplier(float value) {
  
  _impl_.speed_multiplier_ = value;
}
inline void MoveRequest::set_speed_multiplier(float value) {
  _internal_set_speed_multiplier(value);
  // @@protoc_insertion_point(field_set:enemy.MoveRequest.speed_multiplier)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace enemy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_enemy_2eproto
