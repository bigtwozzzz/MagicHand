// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: character.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_character_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_character_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_character_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_character_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_character_2eproto;
namespace character {
class CharacterBase;
struct CharacterBaseDefaultTypeInternal;
extern CharacterBaseDefaultTypeInternal _CharacterBase_default_instance_;
class MoveRequest;
struct MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class SkillSlot;
struct SkillSlotDefaultTypeInternal;
extern SkillSlotDefaultTypeInternal _SkillSlot_default_instance_;
}  // namespace character
PROTOBUF_NAMESPACE_OPEN
template<> ::character::CharacterBase* Arena::CreateMaybeMessage<::character::CharacterBase>(Arena*);
template<> ::character::MoveRequest* Arena::CreateMaybeMessage<::character::MoveRequest>(Arena*);
template<> ::character::SkillSlot* Arena::CreateMaybeMessage<::character::SkillSlot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace character {

// ===================================================================

class SkillSlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:character.SkillSlot) */ {
 public:
  inline SkillSlot() : SkillSlot(nullptr) {}
  ~SkillSlot() override;
  explicit PROTOBUF_CONSTEXPR SkillSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillSlot(const SkillSlot& from);
  SkillSlot(SkillSlot&& from) noexcept
    : SkillSlot() {
    *this = ::std::move(from);
  }

  inline SkillSlot& operator=(const SkillSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillSlot& operator=(SkillSlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillSlot* internal_default_instance() {
    return reinterpret_cast<const SkillSlot*>(
               &_SkillSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SkillSlot& a, SkillSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillSlot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkillSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkillSlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkillSlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkillSlot& from) {
    SkillSlot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillSlot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "character.SkillSlot";
  }
  protected:
  explicit SkillSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillIdFieldNumber = 1,
    kCurrentCooldownFieldNumber = 2,
    kIsActiveFieldNumber = 3,
  };
  // string skill_id = 1;
  void clear_skill_id();
  const std::string& skill_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skill_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skill_id();
  PROTOBUF_NODISCARD std::string* release_skill_id();
  void set_allocated_skill_id(std::string* skill_id);
  private:
  const std::string& _internal_skill_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skill_id(const std::string& value);
  std::string* _internal_mutable_skill_id();
  public:

  // float current_cooldown = 2;
  void clear_current_cooldown();
  float current_cooldown() const;
  void set_current_cooldown(float value);
  private:
  float _internal_current_cooldown() const;
  void _internal_set_current_cooldown(float value);
  public:

  // bool is_active = 3;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:character.SkillSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_id_;
    float current_cooldown_;
    bool is_active_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};
// -------------------------------------------------------------------

class CharacterBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:character.CharacterBase) */ {
 public:
  inline CharacterBase() : CharacterBase(nullptr) {}
  ~CharacterBase() override;
  explicit PROTOBUF_CONSTEXPR CharacterBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterBase(const CharacterBase& from);
  CharacterBase(CharacterBase&& from) noexcept
    : CharacterBase() {
    *this = ::std::move(from);
  }

  inline CharacterBase& operator=(const CharacterBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterBase& operator=(CharacterBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterBase* internal_default_instance() {
    return reinterpret_cast<const CharacterBase*>(
               &_CharacterBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CharacterBase& a, CharacterBase& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterBase& from) {
    CharacterBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "character.CharacterBase";
  }
  protected:
  explicit CharacterBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillsFieldNumber = 11,
    kRoleIdFieldNumber = 1,
    kRoleNameFieldNumber = 2,
    kCurrentHpFieldNumber = 3,
    kMaxHpFieldNumber = 4,
    kLevelFieldNumber = 5,
    kExpFieldNumber = 6,
    kPosXFieldNumber = 7,
    kPosYFieldNumber = 8,
    kDirectionFieldNumber = 9,
    kStatusFieldNumber = 10,
  };
  // repeated .character.SkillSlot skills = 11;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  ::character::SkillSlot* mutable_skills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::character::SkillSlot >*
      mutable_skills();
  private:
  const ::character::SkillSlot& _internal_skills(int index) const;
  ::character::SkillSlot* _internal_add_skills();
  public:
  const ::character::SkillSlot& skills(int index) const;
  ::character::SkillSlot* add_skills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::character::SkillSlot >&
      skills() const;

  // string role_id = 1;
  void clear_role_id();
  const std::string& role_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_id();
  PROTOBUF_NODISCARD std::string* release_role_id();
  void set_allocated_role_id(std::string* role_id);
  private:
  const std::string& _internal_role_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_id(const std::string& value);
  std::string* _internal_mutable_role_id();
  public:

  // string role_name = 2;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // int32 current_hp = 3;
  void clear_current_hp();
  int32_t current_hp() const;
  void set_current_hp(int32_t value);
  private:
  int32_t _internal_current_hp() const;
  void _internal_set_current_hp(int32_t value);
  public:

  // int32 max_hp = 4;
  void clear_max_hp();
  int32_t max_hp() const;
  void set_max_hp(int32_t value);
  private:
  int32_t _internal_max_hp() const;
  void _internal_set_max_hp(int32_t value);
  public:

  // int32 level = 5;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 exp = 6;
  void clear_exp();
  int32_t exp() const;
  void set_exp(int32_t value);
  private:
  int32_t _internal_exp() const;
  void _internal_set_exp(int32_t value);
  public:

  // float pos_x = 7;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 8;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float direction = 9;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // .common.Status status = 10;
  void clear_status();
  ::common::Status status() const;
  void set_status(::common::Status value);
  private:
  ::common::Status _internal_status() const;
  void _internal_set_status(::common::Status value);
  public:

  // @@protoc_insertion_point(class_scope:character.CharacterBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::character::SkillSlot > skills_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
    int32_t current_hp_;
    int32_t max_hp_;
    int32_t level_;
    int32_t exp_;
    float pos_x_;
    float pos_y_;
    float direction_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};
// -------------------------------------------------------------------

class MoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:character.MoveRequest) */ {
 public:
  inline MoveRequest() : MoveRequest(nullptr) {}
  ~MoveRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveRequest(const MoveRequest& from);
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveRequest& from) {
    MoveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "character.MoveRequest";
  }
  protected:
  explicit MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kTargetXFieldNumber = 2,
    kTargetYFieldNumber = 3,
    kSpeedMultiplierFieldNumber = 4,
  };
  // string role_id = 1;
  void clear_role_id();
  const std::string& role_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_id();
  PROTOBUF_NODISCARD std::string* release_role_id();
  void set_allocated_role_id(std::string* role_id);
  private:
  const std::string& _internal_role_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_id(const std::string& value);
  std::string* _internal_mutable_role_id();
  public:

  // float target_x = 2;
  void clear_target_x();
  float target_x() const;
  void set_target_x(float value);
  private:
  float _internal_target_x() const;
  void _internal_set_target_x(float value);
  public:

  // float target_y = 3;
  void clear_target_y();
  float target_y() const;
  void set_target_y(float value);
  private:
  float _internal_target_y() const;
  void _internal_set_target_y(float value);
  public:

  // float speed_multiplier = 4;
  void clear_speed_multiplier();
  float speed_multiplier() const;
  void set_speed_multiplier(float value);
  private:
  float _internal_speed_multiplier() const;
  void _internal_set_speed_multiplier(float value);
  public:

  // @@protoc_insertion_point(class_scope:character.MoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_id_;
    float target_x_;
    float target_y_;
    float speed_multiplier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SkillSlot

// string skill_id = 1;
inline void SkillSlot::clear_skill_id() {
  _impl_.skill_id_.ClearToEmpty();
}
inline const std::string& SkillSlot::skill_id() const {
  // @@protoc_insertion_point(field_get:character.SkillSlot.skill_id)
  return _internal_skill_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkillSlot::set_skill_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skill_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:character.SkillSlot.skill_id)
}
inline std::string* SkillSlot::mutable_skill_id() {
  std::string* _s = _internal_mutable_skill_id();
  // @@protoc_insertion_point(field_mutable:character.SkillSlot.skill_id)
  return _s;
}
inline const std::string& SkillSlot::_internal_skill_id() const {
  return _impl_.skill_id_.Get();
}
inline void SkillSlot::_internal_set_skill_id(const std::string& value) {
  
  _impl_.skill_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SkillSlot::_internal_mutable_skill_id() {
  
  return _impl_.skill_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SkillSlot::release_skill_id() {
  // @@protoc_insertion_point(field_release:character.SkillSlot.skill_id)
  return _impl_.skill_id_.Release();
}
inline void SkillSlot::set_allocated_skill_id(std::string* skill_id) {
  if (skill_id != nullptr) {
    
  } else {
    
  }
  _impl_.skill_id_.SetAllocated(skill_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skill_id_.IsDefault()) {
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:character.SkillSlot.skill_id)
}

// float current_cooldown = 2;
inline void SkillSlot::clear_current_cooldown() {
  _impl_.current_cooldown_ = 0;
}
inline float SkillSlot::_internal_current_cooldown() const {
  return _impl_.current_cooldown_;
}
inline float SkillSlot::current_cooldown() const {
  // @@protoc_insertion_point(field_get:character.SkillSlot.current_cooldown)
  return _internal_current_cooldown();
}
inline void SkillSlot::_internal_set_current_cooldown(float value) {
  
  _impl_.current_cooldown_ = value;
}
inline void SkillSlot::set_current_cooldown(float value) {
  _internal_set_current_cooldown(value);
  // @@protoc_insertion_point(field_set:character.SkillSlot.current_cooldown)
}

// bool is_active = 3;
inline void SkillSlot::clear_is_active() {
  _impl_.is_active_ = false;
}
inline bool SkillSlot::_internal_is_active() const {
  return _impl_.is_active_;
}
inline bool SkillSlot::is_active() const {
  // @@protoc_insertion_point(field_get:character.SkillSlot.is_active)
  return _internal_is_active();
}
inline void SkillSlot::_internal_set_is_active(bool value) {
  
  _impl_.is_active_ = value;
}
inline void SkillSlot::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:character.SkillSlot.is_active)
}

// -------------------------------------------------------------------

// CharacterBase

// string role_id = 1;
inline void CharacterBase::clear_role_id() {
  _impl_.role_id_.ClearToEmpty();
}
inline const std::string& CharacterBase::role_id() const {
  // @@protoc_insertion_point(field_get:character.CharacterBase.role_id)
  return _internal_role_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterBase::set_role_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:character.CharacterBase.role_id)
}
inline std::string* CharacterBase::mutable_role_id() {
  std::string* _s = _internal_mutable_role_id();
  // @@protoc_insertion_point(field_mutable:character.CharacterBase.role_id)
  return _s;
}
inline const std::string& CharacterBase::_internal_role_id() const {
  return _impl_.role_id_.Get();
}
inline void CharacterBase::_internal_set_role_id(const std::string& value) {
  
  _impl_.role_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CharacterBase::_internal_mutable_role_id() {
  
  return _impl_.role_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CharacterBase::release_role_id() {
  // @@protoc_insertion_point(field_release:character.CharacterBase.role_id)
  return _impl_.role_id_.Release();
}
inline void CharacterBase::set_allocated_role_id(std::string* role_id) {
  if (role_id != nullptr) {
    
  } else {
    
  }
  _impl_.role_id_.SetAllocated(role_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_id_.IsDefault()) {
    _impl_.role_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:character.CharacterBase.role_id)
}

// string role_name = 2;
inline void CharacterBase::clear_role_name() {
  _impl_.role_name_.ClearToEmpty();
}
inline const std::string& CharacterBase::role_name() const {
  // @@protoc_insertion_point(field_get:character.CharacterBase.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterBase::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:character.CharacterBase.role_name)
}
inline std::string* CharacterBase::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:character.CharacterBase.role_name)
  return _s;
}
inline const std::string& CharacterBase::_internal_role_name() const {
  return _impl_.role_name_.Get();
}
inline void CharacterBase::_internal_set_role_name(const std::string& value) {
  
  _impl_.role_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CharacterBase::_internal_mutable_role_name() {
  
  return _impl_.role_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CharacterBase::release_role_name() {
  // @@protoc_insertion_point(field_release:character.CharacterBase.role_name)
  return _impl_.role_name_.Release();
}
inline void CharacterBase::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  _impl_.role_name_.SetAllocated(role_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_name_.IsDefault()) {
    _impl_.role_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:character.CharacterBase.role_name)
}

// int32 current_hp = 3;
inline void CharacterBase::clear_current_hp() {
  _impl_.current_hp_ = 0;
}
inline int32_t CharacterBase::_internal_current_hp() const {
  return _impl_.current_hp_;
}
inline int32_t CharacterBase::current_hp() const {
  // @@protoc_insertion_point(field_get:character.CharacterBase.current_hp)
  return _internal_current_hp();
}
inline void CharacterBase::_internal_set_current_hp(int32_t value) {
  
  _impl_.current_hp_ = value;
}
inline void CharacterBase::set_current_hp(int32_t value) {
  _internal_set_current_hp(value);
  // @@protoc_insertion_point(field_set:character.CharacterBase.current_hp)
}

// int32 max_hp = 4;
inline void CharacterBase::clear_max_hp() {
  _impl_.max_hp_ = 0;
}
inline int32_t CharacterBase::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline int32_t CharacterBase::max_hp() const {
  // @@protoc_insertion_point(field_get:character.CharacterBase.max_hp)
  return _internal_max_hp();
}
inline void CharacterBase::_internal_set_max_hp(int32_t value) {
  
  _impl_.max_hp_ = value;
}
inline void CharacterBase::set_max_hp(int32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:character.CharacterBase.max_hp)
}

// int32 level = 5;
inline void CharacterBase::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t CharacterBase::_internal_level() const {
  return _impl_.level_;
}
inline int32_t CharacterBase::level() const {
  // @@protoc_insertion_point(field_get:character.CharacterBase.level)
  return _internal_level();
}
inline void CharacterBase::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void CharacterBase::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:character.CharacterBase.level)
}

// int32 exp = 6;
inline void CharacterBase::clear_exp() {
  _impl_.exp_ = 0;
}
inline int32_t CharacterBase::_internal_exp() const {
  return _impl_.exp_;
}
inline int32_t CharacterBase::exp() const {
  // @@protoc_insertion_point(field_get:character.CharacterBase.exp)
  return _internal_exp();
}
inline void CharacterBase::_internal_set_exp(int32_t value) {
  
  _impl_.exp_ = value;
}
inline void CharacterBase::set_exp(int32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:character.CharacterBase.exp)
}

// float pos_x = 7;
inline void CharacterBase::clear_pos_x() {
  _impl_.pos_x_ = 0;
}
inline float CharacterBase::_internal_pos_x() const {
  return _impl_.pos_x_;
}
inline float CharacterBase::pos_x() const {
  // @@protoc_insertion_point(field_get:character.CharacterBase.pos_x)
  return _internal_pos_x();
}
inline void CharacterBase::_internal_set_pos_x(float value) {
  
  _impl_.pos_x_ = value;
}
inline void CharacterBase::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:character.CharacterBase.pos_x)
}

// float pos_y = 8;
inline void CharacterBase::clear_pos_y() {
  _impl_.pos_y_ = 0;
}
inline float CharacterBase::_internal_pos_y() const {
  return _impl_.pos_y_;
}
inline float CharacterBase::pos_y() const {
  // @@protoc_insertion_point(field_get:character.CharacterBase.pos_y)
  return _internal_pos_y();
}
inline void CharacterBase::_internal_set_pos_y(float value) {
  
  _impl_.pos_y_ = value;
}
inline void CharacterBase::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:character.CharacterBase.pos_y)
}

// float direction = 9;
inline void CharacterBase::clear_direction() {
  _impl_.direction_ = 0;
}
inline float CharacterBase::_internal_direction() const {
  return _impl_.direction_;
}
inline float CharacterBase::direction() const {
  // @@protoc_insertion_point(field_get:character.CharacterBase.direction)
  return _internal_direction();
}
inline void CharacterBase::_internal_set_direction(float value) {
  
  _impl_.direction_ = value;
}
inline void CharacterBase::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:character.CharacterBase.direction)
}

// .common.Status status = 10;
inline void CharacterBase::clear_status() {
  _impl_.status_ = 0;
}
inline ::common::Status CharacterBase::_internal_status() const {
  return static_cast< ::common::Status >(_impl_.status_);
}
inline ::common::Status CharacterBase::status() const {
  // @@protoc_insertion_point(field_get:character.CharacterBase.status)
  return _internal_status();
}
inline void CharacterBase::_internal_set_status(::common::Status value) {
  
  _impl_.status_ = value;
}
inline void CharacterBase::set_status(::common::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:character.CharacterBase.status)
}

// repeated .character.SkillSlot skills = 11;
inline int CharacterBase::_internal_skills_size() const {
  return _impl_.skills_.size();
}
inline int CharacterBase::skills_size() const {
  return _internal_skills_size();
}
inline void CharacterBase::clear_skills() {
  _impl_.skills_.Clear();
}
inline ::character::SkillSlot* CharacterBase::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:character.CharacterBase.skills)
  return _impl_.skills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::character::SkillSlot >*
CharacterBase::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:character.CharacterBase.skills)
  return &_impl_.skills_;
}
inline const ::character::SkillSlot& CharacterBase::_internal_skills(int index) const {
  return _impl_.skills_.Get(index);
}
inline const ::character::SkillSlot& CharacterBase::skills(int index) const {
  // @@protoc_insertion_point(field_get:character.CharacterBase.skills)
  return _internal_skills(index);
}
inline ::character::SkillSlot* CharacterBase::_internal_add_skills() {
  return _impl_.skills_.Add();
}
inline ::character::SkillSlot* CharacterBase::add_skills() {
  ::character::SkillSlot* _add = _internal_add_skills();
  // @@protoc_insertion_point(field_add:character.CharacterBase.skills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::character::SkillSlot >&
CharacterBase::skills() const {
  // @@protoc_insertion_point(field_list:character.CharacterBase.skills)
  return _impl_.skills_;
}

// -------------------------------------------------------------------

// MoveRequest

// string role_id = 1;
inline void MoveRequest::clear_role_id() {
  _impl_.role_id_.ClearToEmpty();
}
inline const std::string& MoveRequest::role_id() const {
  // @@protoc_insertion_point(field_get:character.MoveRequest.role_id)
  return _internal_role_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveRequest::set_role_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:character.MoveRequest.role_id)
}
inline std::string* MoveRequest::mutable_role_id() {
  std::string* _s = _internal_mutable_role_id();
  // @@protoc_insertion_point(field_mutable:character.MoveRequest.role_id)
  return _s;
}
inline const std::string& MoveRequest::_internal_role_id() const {
  return _impl_.role_id_.Get();
}
inline void MoveRequest::_internal_set_role_id(const std::string& value) {
  
  _impl_.role_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveRequest::_internal_mutable_role_id() {
  
  return _impl_.role_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MoveRequest::release_role_id() {
  // @@protoc_insertion_point(field_release:character.MoveRequest.role_id)
  return _impl_.role_id_.Release();
}
inline void MoveRequest::set_allocated_role_id(std::string* role_id) {
  if (role_id != nullptr) {
    
  } else {
    
  }
  _impl_.role_id_.SetAllocated(role_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_id_.IsDefault()) {
    _impl_.role_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:character.MoveRequest.role_id)
}

// float target_x = 2;
inline void MoveRequest::clear_target_x() {
  _impl_.target_x_ = 0;
}
inline float MoveRequest::_internal_target_x() const {
  return _impl_.target_x_;
}
inline float MoveRequest::target_x() const {
  // @@protoc_insertion_point(field_get:character.MoveRequest.target_x)
  return _internal_target_x();
}
inline void MoveRequest::_internal_set_target_x(float value) {
  
  _impl_.target_x_ = value;
}
inline void MoveRequest::set_target_x(float value) {
  _internal_set_target_x(value);
  // @@protoc_insertion_point(field_set:character.MoveRequest.target_x)
}

// float target_y = 3;
inline void MoveRequest::clear_target_y() {
  _impl_.target_y_ = 0;
}
inline float MoveRequest::_internal_target_y() const {
  return _impl_.target_y_;
}
inline float MoveRequest::target_y() const {
  // @@protoc_insertion_point(field_get:character.MoveRequest.target_y)
  return _internal_target_y();
}
inline void MoveRequest::_internal_set_target_y(float value) {
  
  _impl_.target_y_ = value;
}
inline void MoveRequest::set_target_y(float value) {
  _internal_set_target_y(value);
  // @@protoc_insertion_point(field_set:character.MoveRequest.target_y)
}

// float speed_multiplier = 4;
inline void MoveRequest::clear_speed_multiplier() {
  _impl_.speed_multiplier_ = 0;
}
inline float MoveRequest::_internal_speed_multiplier() const {
  return _impl_.speed_multiplier_;
}
inline float MoveRequest::speed_multiplier() const {
  // @@protoc_insertion_point(field_get:character.MoveRequest.speed_multiplier)
  return _internal_speed_multiplier();
}
inline void MoveRequest::_internal_set_speed_multiplier(float value) {
  
  _impl_.speed_multiplier_ = value;
}
inline void MoveRequest::set_speed_multiplier(float value) {
  _internal_set_speed_multiplier(value);
  // @@protoc_insertion_point(field_set:character.MoveRequest.speed_multiplier)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace character

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_character_2eproto
