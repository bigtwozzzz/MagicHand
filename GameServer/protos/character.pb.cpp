// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: character.proto

#include "character.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace character {
PROTOBUF_CONSTEXPR SkillSlot::SkillSlot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_cooldown_)*/0
  , /*decltype(_impl_.is_active_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkillSlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillSlotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillSlotDefaultTypeInternal() {}
  union {
    SkillSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillSlotDefaultTypeInternal _SkillSlot_default_instance_;
PROTOBUF_CONSTEXPR CharacterBase::CharacterBase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.role_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_hp_)*/0
  , /*decltype(_impl_.max_hp_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_.pos_x_)*/0
  , /*decltype(_impl_.pos_y_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterBaseDefaultTypeInternal() {}
  union {
    CharacterBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterBaseDefaultTypeInternal _CharacterBase_default_instance_;
PROTOBUF_CONSTEXPR MoveRequest::MoveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_x_)*/0
  , /*decltype(_impl_.target_y_)*/0
  , /*decltype(_impl_.speed_multiplier_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveRequestDefaultTypeInternal() {}
  union {
    MoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
}  // namespace character
static ::_pb::Metadata file_level_metadata_character_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_character_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_character_2eproto = nullptr;

const uint32_t TableStruct_character_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::character::SkillSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::character::SkillSlot, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::character::SkillSlot, _impl_.current_cooldown_),
  PROTOBUF_FIELD_OFFSET(::character::SkillSlot, _impl_.is_active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _impl_.role_name_),
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _impl_.current_hp_),
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _impl_.max_hp_),
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _impl_.pos_x_),
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _impl_.pos_y_),
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::character::CharacterBase, _impl_.skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::character::MoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::character::MoveRequest, _impl_.role_id_),
  PROTOBUF_FIELD_OFFSET(::character::MoveRequest, _impl_.target_x_),
  PROTOBUF_FIELD_OFFSET(::character::MoveRequest, _impl_.target_y_),
  PROTOBUF_FIELD_OFFSET(::character::MoveRequest, _impl_.speed_multiplier_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::character::SkillSlot)},
  { 9, -1, -1, sizeof(::character::CharacterBase)},
  { 26, -1, -1, sizeof(::character::MoveRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::character::_SkillSlot_default_instance_._instance,
  &::character::_CharacterBase_default_instance_._instance,
  &::character::_MoveRequest_default_instance_._instance,
};

const char descriptor_table_protodef_character_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017character.proto\022\tcharacter\032\014common.pro"
  "to\"J\n\tSkillSlot\022\020\n\010skill_id\030\001 \001(\t\022\030\n\020cur"
  "rent_cooldown\030\002 \001(\002\022\021\n\tis_active\030\003 \001(\010\"\352"
  "\001\n\rCharacterBase\022\017\n\007role_id\030\001 \001(\t\022\021\n\trol"
  "e_name\030\002 \001(\t\022\022\n\ncurrent_hp\030\003 \001(\005\022\016\n\006max_"
  "hp\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\022\013\n\003exp\030\006 \001(\005\022\r\n\005"
  "pos_x\030\007 \001(\002\022\r\n\005pos_y\030\010 \001(\002\022\021\n\tdirection\030"
  "\t \001(\002\022\036\n\006status\030\n \001(\0162\016.common.Status\022$\n"
  "\006skills\030\013 \003(\0132\024.character.SkillSlot\"\\\n\013M"
  "oveRequest\022\017\n\007role_id\030\001 \001(\t\022\020\n\010target_x\030"
  "\002 \001(\002\022\020\n\010target_y\030\003 \001(\002\022\030\n\020speed_multipl"
  "ier\030\004 \001(\002b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_character_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_character_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_character_2eproto = {
    false, false, 457, descriptor_table_protodef_character_2eproto,
    "character.proto",
    &descriptor_table_character_2eproto_once, descriptor_table_character_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_character_2eproto::offsets,
    file_level_metadata_character_2eproto, file_level_enum_descriptors_character_2eproto,
    file_level_service_descriptors_character_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_character_2eproto_getter() {
  return &descriptor_table_character_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_character_2eproto(&descriptor_table_character_2eproto);
namespace character {

// ===================================================================

class SkillSlot::_Internal {
 public:
};

SkillSlot::SkillSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:character.SkillSlot)
}
SkillSlot::SkillSlot(const SkillSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkillSlot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_id_){}
    , decltype(_impl_.current_cooldown_){}
    , decltype(_impl_.is_active_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.skill_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skill_id().empty()) {
    _this->_impl_.skill_id_.Set(from._internal_skill_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.current_cooldown_, &from._impl_.current_cooldown_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_active_) -
    reinterpret_cast<char*>(&_impl_.current_cooldown_)) + sizeof(_impl_.is_active_));
  // @@protoc_insertion_point(copy_constructor:character.SkillSlot)
}

inline void SkillSlot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_id_){}
    , decltype(_impl_.current_cooldown_){0}
    , decltype(_impl_.is_active_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.skill_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SkillSlot::~SkillSlot() {
  // @@protoc_insertion_point(destructor:character.SkillSlot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skill_id_.Destroy();
}

void SkillSlot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkillSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:character.SkillSlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skill_id_.ClearToEmpty();
  ::memset(&_impl_.current_cooldown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_active_) -
      reinterpret_cast<char*>(&_impl_.current_cooldown_)) + sizeof(_impl_.is_active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillSlot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string skill_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_skill_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "character.SkillSlot.skill_id"));
        } else
          goto handle_unusual;
        continue;
      // float current_cooldown = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.current_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool is_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillSlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:character.SkillSlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string skill_id = 1;
  if (!this->_internal_skill_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skill_id().data(), static_cast<int>(this->_internal_skill_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "character.SkillSlot.skill_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_skill_id(), target);
  }

  // float current_cooldown = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_cooldown = this->_internal_current_cooldown();
  uint32_t raw_current_cooldown;
  memcpy(&raw_current_cooldown, &tmp_current_cooldown, sizeof(tmp_current_cooldown));
  if (raw_current_cooldown != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_current_cooldown(), target);
  }

  // bool is_active = 3;
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:character.SkillSlot)
  return target;
}

size_t SkillSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:character.SkillSlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string skill_id = 1;
  if (!this->_internal_skill_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skill_id());
  }

  // float current_cooldown = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_cooldown = this->_internal_current_cooldown();
  uint32_t raw_current_cooldown;
  memcpy(&raw_current_cooldown, &tmp_current_cooldown, sizeof(tmp_current_cooldown));
  if (raw_current_cooldown != 0) {
    total_size += 1 + 4;
  }

  // bool is_active = 3;
  if (this->_internal_is_active() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkillSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillSlot::GetClassData() const { return &_class_data_; }


void SkillSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkillSlot*>(&to_msg);
  auto& from = static_cast<const SkillSlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:character.SkillSlot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_skill_id().empty()) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_cooldown = from._internal_current_cooldown();
  uint32_t raw_current_cooldown;
  memcpy(&raw_current_cooldown, &tmp_current_cooldown, sizeof(tmp_current_cooldown));
  if (raw_current_cooldown != 0) {
    _this->_internal_set_current_cooldown(from._internal_current_cooldown());
  }
  if (from._internal_is_active() != 0) {
    _this->_internal_set_is_active(from._internal_is_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillSlot::CopyFrom(const SkillSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:character.SkillSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillSlot::IsInitialized() const {
  return true;
}

void SkillSlot::InternalSwap(SkillSlot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skill_id_, lhs_arena,
      &other->_impl_.skill_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillSlot, _impl_.is_active_)
      + sizeof(SkillSlot::_impl_.is_active_)
      - PROTOBUF_FIELD_OFFSET(SkillSlot, _impl_.current_cooldown_)>(
          reinterpret_cast<char*>(&_impl_.current_cooldown_),
          reinterpret_cast<char*>(&other->_impl_.current_cooldown_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillSlot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[0]);
}

// ===================================================================

class CharacterBase::_Internal {
 public:
};

CharacterBase::CharacterBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:character.CharacterBase)
}
CharacterBase::CharacterBase(const CharacterBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterBase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.current_hp_){}
    , decltype(_impl_.max_hp_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.pos_x_){}
    , decltype(_impl_.pos_y_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_id().empty()) {
    _this->_impl_.role_id_.Set(from._internal_role_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    _this->_impl_.role_name_.Set(from._internal_role_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.current_hp_, &from._impl_.current_hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.current_hp_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:character.CharacterBase)
}

inline void CharacterBase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){arena}
    , decltype(_impl_.role_id_){}
    , decltype(_impl_.role_name_){}
    , decltype(_impl_.current_hp_){0}
    , decltype(_impl_.max_hp_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.exp_){0}
    , decltype(_impl_.pos_x_){0}
    , decltype(_impl_.pos_y_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.role_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CharacterBase::~CharacterBase() {
  // @@protoc_insertion_point(destructor:character.CharacterBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skills_.~RepeatedPtrField();
  _impl_.role_id_.Destroy();
  _impl_.role_name_.Destroy();
}

void CharacterBase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterBase::Clear() {
// @@protoc_insertion_point(message_clear_start:character.CharacterBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skills_.Clear();
  _impl_.role_id_.ClearToEmpty();
  _impl_.role_name_.ClearToEmpty();
  ::memset(&_impl_.current_hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.current_hp_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_role_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "character.CharacterBase.role_id"));
        } else
          goto handle_unusual;
        continue;
      // string role_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "character.CharacterBase.role_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 current_hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.current_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_hp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float pos_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pos_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float direction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .common.Status status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::common::Status>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .character.SkillSlot skills = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:character.CharacterBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string role_id = 1;
  if (!this->_internal_role_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_id().data(), static_cast<int>(this->_internal_role_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "character.CharacterBase.role_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role_id(), target);
  }

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "character.CharacterBase.role_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_name(), target);
  }

  // int32 current_hp = 3;
  if (this->_internal_current_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_current_hp(), target);
  }

  // int32 max_hp = 4;
  if (this->_internal_max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_hp(), target);
  }

  // int32 level = 5;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  // int32 exp = 6;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_exp(), target);
  }

  // float pos_x = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_pos_x(), target);
  }

  // float pos_y = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_pos_y(), target);
  }

  // float direction = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_direction(), target);
  }

  // .common.Status status = 10;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_status(), target);
  }

  // repeated .character.SkillSlot skills = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:character.CharacterBase)
  return target;
}

size_t CharacterBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:character.CharacterBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .character.SkillSlot skills = 11;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string role_id = 1;
  if (!this->_internal_role_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_id());
  }

  // string role_name = 2;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // int32 current_hp = 3;
  if (this->_internal_current_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_hp());
  }

  // int32 max_hp = 4;
  if (this->_internal_max_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_hp());
  }

  // int32 level = 5;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 exp = 6;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  // float pos_x = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    total_size += 1 + 4;
  }

  // float direction = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    total_size += 1 + 4;
  }

  // .common.Status status = 10;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterBase::GetClassData() const { return &_class_data_; }


void CharacterBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterBase*>(&to_msg);
  auto& from = static_cast<const CharacterBase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:character.CharacterBase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  if (!from._internal_role_id().empty()) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  if (!from._internal_role_name().empty()) {
    _this->_internal_set_role_name(from._internal_role_name());
  }
  if (from._internal_current_hp() != 0) {
    _this->_internal_set_current_hp(from._internal_current_hp());
  }
  if (from._internal_max_hp() != 0) {
    _this->_internal_set_max_hp(from._internal_max_hp());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = from._internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    _this->_internal_set_pos_x(from._internal_pos_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = from._internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    _this->_internal_set_pos_y(from._internal_pos_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = from._internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterBase::CopyFrom(const CharacterBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:character.CharacterBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterBase::IsInitialized() const {
  return true;
}

void CharacterBase::InternalSwap(CharacterBase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_id_, lhs_arena,
      &other->_impl_.role_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_name_, lhs_arena,
      &other->_impl_.role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterBase, _impl_.status_)
      + sizeof(CharacterBase::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CharacterBase, _impl_.current_hp_)>(
          reinterpret_cast<char*>(&_impl_.current_hp_),
          reinterpret_cast<char*>(&other->_impl_.current_hp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[1]);
}

// ===================================================================

class MoveRequest::_Internal {
 public:
};

MoveRequest::MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:character.MoveRequest)
}
MoveRequest::MoveRequest(const MoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_id_){}
    , decltype(_impl_.target_x_){}
    , decltype(_impl_.target_y_){}
    , decltype(_impl_.speed_multiplier_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_id().empty()) {
    _this->_impl_.role_id_.Set(from._internal_role_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.target_x_, &from._impl_.target_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_multiplier_) -
    reinterpret_cast<char*>(&_impl_.target_x_)) + sizeof(_impl_.speed_multiplier_));
  // @@protoc_insertion_point(copy_constructor:character.MoveRequest)
}

inline void MoveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.role_id_){}
    , decltype(_impl_.target_x_){0}
    , decltype(_impl_.target_y_){0}
    , decltype(_impl_.speed_multiplier_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.role_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:character.MoveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_id_.Destroy();
}

void MoveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:character.MoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_id_.ClearToEmpty();
  ::memset(&_impl_.target_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.speed_multiplier_) -
      reinterpret_cast<char*>(&_impl_.target_x_)) + sizeof(_impl_.speed_multiplier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_role_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "character.MoveRequest.role_id"));
        } else
          goto handle_unusual;
        continue;
      // float target_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.target_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float target_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.target_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float speed_multiplier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.speed_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:character.MoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string role_id = 1;
  if (!this->_internal_role_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_id().data(), static_cast<int>(this->_internal_role_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "character.MoveRequest.role_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role_id(), target);
  }

  // float target_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = this->_internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_target_x(), target);
  }

  // float target_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = this->_internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_target_y(), target);
  }

  // float speed_multiplier = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_multiplier = this->_internal_speed_multiplier();
  uint32_t raw_speed_multiplier;
  memcpy(&raw_speed_multiplier, &tmp_speed_multiplier, sizeof(tmp_speed_multiplier));
  if (raw_speed_multiplier != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_speed_multiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:character.MoveRequest)
  return target;
}

size_t MoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:character.MoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_id = 1;
  if (!this->_internal_role_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_id());
  }

  // float target_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = this->_internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    total_size += 1 + 4;
  }

  // float target_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = this->_internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    total_size += 1 + 4;
  }

  // float speed_multiplier = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_multiplier = this->_internal_speed_multiplier();
  uint32_t raw_speed_multiplier;
  memcpy(&raw_speed_multiplier, &tmp_speed_multiplier, sizeof(tmp_speed_multiplier));
  if (raw_speed_multiplier != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveRequest::GetClassData() const { return &_class_data_; }


void MoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveRequest*>(&to_msg);
  auto& from = static_cast<const MoveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:character.MoveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role_id().empty()) {
    _this->_internal_set_role_id(from._internal_role_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = from._internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    _this->_internal_set_target_x(from._internal_target_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = from._internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    _this->_internal_set_target_y(from._internal_target_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_multiplier = from._internal_speed_multiplier();
  uint32_t raw_speed_multiplier;
  memcpy(&raw_speed_multiplier, &tmp_speed_multiplier, sizeof(tmp_speed_multiplier));
  if (raw_speed_multiplier != 0) {
    _this->_internal_set_speed_multiplier(from._internal_speed_multiplier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:character.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  return true;
}

void MoveRequest::InternalSwap(MoveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.role_id_, lhs_arena,
      &other->_impl_.role_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRequest, _impl_.speed_multiplier_)
      + sizeof(MoveRequest::_impl_.speed_multiplier_)
      - PROTOBUF_FIELD_OFFSET(MoveRequest, _impl_.target_x_)>(
          reinterpret_cast<char*>(&_impl_.target_x_),
          reinterpret_cast<char*>(&other->_impl_.target_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace character
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::character::SkillSlot*
Arena::CreateMaybeMessage< ::character::SkillSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::character::SkillSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::character::CharacterBase*
Arena::CreateMaybeMessage< ::character::CharacterBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::character::CharacterBase >(arena);
}
template<> PROTOBUF_NOINLINE ::character::MoveRequest*
Arena::CreateMaybeMessage< ::character::MoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::character::MoveRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
