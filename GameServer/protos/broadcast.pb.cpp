// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: broadcast.proto

#include "broadcast.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace broadcast {
PROTOBUF_CONSTEXPR PlayerOnlineNotify::PlayerOnlineNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_x_)*/0
  , /*decltype(_impl_.pos_y_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerOnlineNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerOnlineNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerOnlineNotifyDefaultTypeInternal() {}
  union {
    PlayerOnlineNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerOnlineNotifyDefaultTypeInternal _PlayerOnlineNotify_default_instance_;
PROTOBUF_CONSTEXPR PlayerOfflineNotify::PlayerOfflineNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerOfflineNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerOfflineNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerOfflineNotifyDefaultTypeInternal() {}
  union {
    PlayerOfflineNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerOfflineNotifyDefaultTypeInternal _PlayerOfflineNotify_default_instance_;
PROTOBUF_CONSTEXPR PlayerSelectStageRequest::PlayerSelectStageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerSelectStageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerSelectStageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerSelectStageRequestDefaultTypeInternal() {}
  union {
    PlayerSelectStageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerSelectStageRequestDefaultTypeInternal _PlayerSelectStageRequest_default_instance_;
PROTOBUF_CONSTEXPR StageSelectRequestNotify::StageSelectRequestNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StageSelectRequestNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StageSelectRequestNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StageSelectRequestNotifyDefaultTypeInternal() {}
  union {
    StageSelectRequestNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StageSelectRequestNotifyDefaultTypeInternal _StageSelectRequestNotify_default_instance_;
PROTOBUF_CONSTEXPR PlayerConfirmStageResponse::PlayerConfirmStageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerConfirmStageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerConfirmStageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerConfirmStageResponseDefaultTypeInternal() {}
  union {
    PlayerConfirmStageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerConfirmStageResponseDefaultTypeInternal _PlayerConfirmStageResponse_default_instance_;
PROTOBUF_CONSTEXPR StageSelectResultNotify::StageSelectResultNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stage_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_all_confirmed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StageSelectResultNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StageSelectResultNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StageSelectResultNotifyDefaultTypeInternal() {}
  union {
    StageSelectResultNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StageSelectResultNotifyDefaultTypeInternal _StageSelectResultNotify_default_instance_;
PROTOBUF_CONSTEXPR CharacterMoveNotify::CharacterMoveNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_x_)*/0
  , /*decltype(_impl_.pos_y_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterMoveNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterMoveNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterMoveNotifyDefaultTypeInternal() {}
  union {
    CharacterMoveNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterMoveNotifyDefaultTypeInternal _CharacterMoveNotify_default_instance_;
PROTOBUF_CONSTEXPR MonsterMoveNotify::MonsterMoveNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_x_)*/0
  , /*decltype(_impl_.pos_y_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MonsterMoveNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonsterMoveNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonsterMoveNotifyDefaultTypeInternal() {}
  union {
    MonsterMoveNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonsterMoveNotifyDefaultTypeInternal _MonsterMoveNotify_default_instance_;
PROTOBUF_CONSTEXPR CharacterStatusUpdate::CharacterStatusUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_status_)*/0
  , /*decltype(_impl_.current_hp_)*/0
  , /*decltype(_impl_.max_hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharacterStatusUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterStatusUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterStatusUpdateDefaultTypeInternal() {}
  union {
    CharacterStatusUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterStatusUpdateDefaultTypeInternal _CharacterStatusUpdate_default_instance_;
PROTOBUF_CONSTEXPR MonsterStatusUpdate::MonsterStatusUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_state_)*/0
  , /*decltype(_impl_.current_hp_)*/0
  , /*decltype(_impl_.max_hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MonsterStatusUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonsterStatusUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonsterStatusUpdateDefaultTypeInternal() {}
  union {
    MonsterStatusUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonsterStatusUpdateDefaultTypeInternal _MonsterStatusUpdate_default_instance_;
PROTOBUF_CONSTEXPR SkillCastNotify::SkillCastNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skill_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entity_type_)*/0
  , /*decltype(_impl_.cast_time_)*/0
  , /*decltype(_impl_.attack_angle_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkillCastNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillCastNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillCastNotifyDefaultTypeInternal() {}
  union {
    SkillCastNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillCastNotifyDefaultTypeInternal _SkillCastNotify_default_instance_;
PROTOBUF_CONSTEXPR EntityAttackNotify::EntityAttackNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skill_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entity_type_)*/0
  , /*decltype(_impl_.attack_angle_)*/0
  , /*decltype(_impl_.cast_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntityAttackNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityAttackNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityAttackNotifyDefaultTypeInternal() {}
  union {
    EntityAttackNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityAttackNotifyDefaultTypeInternal _EntityAttackNotify_default_instance_;
PROTOBUF_CONSTEXPR EntityHitNotify::EntityHitNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attacker_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entity_type_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.new_status_)*/0
  , /*decltype(_impl_.new_monster_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntityHitNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityHitNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityHitNotifyDefaultTypeInternal() {}
  union {
    EntityHitNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityHitNotifyDefaultTypeInternal _EntityHitNotify_default_instance_;
}  // namespace broadcast
static ::_pb::Metadata file_level_metadata_broadcast_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_broadcast_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_broadcast_2eproto = nullptr;

const uint32_t TableStruct_broadcast_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerOnlineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerOnlineNotify, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerOnlineNotify, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerOnlineNotify, _impl_.pos_x_),
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerOnlineNotify, _impl_.pos_y_),
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerOnlineNotify, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerOfflineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerOfflineNotify, _impl_.player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerSelectStageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerSelectStageRequest, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerSelectStageRequest, _impl_.stage_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::StageSelectRequestNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::StageSelectRequestNotify, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::StageSelectRequestNotify, _impl_.stage_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::StageSelectRequestNotify, _impl_.stage_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerConfirmStageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerConfirmStageResponse, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerConfirmStageResponse, _impl_.stage_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::PlayerConfirmStageResponse, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::StageSelectResultNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::StageSelectResultNotify, _impl_.stage_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::StageSelectResultNotify, _impl_.is_all_confirmed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::CharacterMoveNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::CharacterMoveNotify, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::CharacterMoveNotify, _impl_.pos_x_),
  PROTOBUF_FIELD_OFFSET(::broadcast::CharacterMoveNotify, _impl_.pos_y_),
  PROTOBUF_FIELD_OFFSET(::broadcast::CharacterMoveNotify, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::broadcast::CharacterMoveNotify, _impl_.speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::MonsterMoveNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::MonsterMoveNotify, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::MonsterMoveNotify, _impl_.pos_x_),
  PROTOBUF_FIELD_OFFSET(::broadcast::MonsterMoveNotify, _impl_.pos_y_),
  PROTOBUF_FIELD_OFFSET(::broadcast::MonsterMoveNotify, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::broadcast::MonsterMoveNotify, _impl_.speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::CharacterStatusUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::CharacterStatusUpdate, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::CharacterStatusUpdate, _impl_.new_status_),
  PROTOBUF_FIELD_OFFSET(::broadcast::CharacterStatusUpdate, _impl_.current_hp_),
  PROTOBUF_FIELD_OFFSET(::broadcast::CharacterStatusUpdate, _impl_.max_hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::MonsterStatusUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::MonsterStatusUpdate, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::MonsterStatusUpdate, _impl_.new_state_),
  PROTOBUF_FIELD_OFFSET(::broadcast::MonsterStatusUpdate, _impl_.current_hp_),
  PROTOBUF_FIELD_OFFSET(::broadcast::MonsterStatusUpdate, _impl_.max_hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::SkillCastNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::SkillCastNotify, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::SkillCastNotify, _impl_.entity_type_),
  PROTOBUF_FIELD_OFFSET(::broadcast::SkillCastNotify, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::SkillCastNotify, _impl_.cast_time_),
  PROTOBUF_FIELD_OFFSET(::broadcast::SkillCastNotify, _impl_.attack_angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityAttackNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityAttackNotify, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityAttackNotify, _impl_.entity_type_),
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityAttackNotify, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityAttackNotify, _impl_.attack_angle_),
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityAttackNotify, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityAttackNotify, _impl_.cast_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityHitNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityHitNotify, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityHitNotify, _impl_.entity_type_),
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityHitNotify, _impl_.attacker_id_),
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityHitNotify, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityHitNotify, _impl_.new_status_),
  PROTOBUF_FIELD_OFFSET(::broadcast::EntityHitNotify, _impl_.new_monster_state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::broadcast::PlayerOnlineNotify)},
  { 11, -1, -1, sizeof(::broadcast::PlayerOfflineNotify)},
  { 18, -1, -1, sizeof(::broadcast::PlayerSelectStageRequest)},
  { 26, -1, -1, sizeof(::broadcast::StageSelectRequestNotify)},
  { 35, -1, -1, sizeof(::broadcast::PlayerConfirmStageResponse)},
  { 44, -1, -1, sizeof(::broadcast::StageSelectResultNotify)},
  { 52, -1, -1, sizeof(::broadcast::CharacterMoveNotify)},
  { 63, -1, -1, sizeof(::broadcast::MonsterMoveNotify)},
  { 74, -1, -1, sizeof(::broadcast::CharacterStatusUpdate)},
  { 84, -1, -1, sizeof(::broadcast::MonsterStatusUpdate)},
  { 94, -1, -1, sizeof(::broadcast::SkillCastNotify)},
  { 105, -1, -1, sizeof(::broadcast::EntityAttackNotify)},
  { 117, -1, -1, sizeof(::broadcast::EntityHitNotify)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::broadcast::_PlayerOnlineNotify_default_instance_._instance,
  &::broadcast::_PlayerOfflineNotify_default_instance_._instance,
  &::broadcast::_PlayerSelectStageRequest_default_instance_._instance,
  &::broadcast::_StageSelectRequestNotify_default_instance_._instance,
  &::broadcast::_PlayerConfirmStageResponse_default_instance_._instance,
  &::broadcast::_StageSelectResultNotify_default_instance_._instance,
  &::broadcast::_CharacterMoveNotify_default_instance_._instance,
  &::broadcast::_MonsterMoveNotify_default_instance_._instance,
  &::broadcast::_CharacterStatusUpdate_default_instance_._instance,
  &::broadcast::_MonsterStatusUpdate_default_instance_._instance,
  &::broadcast::_SkillCastNotify_default_instance_._instance,
  &::broadcast::_EntityAttackNotify_default_instance_._instance,
  &::broadcast::_EntityHitNotify_default_instance_._instance,
};

const char descriptor_table_protodef_broadcast_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017broadcast.proto\022\tbroadcast\032\014common.pro"
  "to\032\014combat.proto\"z\n\022PlayerOnlineNotify\022\021"
  "\n\tplayer_id\030\001 \001(\t\022\023\n\013player_name\030\002 \001(\t\022\r"
  "\n\005pos_x\030\003 \001(\002\022\r\n\005pos_y\030\004 \001(\002\022\036\n\006status\030\005"
  " \001(\0162\016.common.Status\"(\n\023PlayerOfflineNot"
  "ify\022\021\n\tplayer_id\030\001 \001(\t\"\?\n\030PlayerSelectSt"
  "ageRequest\022\021\n\tplayer_id\030\001 \001(\t\022\020\n\010stage_i"
  "d\030\002 \001(\t\"S\n\030StageSelectRequestNotify\022\021\n\tp"
  "layer_id\030\001 \001(\t\022\020\n\010stage_id\030\002 \001(\t\022\022\n\nstag"
  "e_name\030\003 \001(\t\"j\n\032PlayerConfirmStageRespon"
  "se\022\021\n\tplayer_id\030\001 \001(\t\022\020\n\010stage_id\030\002 \001(\t\022"
  "\'\n\005state\030\003 \001(\0162\030.common.StageSelectState"
  "\"E\n\027StageSelectResultNotify\022\020\n\010stage_id\030"
  "\001 \001(\t\022\030\n\020is_all_confirmed\030\002 \001(\010\"h\n\023Chara"
  "cterMoveNotify\022\021\n\tentity_id\030\001 \001(\t\022\r\n\005pos"
  "_x\030\002 \001(\002\022\r\n\005pos_y\030\003 \001(\002\022\021\n\tdirection\030\004 \001"
  "(\002\022\r\n\005speed\030\005 \001(\002\"f\n\021MonsterMoveNotify\022\021"
  "\n\tentity_id\030\001 \001(\t\022\r\n\005pos_x\030\002 \001(\002\022\r\n\005pos_"
  "y\030\003 \001(\002\022\021\n\tdirection\030\004 \001(\002\022\r\n\005speed\030\005 \001("
  "\002\"r\n\025CharacterStatusUpdate\022\021\n\tentity_id\030"
  "\001 \001(\t\022\"\n\nnew_status\030\002 \001(\0162\016.common.Statu"
  "s\022\022\n\ncurrent_hp\030\003 \001(\005\022\016\n\006max_hp\030\004 \001(\005\"u\n"
  "\023MonsterStatusUpdate\022\021\n\tentity_id\030\001 \001(\t\022"
  "\'\n\tnew_state\030\002 \001(\0162\024.common.MonsterState"
  "\022\022\n\ncurrent_hp\030\003 \001(\005\022\016\n\006max_hp\030\004 \001(\005\"\210\001\n"
  "\017SkillCastNotify\022\021\n\tentity_id\030\001 \001(\t\022\'\n\013e"
  "ntity_type\030\002 \001(\0162\022.combat.EntityType\022\020\n\010"
  "skill_id\030\003 \001(\t\022\021\n\tcast_time\030\004 \001(\002\022\024\n\014att"
  "ack_angle\030\005 \001(\002\"\236\001\n\022EntityAttackNotify\022\021"
  "\n\tentity_id\030\001 \001(\t\022\'\n\013entity_type\030\002 \001(\0162\022"
  ".combat.EntityType\022\021\n\ttarget_id\030\003 \001(\t\022\024\n"
  "\014attack_angle\030\004 \001(\002\022\020\n\010skill_id\030\005 \001(\t\022\021\n"
  "\tcast_time\030\006 \001(\002\"\307\001\n\017EntityHitNotify\022\021\n\t"
  "entity_id\030\001 \001(\t\022\'\n\013entity_type\030\002 \001(\0162\022.c"
  "ombat.EntityType\022\023\n\013attacker_id\030\003 \001(\t\022\016\n"
  "\006damage\030\004 \001(\005\022\"\n\nnew_status\030\005 \001(\0162\016.comm"
  "on.Status\022/\n\021new_monster_state\030\006 \001(\0162\024.c"
  "ommon.MonsterStateb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_broadcast_2eproto_deps[2] = {
  &::descriptor_table_combat_2eproto,
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_broadcast_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_broadcast_2eproto = {
    false, false, 1506, descriptor_table_protodef_broadcast_2eproto,
    "broadcast.proto",
    &descriptor_table_broadcast_2eproto_once, descriptor_table_broadcast_2eproto_deps, 2, 13,
    schemas, file_default_instances, TableStruct_broadcast_2eproto::offsets,
    file_level_metadata_broadcast_2eproto, file_level_enum_descriptors_broadcast_2eproto,
    file_level_service_descriptors_broadcast_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_broadcast_2eproto_getter() {
  return &descriptor_table_broadcast_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_broadcast_2eproto(&descriptor_table_broadcast_2eproto);
namespace broadcast {

// ===================================================================

class PlayerOnlineNotify::_Internal {
 public:
};

PlayerOnlineNotify::PlayerOnlineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.PlayerOnlineNotify)
}
PlayerOnlineNotify::PlayerOnlineNotify(const PlayerOnlineNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerOnlineNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.pos_x_){}
    , decltype(_impl_.pos_y_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_id().empty()) {
    _this->_impl_.player_id_.Set(from._internal_player_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pos_x_, &from._impl_.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:broadcast.PlayerOnlineNotify)
}

inline void PlayerOnlineNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.pos_x_){0}
    , decltype(_impl_.pos_y_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerOnlineNotify::~PlayerOnlineNotify() {
  // @@protoc_insertion_point(destructor:broadcast.PlayerOnlineNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerOnlineNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.player_name_.Destroy();
}

void PlayerOnlineNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerOnlineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.PlayerOnlineNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.player_name_.ClearToEmpty();
  ::memset(&_impl_.pos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerOnlineNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.PlayerOnlineNotify.player_id"));
        } else
          goto handle_unusual;
        continue;
      // string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.PlayerOnlineNotify.player_name"));
        } else
          goto handle_unusual;
        continue;
      // float pos_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pos_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .common.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::common::Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerOnlineNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.PlayerOnlineNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_id().data(), static_cast<int>(this->_internal_player_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.PlayerOnlineNotify.player_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_id(), target);
  }

  // string player_name = 2;
  if (!this->_internal_player_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.PlayerOnlineNotify.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  // float pos_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_x(), target);
  }

  // float pos_y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_pos_y(), target);
  }

  // .common.Status status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.PlayerOnlineNotify)
  return target;
}

size_t PlayerOnlineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.PlayerOnlineNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_id());
  }

  // string player_name = 2;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // float pos_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    total_size += 1 + 4;
  }

  // .common.Status status = 5;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerOnlineNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerOnlineNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerOnlineNotify::GetClassData() const { return &_class_data_; }


void PlayerOnlineNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerOnlineNotify*>(&to_msg);
  auto& from = static_cast<const PlayerOnlineNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.PlayerOnlineNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = from._internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    _this->_internal_set_pos_x(from._internal_pos_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = from._internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    _this->_internal_set_pos_y(from._internal_pos_y());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerOnlineNotify::CopyFrom(const PlayerOnlineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.PlayerOnlineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerOnlineNotify::IsInitialized() const {
  return true;
}

void PlayerOnlineNotify::InternalSwap(PlayerOnlineNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_id_, lhs_arena,
      &other->_impl_.player_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerOnlineNotify, _impl_.status_)
      + sizeof(PlayerOnlineNotify::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(PlayerOnlineNotify, _impl_.pos_x_)>(
          reinterpret_cast<char*>(&_impl_.pos_x_),
          reinterpret_cast<char*>(&other->_impl_.pos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerOnlineNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[0]);
}

// ===================================================================

class PlayerOfflineNotify::_Internal {
 public:
};

PlayerOfflineNotify::PlayerOfflineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.PlayerOfflineNotify)
}
PlayerOfflineNotify::PlayerOfflineNotify(const PlayerOfflineNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerOfflineNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_id().empty()) {
    _this->_impl_.player_id_.Set(from._internal_player_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:broadcast.PlayerOfflineNotify)
}

inline void PlayerOfflineNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerOfflineNotify::~PlayerOfflineNotify() {
  // @@protoc_insertion_point(destructor:broadcast.PlayerOfflineNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerOfflineNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_id_.Destroy();
}

void PlayerOfflineNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerOfflineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.PlayerOfflineNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerOfflineNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.PlayerOfflineNotify.player_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerOfflineNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.PlayerOfflineNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_id().data(), static_cast<int>(this->_internal_player_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.PlayerOfflineNotify.player_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.PlayerOfflineNotify)
  return target;
}

size_t PlayerOfflineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.PlayerOfflineNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerOfflineNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerOfflineNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerOfflineNotify::GetClassData() const { return &_class_data_; }


void PlayerOfflineNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerOfflineNotify*>(&to_msg);
  auto& from = static_cast<const PlayerOfflineNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.PlayerOfflineNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerOfflineNotify::CopyFrom(const PlayerOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.PlayerOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerOfflineNotify::IsInitialized() const {
  return true;
}

void PlayerOfflineNotify::InternalSwap(PlayerOfflineNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_id_, lhs_arena,
      &other->_impl_.player_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerOfflineNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[1]);
}

// ===================================================================

class PlayerSelectStageRequest::_Internal {
 public:
};

PlayerSelectStageRequest::PlayerSelectStageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.PlayerSelectStageRequest)
}
PlayerSelectStageRequest::PlayerSelectStageRequest(const PlayerSelectStageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerSelectStageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.stage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_id().empty()) {
    _this->_impl_.player_id_.Set(from._internal_player_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stage_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stage_id().empty()) {
    _this->_impl_.stage_id_.Set(from._internal_stage_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:broadcast.PlayerSelectStageRequest)
}

inline void PlayerSelectStageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.stage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stage_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerSelectStageRequest::~PlayerSelectStageRequest() {
  // @@protoc_insertion_point(destructor:broadcast.PlayerSelectStageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerSelectStageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.stage_id_.Destroy();
}

void PlayerSelectStageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerSelectStageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.PlayerSelectStageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.stage_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerSelectStageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.PlayerSelectStageRequest.player_id"));
        } else
          goto handle_unusual;
        continue;
      // string stage_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stage_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.PlayerSelectStageRequest.stage_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerSelectStageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.PlayerSelectStageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_id().data(), static_cast<int>(this->_internal_player_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.PlayerSelectStageRequest.player_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_id(), target);
  }

  // string stage_id = 2;
  if (!this->_internal_stage_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stage_id().data(), static_cast<int>(this->_internal_stage_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.PlayerSelectStageRequest.stage_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stage_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.PlayerSelectStageRequest)
  return target;
}

size_t PlayerSelectStageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.PlayerSelectStageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_id());
  }

  // string stage_id = 2;
  if (!this->_internal_stage_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerSelectStageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerSelectStageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerSelectStageRequest::GetClassData() const { return &_class_data_; }


void PlayerSelectStageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerSelectStageRequest*>(&to_msg);
  auto& from = static_cast<const PlayerSelectStageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.PlayerSelectStageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_stage_id().empty()) {
    _this->_internal_set_stage_id(from._internal_stage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerSelectStageRequest::CopyFrom(const PlayerSelectStageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.PlayerSelectStageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSelectStageRequest::IsInitialized() const {
  return true;
}

void PlayerSelectStageRequest::InternalSwap(PlayerSelectStageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_id_, lhs_arena,
      &other->_impl_.player_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stage_id_, lhs_arena,
      &other->_impl_.stage_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSelectStageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[2]);
}

// ===================================================================

class StageSelectRequestNotify::_Internal {
 public:
};

StageSelectRequestNotify::StageSelectRequestNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.StageSelectRequestNotify)
}
StageSelectRequestNotify::StageSelectRequestNotify(const StageSelectRequestNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StageSelectRequestNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.stage_id_){}
    , decltype(_impl_.stage_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_id().empty()) {
    _this->_impl_.player_id_.Set(from._internal_player_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stage_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stage_id().empty()) {
    _this->_impl_.stage_id_.Set(from._internal_stage_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stage_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stage_name().empty()) {
    _this->_impl_.stage_name_.Set(from._internal_stage_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:broadcast.StageSelectRequestNotify)
}

inline void StageSelectRequestNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.stage_id_){}
    , decltype(_impl_.stage_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stage_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stage_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StageSelectRequestNotify::~StageSelectRequestNotify() {
  // @@protoc_insertion_point(destructor:broadcast.StageSelectRequestNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StageSelectRequestNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.stage_id_.Destroy();
  _impl_.stage_name_.Destroy();
}

void StageSelectRequestNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StageSelectRequestNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.StageSelectRequestNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.stage_id_.ClearToEmpty();
  _impl_.stage_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StageSelectRequestNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.StageSelectRequestNotify.player_id"));
        } else
          goto handle_unusual;
        continue;
      // string stage_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stage_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.StageSelectRequestNotify.stage_id"));
        } else
          goto handle_unusual;
        continue;
      // string stage_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stage_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.StageSelectRequestNotify.stage_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StageSelectRequestNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.StageSelectRequestNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_id().data(), static_cast<int>(this->_internal_player_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.StageSelectRequestNotify.player_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_id(), target);
  }

  // string stage_id = 2;
  if (!this->_internal_stage_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stage_id().data(), static_cast<int>(this->_internal_stage_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.StageSelectRequestNotify.stage_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stage_id(), target);
  }

  // string stage_name = 3;
  if (!this->_internal_stage_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stage_name().data(), static_cast<int>(this->_internal_stage_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.StageSelectRequestNotify.stage_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stage_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.StageSelectRequestNotify)
  return target;
}

size_t StageSelectRequestNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.StageSelectRequestNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_id());
  }

  // string stage_id = 2;
  if (!this->_internal_stage_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stage_id());
  }

  // string stage_name = 3;
  if (!this->_internal_stage_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stage_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StageSelectRequestNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StageSelectRequestNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StageSelectRequestNotify::GetClassData() const { return &_class_data_; }


void StageSelectRequestNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StageSelectRequestNotify*>(&to_msg);
  auto& from = static_cast<const StageSelectRequestNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.StageSelectRequestNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_stage_id().empty()) {
    _this->_internal_set_stage_id(from._internal_stage_id());
  }
  if (!from._internal_stage_name().empty()) {
    _this->_internal_set_stage_name(from._internal_stage_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StageSelectRequestNotify::CopyFrom(const StageSelectRequestNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.StageSelectRequestNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageSelectRequestNotify::IsInitialized() const {
  return true;
}

void StageSelectRequestNotify::InternalSwap(StageSelectRequestNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_id_, lhs_arena,
      &other->_impl_.player_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stage_id_, lhs_arena,
      &other->_impl_.stage_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stage_name_, lhs_arena,
      &other->_impl_.stage_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StageSelectRequestNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[3]);
}

// ===================================================================

class PlayerConfirmStageResponse::_Internal {
 public:
};

PlayerConfirmStageResponse::PlayerConfirmStageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.PlayerConfirmStageResponse)
}
PlayerConfirmStageResponse::PlayerConfirmStageResponse(const PlayerConfirmStageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerConfirmStageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.stage_id_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_id().empty()) {
    _this->_impl_.player_id_.Set(from._internal_player_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stage_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stage_id().empty()) {
    _this->_impl_.stage_id_.Set(from._internal_stage_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:broadcast.PlayerConfirmStageResponse)
}

inline void PlayerConfirmStageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.stage_id_){}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stage_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerConfirmStageResponse::~PlayerConfirmStageResponse() {
  // @@protoc_insertion_point(destructor:broadcast.PlayerConfirmStageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerConfirmStageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.stage_id_.Destroy();
}

void PlayerConfirmStageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerConfirmStageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.PlayerConfirmStageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.stage_id_.ClearToEmpty();
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerConfirmStageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.PlayerConfirmStageResponse.player_id"));
        } else
          goto handle_unusual;
        continue;
      // string stage_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stage_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.PlayerConfirmStageResponse.stage_id"));
        } else
          goto handle_unusual;
        continue;
      // .common.StageSelectState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::common::StageSelectState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerConfirmStageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.PlayerConfirmStageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_id().data(), static_cast<int>(this->_internal_player_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.PlayerConfirmStageResponse.player_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_id(), target);
  }

  // string stage_id = 2;
  if (!this->_internal_stage_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stage_id().data(), static_cast<int>(this->_internal_stage_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.PlayerConfirmStageResponse.stage_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stage_id(), target);
  }

  // .common.StageSelectState state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.PlayerConfirmStageResponse)
  return target;
}

size_t PlayerConfirmStageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.PlayerConfirmStageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_id());
  }

  // string stage_id = 2;
  if (!this->_internal_stage_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stage_id());
  }

  // .common.StageSelectState state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerConfirmStageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerConfirmStageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerConfirmStageResponse::GetClassData() const { return &_class_data_; }


void PlayerConfirmStageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerConfirmStageResponse*>(&to_msg);
  auto& from = static_cast<const PlayerConfirmStageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.PlayerConfirmStageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_stage_id().empty()) {
    _this->_internal_set_stage_id(from._internal_stage_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerConfirmStageResponse::CopyFrom(const PlayerConfirmStageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.PlayerConfirmStageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerConfirmStageResponse::IsInitialized() const {
  return true;
}

void PlayerConfirmStageResponse::InternalSwap(PlayerConfirmStageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_id_, lhs_arena,
      &other->_impl_.player_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stage_id_, lhs_arena,
      &other->_impl_.stage_id_, rhs_arena
  );
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerConfirmStageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[4]);
}

// ===================================================================

class StageSelectResultNotify::_Internal {
 public:
};

StageSelectResultNotify::StageSelectResultNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.StageSelectResultNotify)
}
StageSelectResultNotify::StageSelectResultNotify(const StageSelectResultNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StageSelectResultNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stage_id_){}
    , decltype(_impl_.is_all_confirmed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stage_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stage_id().empty()) {
    _this->_impl_.stage_id_.Set(from._internal_stage_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_all_confirmed_ = from._impl_.is_all_confirmed_;
  // @@protoc_insertion_point(copy_constructor:broadcast.StageSelectResultNotify)
}

inline void StageSelectResultNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stage_id_){}
    , decltype(_impl_.is_all_confirmed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stage_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StageSelectResultNotify::~StageSelectResultNotify() {
  // @@protoc_insertion_point(destructor:broadcast.StageSelectResultNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StageSelectResultNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stage_id_.Destroy();
}

void StageSelectResultNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StageSelectResultNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.StageSelectResultNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stage_id_.ClearToEmpty();
  _impl_.is_all_confirmed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StageSelectResultNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stage_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.StageSelectResultNotify.stage_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_all_confirmed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_all_confirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StageSelectResultNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.StageSelectResultNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stage_id = 1;
  if (!this->_internal_stage_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stage_id().data(), static_cast<int>(this->_internal_stage_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.StageSelectResultNotify.stage_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stage_id(), target);
  }

  // bool is_all_confirmed = 2;
  if (this->_internal_is_all_confirmed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_all_confirmed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.StageSelectResultNotify)
  return target;
}

size_t StageSelectResultNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.StageSelectResultNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stage_id = 1;
  if (!this->_internal_stage_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stage_id());
  }

  // bool is_all_confirmed = 2;
  if (this->_internal_is_all_confirmed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StageSelectResultNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StageSelectResultNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StageSelectResultNotify::GetClassData() const { return &_class_data_; }


void StageSelectResultNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StageSelectResultNotify*>(&to_msg);
  auto& from = static_cast<const StageSelectResultNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.StageSelectResultNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stage_id().empty()) {
    _this->_internal_set_stage_id(from._internal_stage_id());
  }
  if (from._internal_is_all_confirmed() != 0) {
    _this->_internal_set_is_all_confirmed(from._internal_is_all_confirmed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StageSelectResultNotify::CopyFrom(const StageSelectResultNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.StageSelectResultNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageSelectResultNotify::IsInitialized() const {
  return true;
}

void StageSelectResultNotify::InternalSwap(StageSelectResultNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stage_id_, lhs_arena,
      &other->_impl_.stage_id_, rhs_arena
  );
  swap(_impl_.is_all_confirmed_, other->_impl_.is_all_confirmed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StageSelectResultNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[5]);
}

// ===================================================================

class CharacterMoveNotify::_Internal {
 public:
};

CharacterMoveNotify::CharacterMoveNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.CharacterMoveNotify)
}
CharacterMoveNotify::CharacterMoveNotify(const CharacterMoveNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterMoveNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.pos_x_){}
    , decltype(_impl_.pos_y_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entity_id().empty()) {
    _this->_impl_.entity_id_.Set(from._internal_entity_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pos_x_, &from._impl_.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) -
    reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.speed_));
  // @@protoc_insertion_point(copy_constructor:broadcast.CharacterMoveNotify)
}

inline void CharacterMoveNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.pos_x_){0}
    , decltype(_impl_.pos_y_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CharacterMoveNotify::~CharacterMoveNotify() {
  // @@protoc_insertion_point(destructor:broadcast.CharacterMoveNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterMoveNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_id_.Destroy();
}

void CharacterMoveNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterMoveNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.CharacterMoveNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  ::memset(&_impl_.pos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.speed_) -
      reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterMoveNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.CharacterMoveNotify.entity_id"));
        } else
          goto handle_unusual;
        continue;
      // float pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pos_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterMoveNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.CharacterMoveNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.CharacterMoveNotify.entity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_id(), target);
  }

  // float pos_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_x(), target);
  }

  // float pos_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_y(), target);
  }

  // float direction = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_direction(), target);
  }

  // float speed = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.CharacterMoveNotify)
  return target;
}

size_t CharacterMoveNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.CharacterMoveNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // float pos_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    total_size += 1 + 4;
  }

  // float direction = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    total_size += 1 + 4;
  }

  // float speed = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterMoveNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterMoveNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterMoveNotify::GetClassData() const { return &_class_data_; }


void CharacterMoveNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterMoveNotify*>(&to_msg);
  auto& from = static_cast<const CharacterMoveNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.CharacterMoveNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = from._internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    _this->_internal_set_pos_x(from._internal_pos_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = from._internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    _this->_internal_set_pos_y(from._internal_pos_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = from._internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterMoveNotify::CopyFrom(const CharacterMoveNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.CharacterMoveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMoveNotify::IsInitialized() const {
  return true;
}

void CharacterMoveNotify::InternalSwap(CharacterMoveNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_id_, lhs_arena,
      &other->_impl_.entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterMoveNotify, _impl_.speed_)
      + sizeof(CharacterMoveNotify::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(CharacterMoveNotify, _impl_.pos_x_)>(
          reinterpret_cast<char*>(&_impl_.pos_x_),
          reinterpret_cast<char*>(&other->_impl_.pos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterMoveNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[6]);
}

// ===================================================================

class MonsterMoveNotify::_Internal {
 public:
};

MonsterMoveNotify::MonsterMoveNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.MonsterMoveNotify)
}
MonsterMoveNotify::MonsterMoveNotify(const MonsterMoveNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MonsterMoveNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.pos_x_){}
    , decltype(_impl_.pos_y_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entity_id().empty()) {
    _this->_impl_.entity_id_.Set(from._internal_entity_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pos_x_, &from._impl_.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) -
    reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.speed_));
  // @@protoc_insertion_point(copy_constructor:broadcast.MonsterMoveNotify)
}

inline void MonsterMoveNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.pos_x_){0}
    , decltype(_impl_.pos_y_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MonsterMoveNotify::~MonsterMoveNotify() {
  // @@protoc_insertion_point(destructor:broadcast.MonsterMoveNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonsterMoveNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_id_.Destroy();
}

void MonsterMoveNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonsterMoveNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.MonsterMoveNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  ::memset(&_impl_.pos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.speed_) -
      reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonsterMoveNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.MonsterMoveNotify.entity_id"));
        } else
          goto handle_unusual;
        continue;
      // float pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pos_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonsterMoveNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.MonsterMoveNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.MonsterMoveNotify.entity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_id(), target);
  }

  // float pos_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_x(), target);
  }

  // float pos_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_y(), target);
  }

  // float direction = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_direction(), target);
  }

  // float speed = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.MonsterMoveNotify)
  return target;
}

size_t MonsterMoveNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.MonsterMoveNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // float pos_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    total_size += 1 + 4;
  }

  // float direction = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    total_size += 1 + 4;
  }

  // float speed = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonsterMoveNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MonsterMoveNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonsterMoveNotify::GetClassData() const { return &_class_data_; }


void MonsterMoveNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MonsterMoveNotify*>(&to_msg);
  auto& from = static_cast<const MonsterMoveNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.MonsterMoveNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = from._internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    _this->_internal_set_pos_x(from._internal_pos_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = from._internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    _this->_internal_set_pos_y(from._internal_pos_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = from._internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonsterMoveNotify::CopyFrom(const MonsterMoveNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.MonsterMoveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterMoveNotify::IsInitialized() const {
  return true;
}

void MonsterMoveNotify::InternalSwap(MonsterMoveNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_id_, lhs_arena,
      &other->_impl_.entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonsterMoveNotify, _impl_.speed_)
      + sizeof(MonsterMoveNotify::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(MonsterMoveNotify, _impl_.pos_x_)>(
          reinterpret_cast<char*>(&_impl_.pos_x_),
          reinterpret_cast<char*>(&other->_impl_.pos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterMoveNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[7]);
}

// ===================================================================

class CharacterStatusUpdate::_Internal {
 public:
};

CharacterStatusUpdate::CharacterStatusUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.CharacterStatusUpdate)
}
CharacterStatusUpdate::CharacterStatusUpdate(const CharacterStatusUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterStatusUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.new_status_){}
    , decltype(_impl_.current_hp_){}
    , decltype(_impl_.max_hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entity_id().empty()) {
    _this->_impl_.entity_id_.Set(from._internal_entity_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.new_status_, &from._impl_.new_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_hp_) -
    reinterpret_cast<char*>(&_impl_.new_status_)) + sizeof(_impl_.max_hp_));
  // @@protoc_insertion_point(copy_constructor:broadcast.CharacterStatusUpdate)
}

inline void CharacterStatusUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.new_status_){0}
    , decltype(_impl_.current_hp_){0}
    , decltype(_impl_.max_hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CharacterStatusUpdate::~CharacterStatusUpdate() {
  // @@protoc_insertion_point(destructor:broadcast.CharacterStatusUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterStatusUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_id_.Destroy();
}

void CharacterStatusUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterStatusUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.CharacterStatusUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  ::memset(&_impl_.new_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_hp_) -
      reinterpret_cast<char*>(&_impl_.new_status_)) + sizeof(_impl_.max_hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterStatusUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.CharacterStatusUpdate.entity_id"));
        } else
          goto handle_unusual;
        continue;
      // .common.Status new_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_status(static_cast<::common::Status>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 current_hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.current_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_hp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterStatusUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.CharacterStatusUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.CharacterStatusUpdate.entity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_id(), target);
  }

  // .common.Status new_status = 2;
  if (this->_internal_new_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_new_status(), target);
  }

  // int32 current_hp = 3;
  if (this->_internal_current_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_current_hp(), target);
  }

  // int32 max_hp = 4;
  if (this->_internal_max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.CharacterStatusUpdate)
  return target;
}

size_t CharacterStatusUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.CharacterStatusUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // .common.Status new_status = 2;
  if (this->_internal_new_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_status());
  }

  // int32 current_hp = 3;
  if (this->_internal_current_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_hp());
  }

  // int32 max_hp = 4;
  if (this->_internal_max_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterStatusUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterStatusUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterStatusUpdate::GetClassData() const { return &_class_data_; }


void CharacterStatusUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterStatusUpdate*>(&to_msg);
  auto& from = static_cast<const CharacterStatusUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.CharacterStatusUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (from._internal_new_status() != 0) {
    _this->_internal_set_new_status(from._internal_new_status());
  }
  if (from._internal_current_hp() != 0) {
    _this->_internal_set_current_hp(from._internal_current_hp());
  }
  if (from._internal_max_hp() != 0) {
    _this->_internal_set_max_hp(from._internal_max_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterStatusUpdate::CopyFrom(const CharacterStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.CharacterStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterStatusUpdate::IsInitialized() const {
  return true;
}

void CharacterStatusUpdate::InternalSwap(CharacterStatusUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_id_, lhs_arena,
      &other->_impl_.entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterStatusUpdate, _impl_.max_hp_)
      + sizeof(CharacterStatusUpdate::_impl_.max_hp_)
      - PROTOBUF_FIELD_OFFSET(CharacterStatusUpdate, _impl_.new_status_)>(
          reinterpret_cast<char*>(&_impl_.new_status_),
          reinterpret_cast<char*>(&other->_impl_.new_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterStatusUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[8]);
}

// ===================================================================

class MonsterStatusUpdate::_Internal {
 public:
};

MonsterStatusUpdate::MonsterStatusUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.MonsterStatusUpdate)
}
MonsterStatusUpdate::MonsterStatusUpdate(const MonsterStatusUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MonsterStatusUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.new_state_){}
    , decltype(_impl_.current_hp_){}
    , decltype(_impl_.max_hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entity_id().empty()) {
    _this->_impl_.entity_id_.Set(from._internal_entity_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.new_state_, &from._impl_.new_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_hp_) -
    reinterpret_cast<char*>(&_impl_.new_state_)) + sizeof(_impl_.max_hp_));
  // @@protoc_insertion_point(copy_constructor:broadcast.MonsterStatusUpdate)
}

inline void MonsterStatusUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.new_state_){0}
    , decltype(_impl_.current_hp_){0}
    , decltype(_impl_.max_hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MonsterStatusUpdate::~MonsterStatusUpdate() {
  // @@protoc_insertion_point(destructor:broadcast.MonsterStatusUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonsterStatusUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_id_.Destroy();
}

void MonsterStatusUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonsterStatusUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.MonsterStatusUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  ::memset(&_impl_.new_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_hp_) -
      reinterpret_cast<char*>(&_impl_.new_state_)) + sizeof(_impl_.max_hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonsterStatusUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.MonsterStatusUpdate.entity_id"));
        } else
          goto handle_unusual;
        continue;
      // .common.MonsterState new_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_state(static_cast<::common::MonsterState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 current_hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.current_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_hp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonsterStatusUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.MonsterStatusUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.MonsterStatusUpdate.entity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_id(), target);
  }

  // .common.MonsterState new_state = 2;
  if (this->_internal_new_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_new_state(), target);
  }

  // int32 current_hp = 3;
  if (this->_internal_current_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_current_hp(), target);
  }

  // int32 max_hp = 4;
  if (this->_internal_max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.MonsterStatusUpdate)
  return target;
}

size_t MonsterStatusUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.MonsterStatusUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // .common.MonsterState new_state = 2;
  if (this->_internal_new_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_state());
  }

  // int32 current_hp = 3;
  if (this->_internal_current_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_hp());
  }

  // int32 max_hp = 4;
  if (this->_internal_max_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonsterStatusUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MonsterStatusUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonsterStatusUpdate::GetClassData() const { return &_class_data_; }


void MonsterStatusUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MonsterStatusUpdate*>(&to_msg);
  auto& from = static_cast<const MonsterStatusUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.MonsterStatusUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (from._internal_new_state() != 0) {
    _this->_internal_set_new_state(from._internal_new_state());
  }
  if (from._internal_current_hp() != 0) {
    _this->_internal_set_current_hp(from._internal_current_hp());
  }
  if (from._internal_max_hp() != 0) {
    _this->_internal_set_max_hp(from._internal_max_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonsterStatusUpdate::CopyFrom(const MonsterStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.MonsterStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterStatusUpdate::IsInitialized() const {
  return true;
}

void MonsterStatusUpdate::InternalSwap(MonsterStatusUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_id_, lhs_arena,
      &other->_impl_.entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonsterStatusUpdate, _impl_.max_hp_)
      + sizeof(MonsterStatusUpdate::_impl_.max_hp_)
      - PROTOBUF_FIELD_OFFSET(MonsterStatusUpdate, _impl_.new_state_)>(
          reinterpret_cast<char*>(&_impl_.new_state_),
          reinterpret_cast<char*>(&other->_impl_.new_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterStatusUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[9]);
}

// ===================================================================

class SkillCastNotify::_Internal {
 public:
};

SkillCastNotify::SkillCastNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.SkillCastNotify)
}
SkillCastNotify::SkillCastNotify(const SkillCastNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkillCastNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.cast_time_){}
    , decltype(_impl_.attack_angle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entity_id().empty()) {
    _this->_impl_.entity_id_.Set(from._internal_entity_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.skill_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skill_id().empty()) {
    _this->_impl_.skill_id_.Set(from._internal_skill_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.entity_type_, &from._impl_.entity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attack_angle_) -
    reinterpret_cast<char*>(&_impl_.entity_type_)) + sizeof(_impl_.attack_angle_));
  // @@protoc_insertion_point(copy_constructor:broadcast.SkillCastNotify)
}

inline void SkillCastNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.entity_type_){0}
    , decltype(_impl_.cast_time_){0}
    , decltype(_impl_.attack_angle_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.skill_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SkillCastNotify::~SkillCastNotify() {
  // @@protoc_insertion_point(destructor:broadcast.SkillCastNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillCastNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_id_.Destroy();
  _impl_.skill_id_.Destroy();
}

void SkillCastNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkillCastNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.SkillCastNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  _impl_.skill_id_.ClearToEmpty();
  ::memset(&_impl_.entity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attack_angle_) -
      reinterpret_cast<char*>(&_impl_.entity_type_)) + sizeof(_impl_.attack_angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillCastNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.SkillCastNotify.entity_id"));
        } else
          goto handle_unusual;
        continue;
      // .combat.EntityType entity_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_entity_type(static_cast<::combat::EntityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string skill_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_skill_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.SkillCastNotify.skill_id"));
        } else
          goto handle_unusual;
        continue;
      // float cast_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.cast_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attack_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.attack_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillCastNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.SkillCastNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.SkillCastNotify.entity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_id(), target);
  }

  // .combat.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_entity_type(), target);
  }

  // string skill_id = 3;
  if (!this->_internal_skill_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skill_id().data(), static_cast<int>(this->_internal_skill_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.SkillCastNotify.skill_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_skill_id(), target);
  }

  // float cast_time = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = this->_internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_cast_time(), target);
  }

  // float attack_angle = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_angle = this->_internal_attack_angle();
  uint32_t raw_attack_angle;
  memcpy(&raw_attack_angle, &tmp_attack_angle, sizeof(tmp_attack_angle));
  if (raw_attack_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_attack_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.SkillCastNotify)
  return target;
}

size_t SkillCastNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.SkillCastNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // string skill_id = 3;
  if (!this->_internal_skill_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skill_id());
  }

  // .combat.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entity_type());
  }

  // float cast_time = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = this->_internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    total_size += 1 + 4;
  }

  // float attack_angle = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_angle = this->_internal_attack_angle();
  uint32_t raw_attack_angle;
  memcpy(&raw_attack_angle, &tmp_attack_angle, sizeof(tmp_attack_angle));
  if (raw_attack_angle != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillCastNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkillCastNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillCastNotify::GetClassData() const { return &_class_data_; }


void SkillCastNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkillCastNotify*>(&to_msg);
  auto& from = static_cast<const SkillCastNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.SkillCastNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (!from._internal_skill_id().empty()) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  if (from._internal_entity_type() != 0) {
    _this->_internal_set_entity_type(from._internal_entity_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = from._internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    _this->_internal_set_cast_time(from._internal_cast_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_angle = from._internal_attack_angle();
  uint32_t raw_attack_angle;
  memcpy(&raw_attack_angle, &tmp_attack_angle, sizeof(tmp_attack_angle));
  if (raw_attack_angle != 0) {
    _this->_internal_set_attack_angle(from._internal_attack_angle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillCastNotify::CopyFrom(const SkillCastNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.SkillCastNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCastNotify::IsInitialized() const {
  return true;
}

void SkillCastNotify::InternalSwap(SkillCastNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_id_, lhs_arena,
      &other->_impl_.entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skill_id_, lhs_arena,
      &other->_impl_.skill_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillCastNotify, _impl_.attack_angle_)
      + sizeof(SkillCastNotify::_impl_.attack_angle_)
      - PROTOBUF_FIELD_OFFSET(SkillCastNotify, _impl_.entity_type_)>(
          reinterpret_cast<char*>(&_impl_.entity_type_),
          reinterpret_cast<char*>(&other->_impl_.entity_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillCastNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[10]);
}

// ===================================================================

class EntityAttackNotify::_Internal {
 public:
};

EntityAttackNotify::EntityAttackNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.EntityAttackNotify)
}
EntityAttackNotify::EntityAttackNotify(const EntityAttackNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityAttackNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.attack_angle_){}
    , decltype(_impl_.cast_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entity_id().empty()) {
    _this->_impl_.entity_id_.Set(from._internal_entity_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_id().empty()) {
    _this->_impl_.target_id_.Set(from._internal_target_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.skill_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skill_id().empty()) {
    _this->_impl_.skill_id_.Set(from._internal_skill_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.entity_type_, &from._impl_.entity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cast_time_) -
    reinterpret_cast<char*>(&_impl_.entity_type_)) + sizeof(_impl_.cast_time_));
  // @@protoc_insertion_point(copy_constructor:broadcast.EntityAttackNotify)
}

inline void EntityAttackNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.entity_type_){0}
    , decltype(_impl_.attack_angle_){0}
    , decltype(_impl_.cast_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.skill_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EntityAttackNotify::~EntityAttackNotify() {
  // @@protoc_insertion_point(destructor:broadcast.EntityAttackNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityAttackNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_id_.Destroy();
  _impl_.target_id_.Destroy();
  _impl_.skill_id_.Destroy();
}

void EntityAttackNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityAttackNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.EntityAttackNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  _impl_.target_id_.ClearToEmpty();
  _impl_.skill_id_.ClearToEmpty();
  ::memset(&_impl_.entity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cast_time_) -
      reinterpret_cast<char*>(&_impl_.entity_type_)) + sizeof(_impl_.cast_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityAttackNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.EntityAttackNotify.entity_id"));
        } else
          goto handle_unusual;
        continue;
      // .combat.EntityType entity_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_entity_type(static_cast<::combat::EntityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.EntityAttackNotify.target_id"));
        } else
          goto handle_unusual;
        continue;
      // float attack_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.attack_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string skill_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_skill_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.EntityAttackNotify.skill_id"));
        } else
          goto handle_unusual;
        continue;
      // float cast_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.cast_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityAttackNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.EntityAttackNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.EntityAttackNotify.entity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_id(), target);
  }

  // .combat.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_entity_type(), target);
  }

  // string target_id = 3;
  if (!this->_internal_target_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_id().data(), static_cast<int>(this->_internal_target_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.EntityAttackNotify.target_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_id(), target);
  }

  // float attack_angle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_angle = this->_internal_attack_angle();
  uint32_t raw_attack_angle;
  memcpy(&raw_attack_angle, &tmp_attack_angle, sizeof(tmp_attack_angle));
  if (raw_attack_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_attack_angle(), target);
  }

  // string skill_id = 5;
  if (!this->_internal_skill_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skill_id().data(), static_cast<int>(this->_internal_skill_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.EntityAttackNotify.skill_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_skill_id(), target);
  }

  // float cast_time = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = this->_internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_cast_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.EntityAttackNotify)
  return target;
}

size_t EntityAttackNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.EntityAttackNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // string target_id = 3;
  if (!this->_internal_target_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_id());
  }

  // string skill_id = 5;
  if (!this->_internal_skill_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skill_id());
  }

  // .combat.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entity_type());
  }

  // float attack_angle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_angle = this->_internal_attack_angle();
  uint32_t raw_attack_angle;
  memcpy(&raw_attack_angle, &tmp_attack_angle, sizeof(tmp_attack_angle));
  if (raw_attack_angle != 0) {
    total_size += 1 + 4;
  }

  // float cast_time = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = this->_internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityAttackNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityAttackNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityAttackNotify::GetClassData() const { return &_class_data_; }


void EntityAttackNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityAttackNotify*>(&to_msg);
  auto& from = static_cast<const EntityAttackNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.EntityAttackNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (!from._internal_target_id().empty()) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (!from._internal_skill_id().empty()) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  if (from._internal_entity_type() != 0) {
    _this->_internal_set_entity_type(from._internal_entity_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_angle = from._internal_attack_angle();
  uint32_t raw_attack_angle;
  memcpy(&raw_attack_angle, &tmp_attack_angle, sizeof(tmp_attack_angle));
  if (raw_attack_angle != 0) {
    _this->_internal_set_attack_angle(from._internal_attack_angle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = from._internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    _this->_internal_set_cast_time(from._internal_cast_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityAttackNotify::CopyFrom(const EntityAttackNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.EntityAttackNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityAttackNotify::IsInitialized() const {
  return true;
}

void EntityAttackNotify::InternalSwap(EntityAttackNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_id_, lhs_arena,
      &other->_impl_.entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_id_, lhs_arena,
      &other->_impl_.target_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skill_id_, lhs_arena,
      &other->_impl_.skill_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityAttackNotify, _impl_.cast_time_)
      + sizeof(EntityAttackNotify::_impl_.cast_time_)
      - PROTOBUF_FIELD_OFFSET(EntityAttackNotify, _impl_.entity_type_)>(
          reinterpret_cast<char*>(&_impl_.entity_type_),
          reinterpret_cast<char*>(&other->_impl_.entity_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityAttackNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[11]);
}

// ===================================================================

class EntityHitNotify::_Internal {
 public:
};

EntityHitNotify::EntityHitNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:broadcast.EntityHitNotify)
}
EntityHitNotify::EntityHitNotify(const EntityHitNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityHitNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.attacker_id_){}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.new_status_){}
    , decltype(_impl_.new_monster_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entity_id().empty()) {
    _this->_impl_.entity_id_.Set(from._internal_entity_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attacker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attacker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attacker_id().empty()) {
    _this->_impl_.attacker_id_.Set(from._internal_attacker_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.entity_type_, &from._impl_.entity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_monster_state_) -
    reinterpret_cast<char*>(&_impl_.entity_type_)) + sizeof(_impl_.new_monster_state_));
  // @@protoc_insertion_point(copy_constructor:broadcast.EntityHitNotify)
}

inline void EntityHitNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.attacker_id_){}
    , decltype(_impl_.entity_type_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.new_status_){0}
    , decltype(_impl_.new_monster_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attacker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attacker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EntityHitNotify::~EntityHitNotify() {
  // @@protoc_insertion_point(destructor:broadcast.EntityHitNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityHitNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_id_.Destroy();
  _impl_.attacker_id_.Destroy();
}

void EntityHitNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityHitNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:broadcast.EntityHitNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  _impl_.attacker_id_.ClearToEmpty();
  ::memset(&_impl_.entity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.new_monster_state_) -
      reinterpret_cast<char*>(&_impl_.entity_type_)) + sizeof(_impl_.new_monster_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityHitNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.EntityHitNotify.entity_id"));
        } else
          goto handle_unusual;
        continue;
      // .combat.EntityType entity_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_entity_type(static_cast<::combat::EntityType>(val));
        } else
          goto handle_unusual;
        continue;
      // string attacker_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_attacker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "broadcast.EntityHitNotify.attacker_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .common.Status new_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_status(static_cast<::common::Status>(val));
        } else
          goto handle_unusual;
        continue;
      // .common.MonsterState new_monster_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_monster_state(static_cast<::common::MonsterState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityHitNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:broadcast.EntityHitNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.EntityHitNotify.entity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_id(), target);
  }

  // .combat.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_entity_type(), target);
  }

  // string attacker_id = 3;
  if (!this->_internal_attacker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attacker_id().data(), static_cast<int>(this->_internal_attacker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "broadcast.EntityHitNotify.attacker_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_attacker_id(), target);
  }

  // int32 damage = 4;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_damage(), target);
  }

  // .common.Status new_status = 5;
  if (this->_internal_new_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_new_status(), target);
  }

  // .common.MonsterState new_monster_state = 6;
  if (this->_internal_new_monster_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_new_monster_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:broadcast.EntityHitNotify)
  return target;
}

size_t EntityHitNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:broadcast.EntityHitNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // string attacker_id = 3;
  if (!this->_internal_attacker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attacker_id());
  }

  // .combat.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entity_type());
  }

  // int32 damage = 4;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  // .common.Status new_status = 5;
  if (this->_internal_new_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_status());
  }

  // .common.MonsterState new_monster_state = 6;
  if (this->_internal_new_monster_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_monster_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityHitNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityHitNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityHitNotify::GetClassData() const { return &_class_data_; }


void EntityHitNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityHitNotify*>(&to_msg);
  auto& from = static_cast<const EntityHitNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:broadcast.EntityHitNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (!from._internal_attacker_id().empty()) {
    _this->_internal_set_attacker_id(from._internal_attacker_id());
  }
  if (from._internal_entity_type() != 0) {
    _this->_internal_set_entity_type(from._internal_entity_type());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_new_status() != 0) {
    _this->_internal_set_new_status(from._internal_new_status());
  }
  if (from._internal_new_monster_state() != 0) {
    _this->_internal_set_new_monster_state(from._internal_new_monster_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityHitNotify::CopyFrom(const EntityHitNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:broadcast.EntityHitNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityHitNotify::IsInitialized() const {
  return true;
}

void EntityHitNotify::InternalSwap(EntityHitNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_id_, lhs_arena,
      &other->_impl_.entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attacker_id_, lhs_arena,
      &other->_impl_.attacker_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityHitNotify, _impl_.new_monster_state_)
      + sizeof(EntityHitNotify::_impl_.new_monster_state_)
      - PROTOBUF_FIELD_OFFSET(EntityHitNotify, _impl_.entity_type_)>(
          reinterpret_cast<char*>(&_impl_.entity_type_),
          reinterpret_cast<char*>(&other->_impl_.entity_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityHitNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace broadcast
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::broadcast::PlayerOnlineNotify*
Arena::CreateMaybeMessage< ::broadcast::PlayerOnlineNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::PlayerOnlineNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::PlayerOfflineNotify*
Arena::CreateMaybeMessage< ::broadcast::PlayerOfflineNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::PlayerOfflineNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::PlayerSelectStageRequest*
Arena::CreateMaybeMessage< ::broadcast::PlayerSelectStageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::PlayerSelectStageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::StageSelectRequestNotify*
Arena::CreateMaybeMessage< ::broadcast::StageSelectRequestNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::StageSelectRequestNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::PlayerConfirmStageResponse*
Arena::CreateMaybeMessage< ::broadcast::PlayerConfirmStageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::PlayerConfirmStageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::StageSelectResultNotify*
Arena::CreateMaybeMessage< ::broadcast::StageSelectResultNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::StageSelectResultNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::CharacterMoveNotify*
Arena::CreateMaybeMessage< ::broadcast::CharacterMoveNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::CharacterMoveNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::MonsterMoveNotify*
Arena::CreateMaybeMessage< ::broadcast::MonsterMoveNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::MonsterMoveNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::CharacterStatusUpdate*
Arena::CreateMaybeMessage< ::broadcast::CharacterStatusUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::CharacterStatusUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::MonsterStatusUpdate*
Arena::CreateMaybeMessage< ::broadcast::MonsterStatusUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::MonsterStatusUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::SkillCastNotify*
Arena::CreateMaybeMessage< ::broadcast::SkillCastNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::SkillCastNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::EntityAttackNotify*
Arena::CreateMaybeMessage< ::broadcast::EntityAttackNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::EntityAttackNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::broadcast::EntityHitNotify*
Arena::CreateMaybeMessage< ::broadcast::EntityHitNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::broadcast::EntityHitNotify >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
