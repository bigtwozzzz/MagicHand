// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skill_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skill_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skill_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skill_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skill_2eproto;
namespace skill {
class SkillDefinition;
struct SkillDefinitionDefaultTypeInternal;
extern SkillDefinitionDefaultTypeInternal _SkillDefinition_default_instance_;
}  // namespace skill
PROTOBUF_NAMESPACE_OPEN
template<> ::skill::SkillDefinition* Arena::CreateMaybeMessage<::skill::SkillDefinition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skill {

enum SkillType : int {
  BASIC_ATTACK = 0,
  ELEMENTAL_SPELL = 1,
  CONTROL_EFFECT = 2,
  BUFF_DEBUFF = 3,
  SPECIAL_ABILITY = 4,
  SkillType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SkillType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SkillType_IsValid(int value);
constexpr SkillType SkillType_MIN = BASIC_ATTACK;
constexpr SkillType SkillType_MAX = SPECIAL_ABILITY;
constexpr int SkillType_ARRAYSIZE = SkillType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillType_descriptor();
template<typename T>
inline const std::string& SkillType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SkillType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SkillType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SkillType_descriptor(), enum_t_value);
}
inline bool SkillType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SkillType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SkillType>(
    SkillType_descriptor(), name, value);
}
enum EffectType : int {
  DAMAGE = 0,
  HEAL = 1,
  STUN = 2,
  SLOW = 3,
  SPEED_BOOST = 4,
  INVISIBLE = 5,
  ELEMENTAL_DAMAGE = 6,
  EffectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EffectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EffectType_IsValid(int value);
constexpr EffectType EffectType_MIN = DAMAGE;
constexpr EffectType EffectType_MAX = ELEMENTAL_DAMAGE;
constexpr int EffectType_ARRAYSIZE = EffectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EffectType_descriptor();
template<typename T>
inline const std::string& EffectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EffectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EffectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EffectType_descriptor(), enum_t_value);
}
inline bool EffectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EffectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EffectType>(
    EffectType_descriptor(), name, value);
}
// ===================================================================

class SkillDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.SkillDefinition) */ {
 public:
  inline SkillDefinition() : SkillDefinition(nullptr) {}
  ~SkillDefinition() override;
  explicit PROTOBUF_CONSTEXPR SkillDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillDefinition(const SkillDefinition& from);
  SkillDefinition(SkillDefinition&& from) noexcept
    : SkillDefinition() {
    *this = ::std::move(from);
  }

  inline SkillDefinition& operator=(const SkillDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillDefinition& operator=(SkillDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillDefinition* internal_default_instance() {
    return reinterpret_cast<const SkillDefinition*>(
               &_SkillDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SkillDefinition& a, SkillDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkillDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkillDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkillDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkillDefinition& from) {
    SkillDefinition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.SkillDefinition";
  }
  protected:
  explicit SkillDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectsFieldNumber = 9,
    kSkillIdFieldNumber = 1,
    kSkillNameFieldNumber = 2,
    kSkillTypeFieldNumber = 3,
    kBaseDamageFieldNumber = 4,
    kCastTimeFieldNumber = 5,
    kCoolDownFieldNumber = 6,
    kDurationFieldNumber = 7,
    kManaCostFieldNumber = 8,
    kElementTypeFieldNumber = 10,
  };
  // repeated .skill.EffectType effects = 9;
  int effects_size() const;
  private:
  int _internal_effects_size() const;
  public:
  void clear_effects();
  private:
  ::skill::EffectType _internal_effects(int index) const;
  void _internal_add_effects(::skill::EffectType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_effects();
  public:
  ::skill::EffectType effects(int index) const;
  void set_effects(int index, ::skill::EffectType value);
  void add_effects(::skill::EffectType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& effects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_effects();

  // string skill_id = 1;
  void clear_skill_id();
  const std::string& skill_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skill_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skill_id();
  PROTOBUF_NODISCARD std::string* release_skill_id();
  void set_allocated_skill_id(std::string* skill_id);
  private:
  const std::string& _internal_skill_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skill_id(const std::string& value);
  std::string* _internal_mutable_skill_id();
  public:

  // string skill_name = 2;
  void clear_skill_name();
  const std::string& skill_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skill_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skill_name();
  PROTOBUF_NODISCARD std::string* release_skill_name();
  void set_allocated_skill_name(std::string* skill_name);
  private:
  const std::string& _internal_skill_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skill_name(const std::string& value);
  std::string* _internal_mutable_skill_name();
  public:

  // .skill.SkillType skill_type = 3;
  void clear_skill_type();
  ::skill::SkillType skill_type() const;
  void set_skill_type(::skill::SkillType value);
  private:
  ::skill::SkillType _internal_skill_type() const;
  void _internal_set_skill_type(::skill::SkillType value);
  public:

  // int32 base_damage = 4;
  void clear_base_damage();
  int32_t base_damage() const;
  void set_base_damage(int32_t value);
  private:
  int32_t _internal_base_damage() const;
  void _internal_set_base_damage(int32_t value);
  public:

  // float cast_time = 5;
  void clear_cast_time();
  float cast_time() const;
  void set_cast_time(float value);
  private:
  float _internal_cast_time() const;
  void _internal_set_cast_time(float value);
  public:

  // float cool_down = 6;
  void clear_cool_down();
  float cool_down() const;
  void set_cool_down(float value);
  private:
  float _internal_cool_down() const;
  void _internal_set_cool_down(float value);
  public:

  // float duration = 7;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // int32 mana_cost = 8;
  void clear_mana_cost();
  int32_t mana_cost() const;
  void set_mana_cost(int32_t value);
  private:
  int32_t _internal_mana_cost() const;
  void _internal_set_mana_cost(int32_t value);
  public:

  // .common.ElementType element_type = 10;
  void clear_element_type();
  ::common::ElementType element_type() const;
  void set_element_type(::common::ElementType value);
  private:
  ::common::ElementType _internal_element_type() const;
  void _internal_set_element_type(::common::ElementType value);
  public:

  // @@protoc_insertion_point(class_scope:skill.SkillDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> effects_;
    mutable std::atomic<int> _effects_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_name_;
    int skill_type_;
    int32_t base_damage_;
    float cast_time_;
    float cool_down_;
    float duration_;
    int32_t mana_cost_;
    int element_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_skill_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SkillDefinition

// string skill_id = 1;
inline void SkillDefinition::clear_skill_id() {
  _impl_.skill_id_.ClearToEmpty();
}
inline const std::string& SkillDefinition::skill_id() const {
  // @@protoc_insertion_point(field_get:skill.SkillDefinition.skill_id)
  return _internal_skill_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkillDefinition::set_skill_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skill_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skill.SkillDefinition.skill_id)
}
inline std::string* SkillDefinition::mutable_skill_id() {
  std::string* _s = _internal_mutable_skill_id();
  // @@protoc_insertion_point(field_mutable:skill.SkillDefinition.skill_id)
  return _s;
}
inline const std::string& SkillDefinition::_internal_skill_id() const {
  return _impl_.skill_id_.Get();
}
inline void SkillDefinition::_internal_set_skill_id(const std::string& value) {
  
  _impl_.skill_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SkillDefinition::_internal_mutable_skill_id() {
  
  return _impl_.skill_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SkillDefinition::release_skill_id() {
  // @@protoc_insertion_point(field_release:skill.SkillDefinition.skill_id)
  return _impl_.skill_id_.Release();
}
inline void SkillDefinition::set_allocated_skill_id(std::string* skill_id) {
  if (skill_id != nullptr) {
    
  } else {
    
  }
  _impl_.skill_id_.SetAllocated(skill_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skill_id_.IsDefault()) {
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skill.SkillDefinition.skill_id)
}

// string skill_name = 2;
inline void SkillDefinition::clear_skill_name() {
  _impl_.skill_name_.ClearToEmpty();
}
inline const std::string& SkillDefinition::skill_name() const {
  // @@protoc_insertion_point(field_get:skill.SkillDefinition.skill_name)
  return _internal_skill_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkillDefinition::set_skill_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skill_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:skill.SkillDefinition.skill_name)
}
inline std::string* SkillDefinition::mutable_skill_name() {
  std::string* _s = _internal_mutable_skill_name();
  // @@protoc_insertion_point(field_mutable:skill.SkillDefinition.skill_name)
  return _s;
}
inline const std::string& SkillDefinition::_internal_skill_name() const {
  return _impl_.skill_name_.Get();
}
inline void SkillDefinition::_internal_set_skill_name(const std::string& value) {
  
  _impl_.skill_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SkillDefinition::_internal_mutable_skill_name() {
  
  return _impl_.skill_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SkillDefinition::release_skill_name() {
  // @@protoc_insertion_point(field_release:skill.SkillDefinition.skill_name)
  return _impl_.skill_name_.Release();
}
inline void SkillDefinition::set_allocated_skill_name(std::string* skill_name) {
  if (skill_name != nullptr) {
    
  } else {
    
  }
  _impl_.skill_name_.SetAllocated(skill_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skill_name_.IsDefault()) {
    _impl_.skill_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:skill.SkillDefinition.skill_name)
}

// .skill.SkillType skill_type = 3;
inline void SkillDefinition::clear_skill_type() {
  _impl_.skill_type_ = 0;
}
inline ::skill::SkillType SkillDefinition::_internal_skill_type() const {
  return static_cast< ::skill::SkillType >(_impl_.skill_type_);
}
inline ::skill::SkillType SkillDefinition::skill_type() const {
  // @@protoc_insertion_point(field_get:skill.SkillDefinition.skill_type)
  return _internal_skill_type();
}
inline void SkillDefinition::_internal_set_skill_type(::skill::SkillType value) {
  
  _impl_.skill_type_ = value;
}
inline void SkillDefinition::set_skill_type(::skill::SkillType value) {
  _internal_set_skill_type(value);
  // @@protoc_insertion_point(field_set:skill.SkillDefinition.skill_type)
}

// int32 base_damage = 4;
inline void SkillDefinition::clear_base_damage() {
  _impl_.base_damage_ = 0;
}
inline int32_t SkillDefinition::_internal_base_damage() const {
  return _impl_.base_damage_;
}
inline int32_t SkillDefinition::base_damage() const {
  // @@protoc_insertion_point(field_get:skill.SkillDefinition.base_damage)
  return _internal_base_damage();
}
inline void SkillDefinition::_internal_set_base_damage(int32_t value) {
  
  _impl_.base_damage_ = value;
}
inline void SkillDefinition::set_base_damage(int32_t value) {
  _internal_set_base_damage(value);
  // @@protoc_insertion_point(field_set:skill.SkillDefinition.base_damage)
}

// float cast_time = 5;
inline void SkillDefinition::clear_cast_time() {
  _impl_.cast_time_ = 0;
}
inline float SkillDefinition::_internal_cast_time() const {
  return _impl_.cast_time_;
}
inline float SkillDefinition::cast_time() const {
  // @@protoc_insertion_point(field_get:skill.SkillDefinition.cast_time)
  return _internal_cast_time();
}
inline void SkillDefinition::_internal_set_cast_time(float value) {
  
  _impl_.cast_time_ = value;
}
inline void SkillDefinition::set_cast_time(float value) {
  _internal_set_cast_time(value);
  // @@protoc_insertion_point(field_set:skill.SkillDefinition.cast_time)
}

// float cool_down = 6;
inline void SkillDefinition::clear_cool_down() {
  _impl_.cool_down_ = 0;
}
inline float SkillDefinition::_internal_cool_down() const {
  return _impl_.cool_down_;
}
inline float SkillDefinition::cool_down() const {
  // @@protoc_insertion_point(field_get:skill.SkillDefinition.cool_down)
  return _internal_cool_down();
}
inline void SkillDefinition::_internal_set_cool_down(float value) {
  
  _impl_.cool_down_ = value;
}
inline void SkillDefinition::set_cool_down(float value) {
  _internal_set_cool_down(value);
  // @@protoc_insertion_point(field_set:skill.SkillDefinition.cool_down)
}

// float duration = 7;
inline void SkillDefinition::clear_duration() {
  _impl_.duration_ = 0;
}
inline float SkillDefinition::_internal_duration() const {
  return _impl_.duration_;
}
inline float SkillDefinition::duration() const {
  // @@protoc_insertion_point(field_get:skill.SkillDefinition.duration)
  return _internal_duration();
}
inline void SkillDefinition::_internal_set_duration(float value) {
  
  _impl_.duration_ = value;
}
inline void SkillDefinition::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:skill.SkillDefinition.duration)
}

// int32 mana_cost = 8;
inline void SkillDefinition::clear_mana_cost() {
  _impl_.mana_cost_ = 0;
}
inline int32_t SkillDefinition::_internal_mana_cost() const {
  return _impl_.mana_cost_;
}
inline int32_t SkillDefinition::mana_cost() const {
  // @@protoc_insertion_point(field_get:skill.SkillDefinition.mana_cost)
  return _internal_mana_cost();
}
inline void SkillDefinition::_internal_set_mana_cost(int32_t value) {
  
  _impl_.mana_cost_ = value;
}
inline void SkillDefinition::set_mana_cost(int32_t value) {
  _internal_set_mana_cost(value);
  // @@protoc_insertion_point(field_set:skill.SkillDefinition.mana_cost)
}

// repeated .skill.EffectType effects = 9;
inline int SkillDefinition::_internal_effects_size() const {
  return _impl_.effects_.size();
}
inline int SkillDefinition::effects_size() const {
  return _internal_effects_size();
}
inline void SkillDefinition::clear_effects() {
  _impl_.effects_.Clear();
}
inline ::skill::EffectType SkillDefinition::_internal_effects(int index) const {
  return static_cast< ::skill::EffectType >(_impl_.effects_.Get(index));
}
inline ::skill::EffectType SkillDefinition::effects(int index) const {
  // @@protoc_insertion_point(field_get:skill.SkillDefinition.effects)
  return _internal_effects(index);
}
inline void SkillDefinition::set_effects(int index, ::skill::EffectType value) {
  _impl_.effects_.Set(index, value);
  // @@protoc_insertion_point(field_set:skill.SkillDefinition.effects)
}
inline void SkillDefinition::_internal_add_effects(::skill::EffectType value) {
  _impl_.effects_.Add(value);
}
inline void SkillDefinition::add_effects(::skill::EffectType value) {
  _internal_add_effects(value);
  // @@protoc_insertion_point(field_add:skill.SkillDefinition.effects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SkillDefinition::effects() const {
  // @@protoc_insertion_point(field_list:skill.SkillDefinition.effects)
  return _impl_.effects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SkillDefinition::_internal_mutable_effects() {
  return &_impl_.effects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SkillDefinition::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:skill.SkillDefinition.effects)
  return _internal_mutable_effects();
}

// .common.ElementType element_type = 10;
inline void SkillDefinition::clear_element_type() {
  _impl_.element_type_ = 0;
}
inline ::common::ElementType SkillDefinition::_internal_element_type() const {
  return static_cast< ::common::ElementType >(_impl_.element_type_);
}
inline ::common::ElementType SkillDefinition::element_type() const {
  // @@protoc_insertion_point(field_get:skill.SkillDefinition.element_type)
  return _internal_element_type();
}
inline void SkillDefinition::_internal_set_element_type(::common::ElementType value) {
  
  _impl_.element_type_ = value;
}
inline void SkillDefinition::set_element_type(::common::ElementType value) {
  _internal_set_element_type(value);
  // @@protoc_insertion_point(field_set:skill.SkillDefinition.element_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace skill

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::skill::SkillType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::skill::SkillType>() {
  return ::skill::SkillType_descriptor();
}
template <> struct is_proto_enum< ::skill::EffectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::skill::EffectType>() {
  return ::skill::EffectType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skill_2eproto
