// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enemy.proto

#include "enemy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace enemy {
PROTOBUF_CONSTEXPR MonsterBase::MonsterBase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monster_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.current_hp_)*/0
  , /*decltype(_impl_.max_hp_)*/0
  , /*decltype(_impl_.attack_power_)*/0
  , /*decltype(_impl_.attack_speed_)*/0
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_.pos_x_)*/0
  , /*decltype(_impl_.pos_y_)*/0
  , /*decltype(_impl_.pos_z_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.attack_range_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.exp_reward_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MonsterBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonsterBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonsterBaseDefaultTypeInternal() {}
  union {
    MonsterBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonsterBaseDefaultTypeInternal _MonsterBase_default_instance_;
PROTOBUF_CONSTEXPR MoveRequest::MoveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monster_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_x_)*/0
  , /*decltype(_impl_.target_y_)*/0
  , /*decltype(_impl_.speed_multiplier_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveRequestDefaultTypeInternal() {}
  union {
    MoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
}  // namespace enemy
static ::_pb::Metadata file_level_metadata_enemy_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_enemy_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_enemy_2eproto = nullptr;

const uint32_t TableStruct_enemy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.monster_id_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.current_hp_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.max_hp_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.attack_power_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.attack_speed_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.move_speed_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.pos_x_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.pos_y_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.pos_z_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.attack_range_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::enemy::MonsterBase, _impl_.exp_reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::enemy::MoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::enemy::MoveRequest, _impl_.monster_id_),
  PROTOBUF_FIELD_OFFSET(::enemy::MoveRequest, _impl_.target_x_),
  PROTOBUF_FIELD_OFFSET(::enemy::MoveRequest, _impl_.target_y_),
  PROTOBUF_FIELD_OFFSET(::enemy::MoveRequest, _impl_.speed_multiplier_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::enemy::MonsterBase)},
  { 20, -1, -1, sizeof(::enemy::MoveRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::enemy::_MonsterBase_default_instance_._instance,
  &::enemy::_MoveRequest_default_instance_._instance,
};

const char descriptor_table_protodef_enemy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013enemy.proto\022\005enemy\032\014common.proto\"\267\002\n\013M"
  "onsterBase\022\022\n\nmonster_id\030\001 \001(\t\022!\n\004type\030\002"
  " \001(\0162\023.common.MonsterType\022\022\n\ncurrent_hp\030"
  "\003 \001(\005\022\016\n\006max_hp\030\004 \001(\005\022\024\n\014attack_power\030\005 "
  "\001(\005\022\024\n\014attack_speed\030\006 \001(\002\022\022\n\nmove_speed\030"
  "\007 \001(\002\022\r\n\005pos_x\030\010 \001(\002\022\r\n\005pos_y\030\t \001(\002\022\r\n\005p"
  "os_z\030\n \001(\002\022\021\n\tdirection\030\013 \001(\002\022\024\n\014attack_"
  "range\030\014 \001(\002\022#\n\005state\030\r \001(\0162\024.common.Mons"
  "terState\022\022\n\nexp_reward\030\016 \001(\005\"_\n\013MoveRequ"
  "est\022\022\n\nmonster_id\030\001 \001(\t\022\020\n\010target_x\030\002 \001("
  "\002\022\020\n\010target_y\030\003 \001(\002\022\030\n\020speed_multiplier\030"
  "\004 \001(\002b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_enemy_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_enemy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_enemy_2eproto = {
    false, false, 453, descriptor_table_protodef_enemy_2eproto,
    "enemy.proto",
    &descriptor_table_enemy_2eproto_once, descriptor_table_enemy_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_enemy_2eproto::offsets,
    file_level_metadata_enemy_2eproto, file_level_enum_descriptors_enemy_2eproto,
    file_level_service_descriptors_enemy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_enemy_2eproto_getter() {
  return &descriptor_table_enemy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_enemy_2eproto(&descriptor_table_enemy_2eproto);
namespace enemy {

// ===================================================================

class MonsterBase::_Internal {
 public:
};

MonsterBase::MonsterBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:enemy.MonsterBase)
}
MonsterBase::MonsterBase(const MonsterBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MonsterBase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monster_id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.current_hp_){}
    , decltype(_impl_.max_hp_){}
    , decltype(_impl_.attack_power_){}
    , decltype(_impl_.attack_speed_){}
    , decltype(_impl_.move_speed_){}
    , decltype(_impl_.pos_x_){}
    , decltype(_impl_.pos_y_){}
    , decltype(_impl_.pos_z_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.attack_range_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.exp_reward_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.monster_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.monster_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_monster_id().empty()) {
    _this->_impl_.monster_id_.Set(from._internal_monster_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exp_reward_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.exp_reward_));
  // @@protoc_insertion_point(copy_constructor:enemy.MonsterBase)
}

inline void MonsterBase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monster_id_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.current_hp_){0}
    , decltype(_impl_.max_hp_){0}
    , decltype(_impl_.attack_power_){0}
    , decltype(_impl_.attack_speed_){0}
    , decltype(_impl_.move_speed_){0}
    , decltype(_impl_.pos_x_){0}
    , decltype(_impl_.pos_y_){0}
    , decltype(_impl_.pos_z_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.attack_range_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.exp_reward_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.monster_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.monster_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MonsterBase::~MonsterBase() {
  // @@protoc_insertion_point(destructor:enemy.MonsterBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonsterBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.monster_id_.Destroy();
}

void MonsterBase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonsterBase::Clear() {
// @@protoc_insertion_point(message_clear_start:enemy.MonsterBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.monster_id_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exp_reward_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.exp_reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonsterBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string monster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_monster_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "enemy.MonsterBase.monster_id"));
        } else
          goto handle_unusual;
        continue;
      // .common.MonsterType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::common::MonsterType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 current_hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.current_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_hp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attack_power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.attack_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float attack_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float move_speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pos_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pos_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pos_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float direction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attack_range = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.attack_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .common.MonsterState state = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::common::MonsterState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 exp_reward = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.exp_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonsterBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enemy.MonsterBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string monster_id = 1;
  if (!this->_internal_monster_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_monster_id().data(), static_cast<int>(this->_internal_monster_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "enemy.MonsterBase.monster_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_monster_id(), target);
  }

  // .common.MonsterType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 current_hp = 3;
  if (this->_internal_current_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_current_hp(), target);
  }

  // int32 max_hp = 4;
  if (this->_internal_max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_hp(), target);
  }

  // int32 attack_power = 5;
  if (this->_internal_attack_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_attack_power(), target);
  }

  // float attack_speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_speed = this->_internal_attack_speed();
  uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_attack_speed(), target);
  }

  // float move_speed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_move_speed(), target);
  }

  // float pos_x = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_pos_x(), target);
  }

  // float pos_y = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_pos_y(), target);
  }

  // float pos_z = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_z = this->_internal_pos_z();
  uint32_t raw_pos_z;
  memcpy(&raw_pos_z, &tmp_pos_z, sizeof(tmp_pos_z));
  if (raw_pos_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_pos_z(), target);
  }

  // float direction = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_direction(), target);
  }

  // float attack_range = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_range = this->_internal_attack_range();
  uint32_t raw_attack_range;
  memcpy(&raw_attack_range, &tmp_attack_range, sizeof(tmp_attack_range));
  if (raw_attack_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_attack_range(), target);
  }

  // .common.MonsterState state = 13;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_state(), target);
  }

  // int32 exp_reward = 14;
  if (this->_internal_exp_reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_exp_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enemy.MonsterBase)
  return target;
}

size_t MonsterBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enemy.MonsterBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string monster_id = 1;
  if (!this->_internal_monster_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_monster_id());
  }

  // .common.MonsterType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 current_hp = 3;
  if (this->_internal_current_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_hp());
  }

  // int32 max_hp = 4;
  if (this->_internal_max_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_hp());
  }

  // int32 attack_power = 5;
  if (this->_internal_attack_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attack_power());
  }

  // float attack_speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_speed = this->_internal_attack_speed();
  uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    total_size += 1 + 4;
  }

  // float move_speed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    total_size += 1 + 4;
  }

  // float pos_x = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    total_size += 1 + 4;
  }

  // float pos_z = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_z = this->_internal_pos_z();
  uint32_t raw_pos_z;
  memcpy(&raw_pos_z, &tmp_pos_z, sizeof(tmp_pos_z));
  if (raw_pos_z != 0) {
    total_size += 1 + 4;
  }

  // float direction = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    total_size += 1 + 4;
  }

  // float attack_range = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_range = this->_internal_attack_range();
  uint32_t raw_attack_range;
  memcpy(&raw_attack_range, &tmp_attack_range, sizeof(tmp_attack_range));
  if (raw_attack_range != 0) {
    total_size += 1 + 4;
  }

  // .common.MonsterState state = 13;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 exp_reward = 14;
  if (this->_internal_exp_reward() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp_reward());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonsterBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MonsterBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonsterBase::GetClassData() const { return &_class_data_; }


void MonsterBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MonsterBase*>(&to_msg);
  auto& from = static_cast<const MonsterBase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:enemy.MonsterBase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_monster_id().empty()) {
    _this->_internal_set_monster_id(from._internal_monster_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_current_hp() != 0) {
    _this->_internal_set_current_hp(from._internal_current_hp());
  }
  if (from._internal_max_hp() != 0) {
    _this->_internal_set_max_hp(from._internal_max_hp());
  }
  if (from._internal_attack_power() != 0) {
    _this->_internal_set_attack_power(from._internal_attack_power());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_speed = from._internal_attack_speed();
  uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    _this->_internal_set_attack_speed(from._internal_attack_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = from._internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    _this->_internal_set_move_speed(from._internal_move_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = from._internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    _this->_internal_set_pos_x(from._internal_pos_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = from._internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    _this->_internal_set_pos_y(from._internal_pos_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_z = from._internal_pos_z();
  uint32_t raw_pos_z;
  memcpy(&raw_pos_z, &tmp_pos_z, sizeof(tmp_pos_z));
  if (raw_pos_z != 0) {
    _this->_internal_set_pos_z(from._internal_pos_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = from._internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_range = from._internal_attack_range();
  uint32_t raw_attack_range;
  memcpy(&raw_attack_range, &tmp_attack_range, sizeof(tmp_attack_range));
  if (raw_attack_range != 0) {
    _this->_internal_set_attack_range(from._internal_attack_range());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_exp_reward() != 0) {
    _this->_internal_set_exp_reward(from._internal_exp_reward());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonsterBase::CopyFrom(const MonsterBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enemy.MonsterBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterBase::IsInitialized() const {
  return true;
}

void MonsterBase::InternalSwap(MonsterBase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.monster_id_, lhs_arena,
      &other->_impl_.monster_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonsterBase, _impl_.exp_reward_)
      + sizeof(MonsterBase::_impl_.exp_reward_)
      - PROTOBUF_FIELD_OFFSET(MonsterBase, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_enemy_2eproto_getter, &descriptor_table_enemy_2eproto_once,
      file_level_metadata_enemy_2eproto[0]);
}

// ===================================================================

class MoveRequest::_Internal {
 public:
};

MoveRequest::MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:enemy.MoveRequest)
}
MoveRequest::MoveRequest(const MoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monster_id_){}
    , decltype(_impl_.target_x_){}
    , decltype(_impl_.target_y_){}
    , decltype(_impl_.speed_multiplier_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.monster_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.monster_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_monster_id().empty()) {
    _this->_impl_.monster_id_.Set(from._internal_monster_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.target_x_, &from._impl_.target_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_multiplier_) -
    reinterpret_cast<char*>(&_impl_.target_x_)) + sizeof(_impl_.speed_multiplier_));
  // @@protoc_insertion_point(copy_constructor:enemy.MoveRequest)
}

inline void MoveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monster_id_){}
    , decltype(_impl_.target_x_){0}
    , decltype(_impl_.target_y_){0}
    , decltype(_impl_.speed_multiplier_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.monster_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.monster_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:enemy.MoveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.monster_id_.Destroy();
}

void MoveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enemy.MoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.monster_id_.ClearToEmpty();
  ::memset(&_impl_.target_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.speed_multiplier_) -
      reinterpret_cast<char*>(&_impl_.target_x_)) + sizeof(_impl_.speed_multiplier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string monster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_monster_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "enemy.MoveRequest.monster_id"));
        } else
          goto handle_unusual;
        continue;
      // float target_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.target_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float target_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.target_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float speed_multiplier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.speed_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enemy.MoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string monster_id = 1;
  if (!this->_internal_monster_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_monster_id().data(), static_cast<int>(this->_internal_monster_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "enemy.MoveRequest.monster_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_monster_id(), target);
  }

  // float target_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = this->_internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_target_x(), target);
  }

  // float target_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = this->_internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_target_y(), target);
  }

  // float speed_multiplier = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_multiplier = this->_internal_speed_multiplier();
  uint32_t raw_speed_multiplier;
  memcpy(&raw_speed_multiplier, &tmp_speed_multiplier, sizeof(tmp_speed_multiplier));
  if (raw_speed_multiplier != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_speed_multiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enemy.MoveRequest)
  return target;
}

size_t MoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enemy.MoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string monster_id = 1;
  if (!this->_internal_monster_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_monster_id());
  }

  // float target_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = this->_internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    total_size += 1 + 4;
  }

  // float target_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = this->_internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    total_size += 1 + 4;
  }

  // float speed_multiplier = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_multiplier = this->_internal_speed_multiplier();
  uint32_t raw_speed_multiplier;
  memcpy(&raw_speed_multiplier, &tmp_speed_multiplier, sizeof(tmp_speed_multiplier));
  if (raw_speed_multiplier != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveRequest::GetClassData() const { return &_class_data_; }


void MoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveRequest*>(&to_msg);
  auto& from = static_cast<const MoveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:enemy.MoveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_monster_id().empty()) {
    _this->_internal_set_monster_id(from._internal_monster_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = from._internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    _this->_internal_set_target_x(from._internal_target_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = from._internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    _this->_internal_set_target_y(from._internal_target_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_multiplier = from._internal_speed_multiplier();
  uint32_t raw_speed_multiplier;
  memcpy(&raw_speed_multiplier, &tmp_speed_multiplier, sizeof(tmp_speed_multiplier));
  if (raw_speed_multiplier != 0) {
    _this->_internal_set_speed_multiplier(from._internal_speed_multiplier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enemy.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  return true;
}

void MoveRequest::InternalSwap(MoveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.monster_id_, lhs_arena,
      &other->_impl_.monster_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRequest, _impl_.speed_multiplier_)
      + sizeof(MoveRequest::_impl_.speed_multiplier_)
      - PROTOBUF_FIELD_OFFSET(MoveRequest, _impl_.target_x_)>(
          reinterpret_cast<char*>(&_impl_.target_x_),
          reinterpret_cast<char*>(&other->_impl_.target_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_enemy_2eproto_getter, &descriptor_table_enemy_2eproto_once,
      file_level_metadata_enemy_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace enemy
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::enemy::MonsterBase*
Arena::CreateMaybeMessage< ::enemy::MonsterBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enemy::MonsterBase >(arena);
}
template<> PROTOBUF_NOINLINE ::enemy::MoveRequest*
Arena::CreateMaybeMessage< ::enemy::MoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enemy::MoveRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
