// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: broadcast.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_broadcast_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_broadcast_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "combat.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_broadcast_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_broadcast_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_broadcast_2eproto;
namespace broadcast {
class CharacterMoveNotify;
struct CharacterMoveNotifyDefaultTypeInternal;
extern CharacterMoveNotifyDefaultTypeInternal _CharacterMoveNotify_default_instance_;
class CharacterStatusUpdate;
struct CharacterStatusUpdateDefaultTypeInternal;
extern CharacterStatusUpdateDefaultTypeInternal _CharacterStatusUpdate_default_instance_;
class EntityAttackNotify;
struct EntityAttackNotifyDefaultTypeInternal;
extern EntityAttackNotifyDefaultTypeInternal _EntityAttackNotify_default_instance_;
class EntityHitNotify;
struct EntityHitNotifyDefaultTypeInternal;
extern EntityHitNotifyDefaultTypeInternal _EntityHitNotify_default_instance_;
class MonsterMoveNotify;
struct MonsterMoveNotifyDefaultTypeInternal;
extern MonsterMoveNotifyDefaultTypeInternal _MonsterMoveNotify_default_instance_;
class MonsterStatusUpdate;
struct MonsterStatusUpdateDefaultTypeInternal;
extern MonsterStatusUpdateDefaultTypeInternal _MonsterStatusUpdate_default_instance_;
class PlayerConfirmStageResponse;
struct PlayerConfirmStageResponseDefaultTypeInternal;
extern PlayerConfirmStageResponseDefaultTypeInternal _PlayerConfirmStageResponse_default_instance_;
class PlayerOfflineNotify;
struct PlayerOfflineNotifyDefaultTypeInternal;
extern PlayerOfflineNotifyDefaultTypeInternal _PlayerOfflineNotify_default_instance_;
class PlayerOnlineNotify;
struct PlayerOnlineNotifyDefaultTypeInternal;
extern PlayerOnlineNotifyDefaultTypeInternal _PlayerOnlineNotify_default_instance_;
class PlayerSelectStageRequest;
struct PlayerSelectStageRequestDefaultTypeInternal;
extern PlayerSelectStageRequestDefaultTypeInternal _PlayerSelectStageRequest_default_instance_;
class SkillCastNotify;
struct SkillCastNotifyDefaultTypeInternal;
extern SkillCastNotifyDefaultTypeInternal _SkillCastNotify_default_instance_;
class StageSelectRequestNotify;
struct StageSelectRequestNotifyDefaultTypeInternal;
extern StageSelectRequestNotifyDefaultTypeInternal _StageSelectRequestNotify_default_instance_;
class StageSelectResultNotify;
struct StageSelectResultNotifyDefaultTypeInternal;
extern StageSelectResultNotifyDefaultTypeInternal _StageSelectResultNotify_default_instance_;
}  // namespace broadcast
PROTOBUF_NAMESPACE_OPEN
template<> ::broadcast::CharacterMoveNotify* Arena::CreateMaybeMessage<::broadcast::CharacterMoveNotify>(Arena*);
template<> ::broadcast::CharacterStatusUpdate* Arena::CreateMaybeMessage<::broadcast::CharacterStatusUpdate>(Arena*);
template<> ::broadcast::EntityAttackNotify* Arena::CreateMaybeMessage<::broadcast::EntityAttackNotify>(Arena*);
template<> ::broadcast::EntityHitNotify* Arena::CreateMaybeMessage<::broadcast::EntityHitNotify>(Arena*);
template<> ::broadcast::MonsterMoveNotify* Arena::CreateMaybeMessage<::broadcast::MonsterMoveNotify>(Arena*);
template<> ::broadcast::MonsterStatusUpdate* Arena::CreateMaybeMessage<::broadcast::MonsterStatusUpdate>(Arena*);
template<> ::broadcast::PlayerConfirmStageResponse* Arena::CreateMaybeMessage<::broadcast::PlayerConfirmStageResponse>(Arena*);
template<> ::broadcast::PlayerOfflineNotify* Arena::CreateMaybeMessage<::broadcast::PlayerOfflineNotify>(Arena*);
template<> ::broadcast::PlayerOnlineNotify* Arena::CreateMaybeMessage<::broadcast::PlayerOnlineNotify>(Arena*);
template<> ::broadcast::PlayerSelectStageRequest* Arena::CreateMaybeMessage<::broadcast::PlayerSelectStageRequest>(Arena*);
template<> ::broadcast::SkillCastNotify* Arena::CreateMaybeMessage<::broadcast::SkillCastNotify>(Arena*);
template<> ::broadcast::StageSelectRequestNotify* Arena::CreateMaybeMessage<::broadcast::StageSelectRequestNotify>(Arena*);
template<> ::broadcast::StageSelectResultNotify* Arena::CreateMaybeMessage<::broadcast::StageSelectResultNotify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace broadcast {

// ===================================================================

class PlayerOnlineNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.PlayerOnlineNotify) */ {
 public:
  inline PlayerOnlineNotify() : PlayerOnlineNotify(nullptr) {}
  ~PlayerOnlineNotify() override;
  explicit PROTOBUF_CONSTEXPR PlayerOnlineNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerOnlineNotify(const PlayerOnlineNotify& from);
  PlayerOnlineNotify(PlayerOnlineNotify&& from) noexcept
    : PlayerOnlineNotify() {
    *this = ::std::move(from);
  }

  inline PlayerOnlineNotify& operator=(const PlayerOnlineNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerOnlineNotify& operator=(PlayerOnlineNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerOnlineNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerOnlineNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerOnlineNotify*>(
               &_PlayerOnlineNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerOnlineNotify& a, PlayerOnlineNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerOnlineNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerOnlineNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerOnlineNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerOnlineNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerOnlineNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerOnlineNotify& from) {
    PlayerOnlineNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerOnlineNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.PlayerOnlineNotify";
  }
  protected:
  explicit PlayerOnlineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPlayerNameFieldNumber = 2,
    kPosXFieldNumber = 3,
    kPosYFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // string player_name = 2;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // float pos_x = 3;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 4;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // .common.Status status = 5;
  void clear_status();
  ::common::Status status() const;
  void set_status(::common::Status value);
  private:
  ::common::Status _internal_status() const;
  void _internal_set_status(::common::Status value);
  public:

  // @@protoc_insertion_point(class_scope:broadcast.PlayerOnlineNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    float pos_x_;
    float pos_y_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class PlayerOfflineNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.PlayerOfflineNotify) */ {
 public:
  inline PlayerOfflineNotify() : PlayerOfflineNotify(nullptr) {}
  ~PlayerOfflineNotify() override;
  explicit PROTOBUF_CONSTEXPR PlayerOfflineNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerOfflineNotify(const PlayerOfflineNotify& from);
  PlayerOfflineNotify(PlayerOfflineNotify&& from) noexcept
    : PlayerOfflineNotify() {
    *this = ::std::move(from);
  }

  inline PlayerOfflineNotify& operator=(const PlayerOfflineNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerOfflineNotify& operator=(PlayerOfflineNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerOfflineNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerOfflineNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerOfflineNotify*>(
               &_PlayerOfflineNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerOfflineNotify& a, PlayerOfflineNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerOfflineNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerOfflineNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerOfflineNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerOfflineNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerOfflineNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerOfflineNotify& from) {
    PlayerOfflineNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerOfflineNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.PlayerOfflineNotify";
  }
  protected:
  explicit PlayerOfflineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // @@protoc_insertion_point(class_scope:broadcast.PlayerOfflineNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class PlayerSelectStageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.PlayerSelectStageRequest) */ {
 public:
  inline PlayerSelectStageRequest() : PlayerSelectStageRequest(nullptr) {}
  ~PlayerSelectStageRequest() override;
  explicit PROTOBUF_CONSTEXPR PlayerSelectStageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerSelectStageRequest(const PlayerSelectStageRequest& from);
  PlayerSelectStageRequest(PlayerSelectStageRequest&& from) noexcept
    : PlayerSelectStageRequest() {
    *this = ::std::move(from);
  }

  inline PlayerSelectStageRequest& operator=(const PlayerSelectStageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSelectStageRequest& operator=(PlayerSelectStageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerSelectStageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerSelectStageRequest* internal_default_instance() {
    return reinterpret_cast<const PlayerSelectStageRequest*>(
               &_PlayerSelectStageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerSelectStageRequest& a, PlayerSelectStageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSelectStageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerSelectStageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerSelectStageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerSelectStageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerSelectStageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerSelectStageRequest& from) {
    PlayerSelectStageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSelectStageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.PlayerSelectStageRequest";
  }
  protected:
  explicit PlayerSelectStageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kStageIdFieldNumber = 2,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // string stage_id = 2;
  void clear_stage_id();
  const std::string& stage_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stage_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stage_id();
  PROTOBUF_NODISCARD std::string* release_stage_id();
  void set_allocated_stage_id(std::string* stage_id);
  private:
  const std::string& _internal_stage_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stage_id(const std::string& value);
  std::string* _internal_mutable_stage_id();
  public:

  // @@protoc_insertion_point(class_scope:broadcast.PlayerSelectStageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class StageSelectRequestNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.StageSelectRequestNotify) */ {
 public:
  inline StageSelectRequestNotify() : StageSelectRequestNotify(nullptr) {}
  ~StageSelectRequestNotify() override;
  explicit PROTOBUF_CONSTEXPR StageSelectRequestNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StageSelectRequestNotify(const StageSelectRequestNotify& from);
  StageSelectRequestNotify(StageSelectRequestNotify&& from) noexcept
    : StageSelectRequestNotify() {
    *this = ::std::move(from);
  }

  inline StageSelectRequestNotify& operator=(const StageSelectRequestNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline StageSelectRequestNotify& operator=(StageSelectRequestNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StageSelectRequestNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const StageSelectRequestNotify* internal_default_instance() {
    return reinterpret_cast<const StageSelectRequestNotify*>(
               &_StageSelectRequestNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StageSelectRequestNotify& a, StageSelectRequestNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(StageSelectRequestNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StageSelectRequestNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StageSelectRequestNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StageSelectRequestNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StageSelectRequestNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StageSelectRequestNotify& from) {
    StageSelectRequestNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StageSelectRequestNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.StageSelectRequestNotify";
  }
  protected:
  explicit StageSelectRequestNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kStageIdFieldNumber = 2,
    kStageNameFieldNumber = 3,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // string stage_id = 2;
  void clear_stage_id();
  const std::string& stage_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stage_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stage_id();
  PROTOBUF_NODISCARD std::string* release_stage_id();
  void set_allocated_stage_id(std::string* stage_id);
  private:
  const std::string& _internal_stage_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stage_id(const std::string& value);
  std::string* _internal_mutable_stage_id();
  public:

  // string stage_name = 3;
  void clear_stage_name();
  const std::string& stage_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stage_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stage_name();
  PROTOBUF_NODISCARD std::string* release_stage_name();
  void set_allocated_stage_name(std::string* stage_name);
  private:
  const std::string& _internal_stage_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stage_name(const std::string& value);
  std::string* _internal_mutable_stage_name();
  public:

  // @@protoc_insertion_point(class_scope:broadcast.StageSelectRequestNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class PlayerConfirmStageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.PlayerConfirmStageResponse) */ {
 public:
  inline PlayerConfirmStageResponse() : PlayerConfirmStageResponse(nullptr) {}
  ~PlayerConfirmStageResponse() override;
  explicit PROTOBUF_CONSTEXPR PlayerConfirmStageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerConfirmStageResponse(const PlayerConfirmStageResponse& from);
  PlayerConfirmStageResponse(PlayerConfirmStageResponse&& from) noexcept
    : PlayerConfirmStageResponse() {
    *this = ::std::move(from);
  }

  inline PlayerConfirmStageResponse& operator=(const PlayerConfirmStageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerConfirmStageResponse& operator=(PlayerConfirmStageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerConfirmStageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerConfirmStageResponse* internal_default_instance() {
    return reinterpret_cast<const PlayerConfirmStageResponse*>(
               &_PlayerConfirmStageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerConfirmStageResponse& a, PlayerConfirmStageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerConfirmStageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerConfirmStageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerConfirmStageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerConfirmStageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerConfirmStageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerConfirmStageResponse& from) {
    PlayerConfirmStageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerConfirmStageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.PlayerConfirmStageResponse";
  }
  protected:
  explicit PlayerConfirmStageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kStageIdFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // string stage_id = 2;
  void clear_stage_id();
  const std::string& stage_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stage_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stage_id();
  PROTOBUF_NODISCARD std::string* release_stage_id();
  void set_allocated_stage_id(std::string* stage_id);
  private:
  const std::string& _internal_stage_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stage_id(const std::string& value);
  std::string* _internal_mutable_stage_id();
  public:

  // .common.StageSelectState state = 3;
  void clear_state();
  ::common::StageSelectState state() const;
  void set_state(::common::StageSelectState value);
  private:
  ::common::StageSelectState _internal_state() const;
  void _internal_set_state(::common::StageSelectState value);
  public:

  // @@protoc_insertion_point(class_scope:broadcast.PlayerConfirmStageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage_id_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class StageSelectResultNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.StageSelectResultNotify) */ {
 public:
  inline StageSelectResultNotify() : StageSelectResultNotify(nullptr) {}
  ~StageSelectResultNotify() override;
  explicit PROTOBUF_CONSTEXPR StageSelectResultNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StageSelectResultNotify(const StageSelectResultNotify& from);
  StageSelectResultNotify(StageSelectResultNotify&& from) noexcept
    : StageSelectResultNotify() {
    *this = ::std::move(from);
  }

  inline StageSelectResultNotify& operator=(const StageSelectResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline StageSelectResultNotify& operator=(StageSelectResultNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StageSelectResultNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const StageSelectResultNotify* internal_default_instance() {
    return reinterpret_cast<const StageSelectResultNotify*>(
               &_StageSelectResultNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StageSelectResultNotify& a, StageSelectResultNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(StageSelectResultNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StageSelectResultNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StageSelectResultNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StageSelectResultNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StageSelectResultNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StageSelectResultNotify& from) {
    StageSelectResultNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StageSelectResultNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.StageSelectResultNotify";
  }
  protected:
  explicit StageSelectResultNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageIdFieldNumber = 1,
    kIsAllConfirmedFieldNumber = 2,
  };
  // string stage_id = 1;
  void clear_stage_id();
  const std::string& stage_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stage_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stage_id();
  PROTOBUF_NODISCARD std::string* release_stage_id();
  void set_allocated_stage_id(std::string* stage_id);
  private:
  const std::string& _internal_stage_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stage_id(const std::string& value);
  std::string* _internal_mutable_stage_id();
  public:

  // bool is_all_confirmed = 2;
  void clear_is_all_confirmed();
  bool is_all_confirmed() const;
  void set_is_all_confirmed(bool value);
  private:
  bool _internal_is_all_confirmed() const;
  void _internal_set_is_all_confirmed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:broadcast.StageSelectResultNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage_id_;
    bool is_all_confirmed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class CharacterMoveNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.CharacterMoveNotify) */ {
 public:
  inline CharacterMoveNotify() : CharacterMoveNotify(nullptr) {}
  ~CharacterMoveNotify() override;
  explicit PROTOBUF_CONSTEXPR CharacterMoveNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterMoveNotify(const CharacterMoveNotify& from);
  CharacterMoveNotify(CharacterMoveNotify&& from) noexcept
    : CharacterMoveNotify() {
    *this = ::std::move(from);
  }

  inline CharacterMoveNotify& operator=(const CharacterMoveNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterMoveNotify& operator=(CharacterMoveNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterMoveNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterMoveNotify* internal_default_instance() {
    return reinterpret_cast<const CharacterMoveNotify*>(
               &_CharacterMoveNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CharacterMoveNotify& a, CharacterMoveNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterMoveNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterMoveNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterMoveNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterMoveNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterMoveNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterMoveNotify& from) {
    CharacterMoveNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterMoveNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.CharacterMoveNotify";
  }
  protected:
  explicit CharacterMoveNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kDirectionFieldNumber = 4,
    kSpeedFieldNumber = 5,
  };
  // string entity_id = 1;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // float pos_x = 2;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 3;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float direction = 4;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // float speed = 5;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:broadcast.CharacterMoveNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    float pos_x_;
    float pos_y_;
    float direction_;
    float speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class MonsterMoveNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.MonsterMoveNotify) */ {
 public:
  inline MonsterMoveNotify() : MonsterMoveNotify(nullptr) {}
  ~MonsterMoveNotify() override;
  explicit PROTOBUF_CONSTEXPR MonsterMoveNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonsterMoveNotify(const MonsterMoveNotify& from);
  MonsterMoveNotify(MonsterMoveNotify&& from) noexcept
    : MonsterMoveNotify() {
    *this = ::std::move(from);
  }

  inline MonsterMoveNotify& operator=(const MonsterMoveNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterMoveNotify& operator=(MonsterMoveNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonsterMoveNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonsterMoveNotify* internal_default_instance() {
    return reinterpret_cast<const MonsterMoveNotify*>(
               &_MonsterMoveNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MonsterMoveNotify& a, MonsterMoveNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterMoveNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterMoveNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonsterMoveNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonsterMoveNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonsterMoveNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonsterMoveNotify& from) {
    MonsterMoveNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterMoveNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.MonsterMoveNotify";
  }
  protected:
  explicit MonsterMoveNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kDirectionFieldNumber = 4,
    kSpeedFieldNumber = 5,
  };
  // string entity_id = 1;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // float pos_x = 2;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 3;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float direction = 4;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // float speed = 5;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:broadcast.MonsterMoveNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    float pos_x_;
    float pos_y_;
    float direction_;
    float speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class CharacterStatusUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.CharacterStatusUpdate) */ {
 public:
  inline CharacterStatusUpdate() : CharacterStatusUpdate(nullptr) {}
  ~CharacterStatusUpdate() override;
  explicit PROTOBUF_CONSTEXPR CharacterStatusUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterStatusUpdate(const CharacterStatusUpdate& from);
  CharacterStatusUpdate(CharacterStatusUpdate&& from) noexcept
    : CharacterStatusUpdate() {
    *this = ::std::move(from);
  }

  inline CharacterStatusUpdate& operator=(const CharacterStatusUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterStatusUpdate& operator=(CharacterStatusUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterStatusUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterStatusUpdate* internal_default_instance() {
    return reinterpret_cast<const CharacterStatusUpdate*>(
               &_CharacterStatusUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CharacterStatusUpdate& a, CharacterStatusUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterStatusUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterStatusUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterStatusUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterStatusUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterStatusUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterStatusUpdate& from) {
    CharacterStatusUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterStatusUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.CharacterStatusUpdate";
  }
  protected:
  explicit CharacterStatusUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kNewStatusFieldNumber = 2,
    kCurrentHpFieldNumber = 3,
    kMaxHpFieldNumber = 4,
  };
  // string entity_id = 1;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // .common.Status new_status = 2;
  void clear_new_status();
  ::common::Status new_status() const;
  void set_new_status(::common::Status value);
  private:
  ::common::Status _internal_new_status() const;
  void _internal_set_new_status(::common::Status value);
  public:

  // int32 current_hp = 3;
  void clear_current_hp();
  int32_t current_hp() const;
  void set_current_hp(int32_t value);
  private:
  int32_t _internal_current_hp() const;
  void _internal_set_current_hp(int32_t value);
  public:

  // int32 max_hp = 4;
  void clear_max_hp();
  int32_t max_hp() const;
  void set_max_hp(int32_t value);
  private:
  int32_t _internal_max_hp() const;
  void _internal_set_max_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:broadcast.CharacterStatusUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    int new_status_;
    int32_t current_hp_;
    int32_t max_hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class MonsterStatusUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.MonsterStatusUpdate) */ {
 public:
  inline MonsterStatusUpdate() : MonsterStatusUpdate(nullptr) {}
  ~MonsterStatusUpdate() override;
  explicit PROTOBUF_CONSTEXPR MonsterStatusUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonsterStatusUpdate(const MonsterStatusUpdate& from);
  MonsterStatusUpdate(MonsterStatusUpdate&& from) noexcept
    : MonsterStatusUpdate() {
    *this = ::std::move(from);
  }

  inline MonsterStatusUpdate& operator=(const MonsterStatusUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterStatusUpdate& operator=(MonsterStatusUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonsterStatusUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonsterStatusUpdate* internal_default_instance() {
    return reinterpret_cast<const MonsterStatusUpdate*>(
               &_MonsterStatusUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MonsterStatusUpdate& a, MonsterStatusUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterStatusUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterStatusUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonsterStatusUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonsterStatusUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonsterStatusUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonsterStatusUpdate& from) {
    MonsterStatusUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterStatusUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.MonsterStatusUpdate";
  }
  protected:
  explicit MonsterStatusUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kNewStateFieldNumber = 2,
    kCurrentHpFieldNumber = 3,
    kMaxHpFieldNumber = 4,
  };
  // string entity_id = 1;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // .common.MonsterState new_state = 2;
  void clear_new_state();
  ::common::MonsterState new_state() const;
  void set_new_state(::common::MonsterState value);
  private:
  ::common::MonsterState _internal_new_state() const;
  void _internal_set_new_state(::common::MonsterState value);
  public:

  // int32 current_hp = 3;
  void clear_current_hp();
  int32_t current_hp() const;
  void set_current_hp(int32_t value);
  private:
  int32_t _internal_current_hp() const;
  void _internal_set_current_hp(int32_t value);
  public:

  // int32 max_hp = 4;
  void clear_max_hp();
  int32_t max_hp() const;
  void set_max_hp(int32_t value);
  private:
  int32_t _internal_max_hp() const;
  void _internal_set_max_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:broadcast.MonsterStatusUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    int new_state_;
    int32_t current_hp_;
    int32_t max_hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class SkillCastNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.SkillCastNotify) */ {
 public:
  inline SkillCastNotify() : SkillCastNotify(nullptr) {}
  ~SkillCastNotify() override;
  explicit PROTOBUF_CONSTEXPR SkillCastNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillCastNotify(const SkillCastNotify& from);
  SkillCastNotify(SkillCastNotify&& from) noexcept
    : SkillCastNotify() {
    *this = ::std::move(from);
  }

  inline SkillCastNotify& operator=(const SkillCastNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillCastNotify& operator=(SkillCastNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillCastNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillCastNotify* internal_default_instance() {
    return reinterpret_cast<const SkillCastNotify*>(
               &_SkillCastNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SkillCastNotify& a, SkillCastNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillCastNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillCastNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkillCastNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkillCastNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkillCastNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkillCastNotify& from) {
    SkillCastNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillCastNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.SkillCastNotify";
  }
  protected:
  explicit SkillCastNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kSkillIdFieldNumber = 3,
    kEntityTypeFieldNumber = 2,
    kCastTimeFieldNumber = 4,
    kAttackAngleFieldNumber = 5,
  };
  // string entity_id = 1;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // string skill_id = 3;
  void clear_skill_id();
  const std::string& skill_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skill_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skill_id();
  PROTOBUF_NODISCARD std::string* release_skill_id();
  void set_allocated_skill_id(std::string* skill_id);
  private:
  const std::string& _internal_skill_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skill_id(const std::string& value);
  std::string* _internal_mutable_skill_id();
  public:

  // .combat.EntityType entity_type = 2;
  void clear_entity_type();
  ::combat::EntityType entity_type() const;
  void set_entity_type(::combat::EntityType value);
  private:
  ::combat::EntityType _internal_entity_type() const;
  void _internal_set_entity_type(::combat::EntityType value);
  public:

  // float cast_time = 4;
  void clear_cast_time();
  float cast_time() const;
  void set_cast_time(float value);
  private:
  float _internal_cast_time() const;
  void _internal_set_cast_time(float value);
  public:

  // float attack_angle = 5;
  void clear_attack_angle();
  float attack_angle() const;
  void set_attack_angle(float value);
  private:
  float _internal_attack_angle() const;
  void _internal_set_attack_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:broadcast.SkillCastNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_id_;
    int entity_type_;
    float cast_time_;
    float attack_angle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class EntityAttackNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.EntityAttackNotify) */ {
 public:
  inline EntityAttackNotify() : EntityAttackNotify(nullptr) {}
  ~EntityAttackNotify() override;
  explicit PROTOBUF_CONSTEXPR EntityAttackNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityAttackNotify(const EntityAttackNotify& from);
  EntityAttackNotify(EntityAttackNotify&& from) noexcept
    : EntityAttackNotify() {
    *this = ::std::move(from);
  }

  inline EntityAttackNotify& operator=(const EntityAttackNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityAttackNotify& operator=(EntityAttackNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityAttackNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityAttackNotify* internal_default_instance() {
    return reinterpret_cast<const EntityAttackNotify*>(
               &_EntityAttackNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EntityAttackNotify& a, EntityAttackNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityAttackNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityAttackNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityAttackNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntityAttackNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntityAttackNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntityAttackNotify& from) {
    EntityAttackNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityAttackNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.EntityAttackNotify";
  }
  protected:
  explicit EntityAttackNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kTargetIdFieldNumber = 3,
    kSkillIdFieldNumber = 5,
    kEntityTypeFieldNumber = 2,
    kAttackAngleFieldNumber = 4,
    kCastTimeFieldNumber = 6,
  };
  // string entity_id = 1;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // string target_id = 3;
  void clear_target_id();
  const std::string& target_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_id();
  PROTOBUF_NODISCARD std::string* release_target_id();
  void set_allocated_target_id(std::string* target_id);
  private:
  const std::string& _internal_target_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_id(const std::string& value);
  std::string* _internal_mutable_target_id();
  public:

  // string skill_id = 5;
  void clear_skill_id();
  const std::string& skill_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skill_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skill_id();
  PROTOBUF_NODISCARD std::string* release_skill_id();
  void set_allocated_skill_id(std::string* skill_id);
  private:
  const std::string& _internal_skill_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skill_id(const std::string& value);
  std::string* _internal_mutable_skill_id();
  public:

  // .combat.EntityType entity_type = 2;
  void clear_entity_type();
  ::combat::EntityType entity_type() const;
  void set_entity_type(::combat::EntityType value);
  private:
  ::combat::EntityType _internal_entity_type() const;
  void _internal_set_entity_type(::combat::EntityType value);
  public:

  // float attack_angle = 4;
  void clear_attack_angle();
  float attack_angle() const;
  void set_attack_angle(float value);
  private:
  float _internal_attack_angle() const;
  void _internal_set_attack_angle(float value);
  public:

  // float cast_time = 6;
  void clear_cast_time();
  float cast_time() const;
  void set_cast_time(float value);
  private:
  float _internal_cast_time() const;
  void _internal_set_cast_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:broadcast.EntityAttackNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_id_;
    int entity_type_;
    float attack_angle_;
    float cast_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class EntityHitNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broadcast.EntityHitNotify) */ {
 public:
  inline EntityHitNotify() : EntityHitNotify(nullptr) {}
  ~EntityHitNotify() override;
  explicit PROTOBUF_CONSTEXPR EntityHitNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityHitNotify(const EntityHitNotify& from);
  EntityHitNotify(EntityHitNotify&& from) noexcept
    : EntityHitNotify() {
    *this = ::std::move(from);
  }

  inline EntityHitNotify& operator=(const EntityHitNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityHitNotify& operator=(EntityHitNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityHitNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityHitNotify* internal_default_instance() {
    return reinterpret_cast<const EntityHitNotify*>(
               &_EntityHitNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EntityHitNotify& a, EntityHitNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityHitNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityHitNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityHitNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntityHitNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntityHitNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntityHitNotify& from) {
    EntityHitNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityHitNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broadcast.EntityHitNotify";
  }
  protected:
  explicit EntityHitNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kAttackerIdFieldNumber = 3,
    kEntityTypeFieldNumber = 2,
    kDamageFieldNumber = 4,
    kNewStatusFieldNumber = 5,
    kNewMonsterStateFieldNumber = 6,
  };
  // string entity_id = 1;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // string attacker_id = 3;
  void clear_attacker_id();
  const std::string& attacker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attacker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attacker_id();
  PROTOBUF_NODISCARD std::string* release_attacker_id();
  void set_allocated_attacker_id(std::string* attacker_id);
  private:
  const std::string& _internal_attacker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attacker_id(const std::string& value);
  std::string* _internal_mutable_attacker_id();
  public:

  // .combat.EntityType entity_type = 2;
  void clear_entity_type();
  ::combat::EntityType entity_type() const;
  void set_entity_type(::combat::EntityType value);
  private:
  ::combat::EntityType _internal_entity_type() const;
  void _internal_set_entity_type(::combat::EntityType value);
  public:

  // int32 damage = 4;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // .common.Status new_status = 5;
  void clear_new_status();
  ::common::Status new_status() const;
  void set_new_status(::common::Status value);
  private:
  ::common::Status _internal_new_status() const;
  void _internal_set_new_status(::common::Status value);
  public:

  // .common.MonsterState new_monster_state = 6;
  void clear_new_monster_state();
  ::common::MonsterState new_monster_state() const;
  void set_new_monster_state(::common::MonsterState value);
  private:
  ::common::MonsterState _internal_new_monster_state() const;
  void _internal_set_new_monster_state(::common::MonsterState value);
  public:

  // @@protoc_insertion_point(class_scope:broadcast.EntityHitNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attacker_id_;
    int entity_type_;
    int32_t damage_;
    int new_status_;
    int new_monster_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_broadcast_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerOnlineNotify

// string player_id = 1;
inline void PlayerOnlineNotify::clear_player_id() {
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& PlayerOnlineNotify::player_id() const {
  // @@protoc_insertion_point(field_get:broadcast.PlayerOnlineNotify.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerOnlineNotify::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.PlayerOnlineNotify.player_id)
}
inline std::string* PlayerOnlineNotify::mutable_player_id() {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:broadcast.PlayerOnlineNotify.player_id)
  return _s;
}
inline const std::string& PlayerOnlineNotify::_internal_player_id() const {
  return _impl_.player_id_.Get();
}
inline void PlayerOnlineNotify::_internal_set_player_id(const std::string& value) {
  
  _impl_.player_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerOnlineNotify::_internal_mutable_player_id() {
  
  return _impl_.player_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerOnlineNotify::release_player_id() {
  // @@protoc_insertion_point(field_release:broadcast.PlayerOnlineNotify.player_id)
  return _impl_.player_id_.Release();
}
inline void PlayerOnlineNotify::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  _impl_.player_id_.SetAllocated(player_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_id_.IsDefault()) {
    _impl_.player_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.PlayerOnlineNotify.player_id)
}

// string player_name = 2;
inline void PlayerOnlineNotify::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& PlayerOnlineNotify::player_name() const {
  // @@protoc_insertion_point(field_get:broadcast.PlayerOnlineNotify.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerOnlineNotify::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.PlayerOnlineNotify.player_name)
}
inline std::string* PlayerOnlineNotify::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:broadcast.PlayerOnlineNotify.player_name)
  return _s;
}
inline const std::string& PlayerOnlineNotify::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void PlayerOnlineNotify::_internal_set_player_name(const std::string& value) {
  
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerOnlineNotify::_internal_mutable_player_name() {
  
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerOnlineNotify::release_player_name() {
  // @@protoc_insertion_point(field_release:broadcast.PlayerOnlineNotify.player_name)
  return _impl_.player_name_.Release();
}
inline void PlayerOnlineNotify::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.PlayerOnlineNotify.player_name)
}

// float pos_x = 3;
inline void PlayerOnlineNotify::clear_pos_x() {
  _impl_.pos_x_ = 0;
}
inline float PlayerOnlineNotify::_internal_pos_x() const {
  return _impl_.pos_x_;
}
inline float PlayerOnlineNotify::pos_x() const {
  // @@protoc_insertion_point(field_get:broadcast.PlayerOnlineNotify.pos_x)
  return _internal_pos_x();
}
inline void PlayerOnlineNotify::_internal_set_pos_x(float value) {
  
  _impl_.pos_x_ = value;
}
inline void PlayerOnlineNotify::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:broadcast.PlayerOnlineNotify.pos_x)
}

// float pos_y = 4;
inline void PlayerOnlineNotify::clear_pos_y() {
  _impl_.pos_y_ = 0;
}
inline float PlayerOnlineNotify::_internal_pos_y() const {
  return _impl_.pos_y_;
}
inline float PlayerOnlineNotify::pos_y() const {
  // @@protoc_insertion_point(field_get:broadcast.PlayerOnlineNotify.pos_y)
  return _internal_pos_y();
}
inline void PlayerOnlineNotify::_internal_set_pos_y(float value) {
  
  _impl_.pos_y_ = value;
}
inline void PlayerOnlineNotify::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:broadcast.PlayerOnlineNotify.pos_y)
}

// .common.Status status = 5;
inline void PlayerOnlineNotify::clear_status() {
  _impl_.status_ = 0;
}
inline ::common::Status PlayerOnlineNotify::_internal_status() const {
  return static_cast< ::common::Status >(_impl_.status_);
}
inline ::common::Status PlayerOnlineNotify::status() const {
  // @@protoc_insertion_point(field_get:broadcast.PlayerOnlineNotify.status)
  return _internal_status();
}
inline void PlayerOnlineNotify::_internal_set_status(::common::Status value) {
  
  _impl_.status_ = value;
}
inline void PlayerOnlineNotify::set_status(::common::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:broadcast.PlayerOnlineNotify.status)
}

// -------------------------------------------------------------------

// PlayerOfflineNotify

// string player_id = 1;
inline void PlayerOfflineNotify::clear_player_id() {
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& PlayerOfflineNotify::player_id() const {
  // @@protoc_insertion_point(field_get:broadcast.PlayerOfflineNotify.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerOfflineNotify::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.PlayerOfflineNotify.player_id)
}
inline std::string* PlayerOfflineNotify::mutable_player_id() {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:broadcast.PlayerOfflineNotify.player_id)
  return _s;
}
inline const std::string& PlayerOfflineNotify::_internal_player_id() const {
  return _impl_.player_id_.Get();
}
inline void PlayerOfflineNotify::_internal_set_player_id(const std::string& value) {
  
  _impl_.player_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerOfflineNotify::_internal_mutable_player_id() {
  
  return _impl_.player_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerOfflineNotify::release_player_id() {
  // @@protoc_insertion_point(field_release:broadcast.PlayerOfflineNotify.player_id)
  return _impl_.player_id_.Release();
}
inline void PlayerOfflineNotify::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  _impl_.player_id_.SetAllocated(player_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_id_.IsDefault()) {
    _impl_.player_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.PlayerOfflineNotify.player_id)
}

// -------------------------------------------------------------------

// PlayerSelectStageRequest

// string player_id = 1;
inline void PlayerSelectStageRequest::clear_player_id() {
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& PlayerSelectStageRequest::player_id() const {
  // @@protoc_insertion_point(field_get:broadcast.PlayerSelectStageRequest.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerSelectStageRequest::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.PlayerSelectStageRequest.player_id)
}
inline std::string* PlayerSelectStageRequest::mutable_player_id() {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:broadcast.PlayerSelectStageRequest.player_id)
  return _s;
}
inline const std::string& PlayerSelectStageRequest::_internal_player_id() const {
  return _impl_.player_id_.Get();
}
inline void PlayerSelectStageRequest::_internal_set_player_id(const std::string& value) {
  
  _impl_.player_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerSelectStageRequest::_internal_mutable_player_id() {
  
  return _impl_.player_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerSelectStageRequest::release_player_id() {
  // @@protoc_insertion_point(field_release:broadcast.PlayerSelectStageRequest.player_id)
  return _impl_.player_id_.Release();
}
inline void PlayerSelectStageRequest::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  _impl_.player_id_.SetAllocated(player_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_id_.IsDefault()) {
    _impl_.player_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.PlayerSelectStageRequest.player_id)
}

// string stage_id = 2;
inline void PlayerSelectStageRequest::clear_stage_id() {
  _impl_.stage_id_.ClearToEmpty();
}
inline const std::string& PlayerSelectStageRequest::stage_id() const {
  // @@protoc_insertion_point(field_get:broadcast.PlayerSelectStageRequest.stage_id)
  return _internal_stage_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerSelectStageRequest::set_stage_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stage_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.PlayerSelectStageRequest.stage_id)
}
inline std::string* PlayerSelectStageRequest::mutable_stage_id() {
  std::string* _s = _internal_mutable_stage_id();
  // @@protoc_insertion_point(field_mutable:broadcast.PlayerSelectStageRequest.stage_id)
  return _s;
}
inline const std::string& PlayerSelectStageRequest::_internal_stage_id() const {
  return _impl_.stage_id_.Get();
}
inline void PlayerSelectStageRequest::_internal_set_stage_id(const std::string& value) {
  
  _impl_.stage_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerSelectStageRequest::_internal_mutable_stage_id() {
  
  return _impl_.stage_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerSelectStageRequest::release_stage_id() {
  // @@protoc_insertion_point(field_release:broadcast.PlayerSelectStageRequest.stage_id)
  return _impl_.stage_id_.Release();
}
inline void PlayerSelectStageRequest::set_allocated_stage_id(std::string* stage_id) {
  if (stage_id != nullptr) {
    
  } else {
    
  }
  _impl_.stage_id_.SetAllocated(stage_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stage_id_.IsDefault()) {
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.PlayerSelectStageRequest.stage_id)
}

// -------------------------------------------------------------------

// StageSelectRequestNotify

// string player_id = 1;
inline void StageSelectRequestNotify::clear_player_id() {
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& StageSelectRequestNotify::player_id() const {
  // @@protoc_insertion_point(field_get:broadcast.StageSelectRequestNotify.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StageSelectRequestNotify::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.StageSelectRequestNotify.player_id)
}
inline std::string* StageSelectRequestNotify::mutable_player_id() {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:broadcast.StageSelectRequestNotify.player_id)
  return _s;
}
inline const std::string& StageSelectRequestNotify::_internal_player_id() const {
  return _impl_.player_id_.Get();
}
inline void StageSelectRequestNotify::_internal_set_player_id(const std::string& value) {
  
  _impl_.player_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StageSelectRequestNotify::_internal_mutable_player_id() {
  
  return _impl_.player_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StageSelectRequestNotify::release_player_id() {
  // @@protoc_insertion_point(field_release:broadcast.StageSelectRequestNotify.player_id)
  return _impl_.player_id_.Release();
}
inline void StageSelectRequestNotify::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  _impl_.player_id_.SetAllocated(player_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_id_.IsDefault()) {
    _impl_.player_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.StageSelectRequestNotify.player_id)
}

// string stage_id = 2;
inline void StageSelectRequestNotify::clear_stage_id() {
  _impl_.stage_id_.ClearToEmpty();
}
inline const std::string& StageSelectRequestNotify::stage_id() const {
  // @@protoc_insertion_point(field_get:broadcast.StageSelectRequestNotify.stage_id)
  return _internal_stage_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StageSelectRequestNotify::set_stage_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stage_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.StageSelectRequestNotify.stage_id)
}
inline std::string* StageSelectRequestNotify::mutable_stage_id() {
  std::string* _s = _internal_mutable_stage_id();
  // @@protoc_insertion_point(field_mutable:broadcast.StageSelectRequestNotify.stage_id)
  return _s;
}
inline const std::string& StageSelectRequestNotify::_internal_stage_id() const {
  return _impl_.stage_id_.Get();
}
inline void StageSelectRequestNotify::_internal_set_stage_id(const std::string& value) {
  
  _impl_.stage_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StageSelectRequestNotify::_internal_mutable_stage_id() {
  
  return _impl_.stage_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StageSelectRequestNotify::release_stage_id() {
  // @@protoc_insertion_point(field_release:broadcast.StageSelectRequestNotify.stage_id)
  return _impl_.stage_id_.Release();
}
inline void StageSelectRequestNotify::set_allocated_stage_id(std::string* stage_id) {
  if (stage_id != nullptr) {
    
  } else {
    
  }
  _impl_.stage_id_.SetAllocated(stage_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stage_id_.IsDefault()) {
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.StageSelectRequestNotify.stage_id)
}

// string stage_name = 3;
inline void StageSelectRequestNotify::clear_stage_name() {
  _impl_.stage_name_.ClearToEmpty();
}
inline const std::string& StageSelectRequestNotify::stage_name() const {
  // @@protoc_insertion_point(field_get:broadcast.StageSelectRequestNotify.stage_name)
  return _internal_stage_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StageSelectRequestNotify::set_stage_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stage_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.StageSelectRequestNotify.stage_name)
}
inline std::string* StageSelectRequestNotify::mutable_stage_name() {
  std::string* _s = _internal_mutable_stage_name();
  // @@protoc_insertion_point(field_mutable:broadcast.StageSelectRequestNotify.stage_name)
  return _s;
}
inline const std::string& StageSelectRequestNotify::_internal_stage_name() const {
  return _impl_.stage_name_.Get();
}
inline void StageSelectRequestNotify::_internal_set_stage_name(const std::string& value) {
  
  _impl_.stage_name_.Set(value, GetArenaForAllocation());
}
inline std::string* StageSelectRequestNotify::_internal_mutable_stage_name() {
  
  return _impl_.stage_name_.Mutable(GetArenaForAllocation());
}
inline std::string* StageSelectRequestNotify::release_stage_name() {
  // @@protoc_insertion_point(field_release:broadcast.StageSelectRequestNotify.stage_name)
  return _impl_.stage_name_.Release();
}
inline void StageSelectRequestNotify::set_allocated_stage_name(std::string* stage_name) {
  if (stage_name != nullptr) {
    
  } else {
    
  }
  _impl_.stage_name_.SetAllocated(stage_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stage_name_.IsDefault()) {
    _impl_.stage_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.StageSelectRequestNotify.stage_name)
}

// -------------------------------------------------------------------

// PlayerConfirmStageResponse

// string player_id = 1;
inline void PlayerConfirmStageResponse::clear_player_id() {
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& PlayerConfirmStageResponse::player_id() const {
  // @@protoc_insertion_point(field_get:broadcast.PlayerConfirmStageResponse.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerConfirmStageResponse::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.PlayerConfirmStageResponse.player_id)
}
inline std::string* PlayerConfirmStageResponse::mutable_player_id() {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:broadcast.PlayerConfirmStageResponse.player_id)
  return _s;
}
inline const std::string& PlayerConfirmStageResponse::_internal_player_id() const {
  return _impl_.player_id_.Get();
}
inline void PlayerConfirmStageResponse::_internal_set_player_id(const std::string& value) {
  
  _impl_.player_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerConfirmStageResponse::_internal_mutable_player_id() {
  
  return _impl_.player_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerConfirmStageResponse::release_player_id() {
  // @@protoc_insertion_point(field_release:broadcast.PlayerConfirmStageResponse.player_id)
  return _impl_.player_id_.Release();
}
inline void PlayerConfirmStageResponse::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  _impl_.player_id_.SetAllocated(player_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_id_.IsDefault()) {
    _impl_.player_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.PlayerConfirmStageResponse.player_id)
}

// string stage_id = 2;
inline void PlayerConfirmStageResponse::clear_stage_id() {
  _impl_.stage_id_.ClearToEmpty();
}
inline const std::string& PlayerConfirmStageResponse::stage_id() const {
  // @@protoc_insertion_point(field_get:broadcast.PlayerConfirmStageResponse.stage_id)
  return _internal_stage_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerConfirmStageResponse::set_stage_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stage_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.PlayerConfirmStageResponse.stage_id)
}
inline std::string* PlayerConfirmStageResponse::mutable_stage_id() {
  std::string* _s = _internal_mutable_stage_id();
  // @@protoc_insertion_point(field_mutable:broadcast.PlayerConfirmStageResponse.stage_id)
  return _s;
}
inline const std::string& PlayerConfirmStageResponse::_internal_stage_id() const {
  return _impl_.stage_id_.Get();
}
inline void PlayerConfirmStageResponse::_internal_set_stage_id(const std::string& value) {
  
  _impl_.stage_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerConfirmStageResponse::_internal_mutable_stage_id() {
  
  return _impl_.stage_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerConfirmStageResponse::release_stage_id() {
  // @@protoc_insertion_point(field_release:broadcast.PlayerConfirmStageResponse.stage_id)
  return _impl_.stage_id_.Release();
}
inline void PlayerConfirmStageResponse::set_allocated_stage_id(std::string* stage_id) {
  if (stage_id != nullptr) {
    
  } else {
    
  }
  _impl_.stage_id_.SetAllocated(stage_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stage_id_.IsDefault()) {
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.PlayerConfirmStageResponse.stage_id)
}

// .common.StageSelectState state = 3;
inline void PlayerConfirmStageResponse::clear_state() {
  _impl_.state_ = 0;
}
inline ::common::StageSelectState PlayerConfirmStageResponse::_internal_state() const {
  return static_cast< ::common::StageSelectState >(_impl_.state_);
}
inline ::common::StageSelectState PlayerConfirmStageResponse::state() const {
  // @@protoc_insertion_point(field_get:broadcast.PlayerConfirmStageResponse.state)
  return _internal_state();
}
inline void PlayerConfirmStageResponse::_internal_set_state(::common::StageSelectState value) {
  
  _impl_.state_ = value;
}
inline void PlayerConfirmStageResponse::set_state(::common::StageSelectState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:broadcast.PlayerConfirmStageResponse.state)
}

// -------------------------------------------------------------------

// StageSelectResultNotify

// string stage_id = 1;
inline void StageSelectResultNotify::clear_stage_id() {
  _impl_.stage_id_.ClearToEmpty();
}
inline const std::string& StageSelectResultNotify::stage_id() const {
  // @@protoc_insertion_point(field_get:broadcast.StageSelectResultNotify.stage_id)
  return _internal_stage_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StageSelectResultNotify::set_stage_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stage_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.StageSelectResultNotify.stage_id)
}
inline std::string* StageSelectResultNotify::mutable_stage_id() {
  std::string* _s = _internal_mutable_stage_id();
  // @@protoc_insertion_point(field_mutable:broadcast.StageSelectResultNotify.stage_id)
  return _s;
}
inline const std::string& StageSelectResultNotify::_internal_stage_id() const {
  return _impl_.stage_id_.Get();
}
inline void StageSelectResultNotify::_internal_set_stage_id(const std::string& value) {
  
  _impl_.stage_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StageSelectResultNotify::_internal_mutable_stage_id() {
  
  return _impl_.stage_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StageSelectResultNotify::release_stage_id() {
  // @@protoc_insertion_point(field_release:broadcast.StageSelectResultNotify.stage_id)
  return _impl_.stage_id_.Release();
}
inline void StageSelectResultNotify::set_allocated_stage_id(std::string* stage_id) {
  if (stage_id != nullptr) {
    
  } else {
    
  }
  _impl_.stage_id_.SetAllocated(stage_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stage_id_.IsDefault()) {
    _impl_.stage_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.StageSelectResultNotify.stage_id)
}

// bool is_all_confirmed = 2;
inline void StageSelectResultNotify::clear_is_all_confirmed() {
  _impl_.is_all_confirmed_ = false;
}
inline bool StageSelectResultNotify::_internal_is_all_confirmed() const {
  return _impl_.is_all_confirmed_;
}
inline bool StageSelectResultNotify::is_all_confirmed() const {
  // @@protoc_insertion_point(field_get:broadcast.StageSelectResultNotify.is_all_confirmed)
  return _internal_is_all_confirmed();
}
inline void StageSelectResultNotify::_internal_set_is_all_confirmed(bool value) {
  
  _impl_.is_all_confirmed_ = value;
}
inline void StageSelectResultNotify::set_is_all_confirmed(bool value) {
  _internal_set_is_all_confirmed(value);
  // @@protoc_insertion_point(field_set:broadcast.StageSelectResultNotify.is_all_confirmed)
}

// -------------------------------------------------------------------

// CharacterMoveNotify

// string entity_id = 1;
inline void CharacterMoveNotify::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& CharacterMoveNotify::entity_id() const {
  // @@protoc_insertion_point(field_get:broadcast.CharacterMoveNotify.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterMoveNotify::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.CharacterMoveNotify.entity_id)
}
inline std::string* CharacterMoveNotify::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:broadcast.CharacterMoveNotify.entity_id)
  return _s;
}
inline const std::string& CharacterMoveNotify::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void CharacterMoveNotify::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CharacterMoveNotify::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CharacterMoveNotify::release_entity_id() {
  // @@protoc_insertion_point(field_release:broadcast.CharacterMoveNotify.entity_id)
  return _impl_.entity_id_.Release();
}
inline void CharacterMoveNotify::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.CharacterMoveNotify.entity_id)
}

// float pos_x = 2;
inline void CharacterMoveNotify::clear_pos_x() {
  _impl_.pos_x_ = 0;
}
inline float CharacterMoveNotify::_internal_pos_x() const {
  return _impl_.pos_x_;
}
inline float CharacterMoveNotify::pos_x() const {
  // @@protoc_insertion_point(field_get:broadcast.CharacterMoveNotify.pos_x)
  return _internal_pos_x();
}
inline void CharacterMoveNotify::_internal_set_pos_x(float value) {
  
  _impl_.pos_x_ = value;
}
inline void CharacterMoveNotify::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:broadcast.CharacterMoveNotify.pos_x)
}

// float pos_y = 3;
inline void CharacterMoveNotify::clear_pos_y() {
  _impl_.pos_y_ = 0;
}
inline float CharacterMoveNotify::_internal_pos_y() const {
  return _impl_.pos_y_;
}
inline float CharacterMoveNotify::pos_y() const {
  // @@protoc_insertion_point(field_get:broadcast.CharacterMoveNotify.pos_y)
  return _internal_pos_y();
}
inline void CharacterMoveNotify::_internal_set_pos_y(float value) {
  
  _impl_.pos_y_ = value;
}
inline void CharacterMoveNotify::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:broadcast.CharacterMoveNotify.pos_y)
}

// float direction = 4;
inline void CharacterMoveNotify::clear_direction() {
  _impl_.direction_ = 0;
}
inline float CharacterMoveNotify::_internal_direction() const {
  return _impl_.direction_;
}
inline float CharacterMoveNotify::direction() const {
  // @@protoc_insertion_point(field_get:broadcast.CharacterMoveNotify.direction)
  return _internal_direction();
}
inline void CharacterMoveNotify::_internal_set_direction(float value) {
  
  _impl_.direction_ = value;
}
inline void CharacterMoveNotify::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:broadcast.CharacterMoveNotify.direction)
}

// float speed = 5;
inline void CharacterMoveNotify::clear_speed() {
  _impl_.speed_ = 0;
}
inline float CharacterMoveNotify::_internal_speed() const {
  return _impl_.speed_;
}
inline float CharacterMoveNotify::speed() const {
  // @@protoc_insertion_point(field_get:broadcast.CharacterMoveNotify.speed)
  return _internal_speed();
}
inline void CharacterMoveNotify::_internal_set_speed(float value) {
  
  _impl_.speed_ = value;
}
inline void CharacterMoveNotify::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:broadcast.CharacterMoveNotify.speed)
}

// -------------------------------------------------------------------

// MonsterMoveNotify

// string entity_id = 1;
inline void MonsterMoveNotify::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& MonsterMoveNotify::entity_id() const {
  // @@protoc_insertion_point(field_get:broadcast.MonsterMoveNotify.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonsterMoveNotify::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.MonsterMoveNotify.entity_id)
}
inline std::string* MonsterMoveNotify::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:broadcast.MonsterMoveNotify.entity_id)
  return _s;
}
inline const std::string& MonsterMoveNotify::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void MonsterMoveNotify::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MonsterMoveNotify::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MonsterMoveNotify::release_entity_id() {
  // @@protoc_insertion_point(field_release:broadcast.MonsterMoveNotify.entity_id)
  return _impl_.entity_id_.Release();
}
inline void MonsterMoveNotify::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.MonsterMoveNotify.entity_id)
}

// float pos_x = 2;
inline void MonsterMoveNotify::clear_pos_x() {
  _impl_.pos_x_ = 0;
}
inline float MonsterMoveNotify::_internal_pos_x() const {
  return _impl_.pos_x_;
}
inline float MonsterMoveNotify::pos_x() const {
  // @@protoc_insertion_point(field_get:broadcast.MonsterMoveNotify.pos_x)
  return _internal_pos_x();
}
inline void MonsterMoveNotify::_internal_set_pos_x(float value) {
  
  _impl_.pos_x_ = value;
}
inline void MonsterMoveNotify::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:broadcast.MonsterMoveNotify.pos_x)
}

// float pos_y = 3;
inline void MonsterMoveNotify::clear_pos_y() {
  _impl_.pos_y_ = 0;
}
inline float MonsterMoveNotify::_internal_pos_y() const {
  return _impl_.pos_y_;
}
inline float MonsterMoveNotify::pos_y() const {
  // @@protoc_insertion_point(field_get:broadcast.MonsterMoveNotify.pos_y)
  return _internal_pos_y();
}
inline void MonsterMoveNotify::_internal_set_pos_y(float value) {
  
  _impl_.pos_y_ = value;
}
inline void MonsterMoveNotify::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:broadcast.MonsterMoveNotify.pos_y)
}

// float direction = 4;
inline void MonsterMoveNotify::clear_direction() {
  _impl_.direction_ = 0;
}
inline float MonsterMoveNotify::_internal_direction() const {
  return _impl_.direction_;
}
inline float MonsterMoveNotify::direction() const {
  // @@protoc_insertion_point(field_get:broadcast.MonsterMoveNotify.direction)
  return _internal_direction();
}
inline void MonsterMoveNotify::_internal_set_direction(float value) {
  
  _impl_.direction_ = value;
}
inline void MonsterMoveNotify::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:broadcast.MonsterMoveNotify.direction)
}

// float speed = 5;
inline void MonsterMoveNotify::clear_speed() {
  _impl_.speed_ = 0;
}
inline float MonsterMoveNotify::_internal_speed() const {
  return _impl_.speed_;
}
inline float MonsterMoveNotify::speed() const {
  // @@protoc_insertion_point(field_get:broadcast.MonsterMoveNotify.speed)
  return _internal_speed();
}
inline void MonsterMoveNotify::_internal_set_speed(float value) {
  
  _impl_.speed_ = value;
}
inline void MonsterMoveNotify::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:broadcast.MonsterMoveNotify.speed)
}

// -------------------------------------------------------------------

// CharacterStatusUpdate

// string entity_id = 1;
inline void CharacterStatusUpdate::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& CharacterStatusUpdate::entity_id() const {
  // @@protoc_insertion_point(field_get:broadcast.CharacterStatusUpdate.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterStatusUpdate::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.CharacterStatusUpdate.entity_id)
}
inline std::string* CharacterStatusUpdate::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:broadcast.CharacterStatusUpdate.entity_id)
  return _s;
}
inline const std::string& CharacterStatusUpdate::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void CharacterStatusUpdate::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CharacterStatusUpdate::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CharacterStatusUpdate::release_entity_id() {
  // @@protoc_insertion_point(field_release:broadcast.CharacterStatusUpdate.entity_id)
  return _impl_.entity_id_.Release();
}
inline void CharacterStatusUpdate::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.CharacterStatusUpdate.entity_id)
}

// .common.Status new_status = 2;
inline void CharacterStatusUpdate::clear_new_status() {
  _impl_.new_status_ = 0;
}
inline ::common::Status CharacterStatusUpdate::_internal_new_status() const {
  return static_cast< ::common::Status >(_impl_.new_status_);
}
inline ::common::Status CharacterStatusUpdate::new_status() const {
  // @@protoc_insertion_point(field_get:broadcast.CharacterStatusUpdate.new_status)
  return _internal_new_status();
}
inline void CharacterStatusUpdate::_internal_set_new_status(::common::Status value) {
  
  _impl_.new_status_ = value;
}
inline void CharacterStatusUpdate::set_new_status(::common::Status value) {
  _internal_set_new_status(value);
  // @@protoc_insertion_point(field_set:broadcast.CharacterStatusUpdate.new_status)
}

// int32 current_hp = 3;
inline void CharacterStatusUpdate::clear_current_hp() {
  _impl_.current_hp_ = 0;
}
inline int32_t CharacterStatusUpdate::_internal_current_hp() const {
  return _impl_.current_hp_;
}
inline int32_t CharacterStatusUpdate::current_hp() const {
  // @@protoc_insertion_point(field_get:broadcast.CharacterStatusUpdate.current_hp)
  return _internal_current_hp();
}
inline void CharacterStatusUpdate::_internal_set_current_hp(int32_t value) {
  
  _impl_.current_hp_ = value;
}
inline void CharacterStatusUpdate::set_current_hp(int32_t value) {
  _internal_set_current_hp(value);
  // @@protoc_insertion_point(field_set:broadcast.CharacterStatusUpdate.current_hp)
}

// int32 max_hp = 4;
inline void CharacterStatusUpdate::clear_max_hp() {
  _impl_.max_hp_ = 0;
}
inline int32_t CharacterStatusUpdate::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline int32_t CharacterStatusUpdate::max_hp() const {
  // @@protoc_insertion_point(field_get:broadcast.CharacterStatusUpdate.max_hp)
  return _internal_max_hp();
}
inline void CharacterStatusUpdate::_internal_set_max_hp(int32_t value) {
  
  _impl_.max_hp_ = value;
}
inline void CharacterStatusUpdate::set_max_hp(int32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:broadcast.CharacterStatusUpdate.max_hp)
}

// -------------------------------------------------------------------

// MonsterStatusUpdate

// string entity_id = 1;
inline void MonsterStatusUpdate::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& MonsterStatusUpdate::entity_id() const {
  // @@protoc_insertion_point(field_get:broadcast.MonsterStatusUpdate.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonsterStatusUpdate::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.MonsterStatusUpdate.entity_id)
}
inline std::string* MonsterStatusUpdate::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:broadcast.MonsterStatusUpdate.entity_id)
  return _s;
}
inline const std::string& MonsterStatusUpdate::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void MonsterStatusUpdate::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MonsterStatusUpdate::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MonsterStatusUpdate::release_entity_id() {
  // @@protoc_insertion_point(field_release:broadcast.MonsterStatusUpdate.entity_id)
  return _impl_.entity_id_.Release();
}
inline void MonsterStatusUpdate::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.MonsterStatusUpdate.entity_id)
}

// .common.MonsterState new_state = 2;
inline void MonsterStatusUpdate::clear_new_state() {
  _impl_.new_state_ = 0;
}
inline ::common::MonsterState MonsterStatusUpdate::_internal_new_state() const {
  return static_cast< ::common::MonsterState >(_impl_.new_state_);
}
inline ::common::MonsterState MonsterStatusUpdate::new_state() const {
  // @@protoc_insertion_point(field_get:broadcast.MonsterStatusUpdate.new_state)
  return _internal_new_state();
}
inline void MonsterStatusUpdate::_internal_set_new_state(::common::MonsterState value) {
  
  _impl_.new_state_ = value;
}
inline void MonsterStatusUpdate::set_new_state(::common::MonsterState value) {
  _internal_set_new_state(value);
  // @@protoc_insertion_point(field_set:broadcast.MonsterStatusUpdate.new_state)
}

// int32 current_hp = 3;
inline void MonsterStatusUpdate::clear_current_hp() {
  _impl_.current_hp_ = 0;
}
inline int32_t MonsterStatusUpdate::_internal_current_hp() const {
  return _impl_.current_hp_;
}
inline int32_t MonsterStatusUpdate::current_hp() const {
  // @@protoc_insertion_point(field_get:broadcast.MonsterStatusUpdate.current_hp)
  return _internal_current_hp();
}
inline void MonsterStatusUpdate::_internal_set_current_hp(int32_t value) {
  
  _impl_.current_hp_ = value;
}
inline void MonsterStatusUpdate::set_current_hp(int32_t value) {
  _internal_set_current_hp(value);
  // @@protoc_insertion_point(field_set:broadcast.MonsterStatusUpdate.current_hp)
}

// int32 max_hp = 4;
inline void MonsterStatusUpdate::clear_max_hp() {
  _impl_.max_hp_ = 0;
}
inline int32_t MonsterStatusUpdate::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline int32_t MonsterStatusUpdate::max_hp() const {
  // @@protoc_insertion_point(field_get:broadcast.MonsterStatusUpdate.max_hp)
  return _internal_max_hp();
}
inline void MonsterStatusUpdate::_internal_set_max_hp(int32_t value) {
  
  _impl_.max_hp_ = value;
}
inline void MonsterStatusUpdate::set_max_hp(int32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:broadcast.MonsterStatusUpdate.max_hp)
}

// -------------------------------------------------------------------

// SkillCastNotify

// string entity_id = 1;
inline void SkillCastNotify::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& SkillCastNotify::entity_id() const {
  // @@protoc_insertion_point(field_get:broadcast.SkillCastNotify.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkillCastNotify::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.SkillCastNotify.entity_id)
}
inline std::string* SkillCastNotify::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:broadcast.SkillCastNotify.entity_id)
  return _s;
}
inline const std::string& SkillCastNotify::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void SkillCastNotify::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SkillCastNotify::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SkillCastNotify::release_entity_id() {
  // @@protoc_insertion_point(field_release:broadcast.SkillCastNotify.entity_id)
  return _impl_.entity_id_.Release();
}
inline void SkillCastNotify::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.SkillCastNotify.entity_id)
}

// .combat.EntityType entity_type = 2;
inline void SkillCastNotify::clear_entity_type() {
  _impl_.entity_type_ = 0;
}
inline ::combat::EntityType SkillCastNotify::_internal_entity_type() const {
  return static_cast< ::combat::EntityType >(_impl_.entity_type_);
}
inline ::combat::EntityType SkillCastNotify::entity_type() const {
  // @@protoc_insertion_point(field_get:broadcast.SkillCastNotify.entity_type)
  return _internal_entity_type();
}
inline void SkillCastNotify::_internal_set_entity_type(::combat::EntityType value) {
  
  _impl_.entity_type_ = value;
}
inline void SkillCastNotify::set_entity_type(::combat::EntityType value) {
  _internal_set_entity_type(value);
  // @@protoc_insertion_point(field_set:broadcast.SkillCastNotify.entity_type)
}

// string skill_id = 3;
inline void SkillCastNotify::clear_skill_id() {
  _impl_.skill_id_.ClearToEmpty();
}
inline const std::string& SkillCastNotify::skill_id() const {
  // @@protoc_insertion_point(field_get:broadcast.SkillCastNotify.skill_id)
  return _internal_skill_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SkillCastNotify::set_skill_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skill_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.SkillCastNotify.skill_id)
}
inline std::string* SkillCastNotify::mutable_skill_id() {
  std::string* _s = _internal_mutable_skill_id();
  // @@protoc_insertion_point(field_mutable:broadcast.SkillCastNotify.skill_id)
  return _s;
}
inline const std::string& SkillCastNotify::_internal_skill_id() const {
  return _impl_.skill_id_.Get();
}
inline void SkillCastNotify::_internal_set_skill_id(const std::string& value) {
  
  _impl_.skill_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SkillCastNotify::_internal_mutable_skill_id() {
  
  return _impl_.skill_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SkillCastNotify::release_skill_id() {
  // @@protoc_insertion_point(field_release:broadcast.SkillCastNotify.skill_id)
  return _impl_.skill_id_.Release();
}
inline void SkillCastNotify::set_allocated_skill_id(std::string* skill_id) {
  if (skill_id != nullptr) {
    
  } else {
    
  }
  _impl_.skill_id_.SetAllocated(skill_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skill_id_.IsDefault()) {
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.SkillCastNotify.skill_id)
}

// float cast_time = 4;
inline void SkillCastNotify::clear_cast_time() {
  _impl_.cast_time_ = 0;
}
inline float SkillCastNotify::_internal_cast_time() const {
  return _impl_.cast_time_;
}
inline float SkillCastNotify::cast_time() const {
  // @@protoc_insertion_point(field_get:broadcast.SkillCastNotify.cast_time)
  return _internal_cast_time();
}
inline void SkillCastNotify::_internal_set_cast_time(float value) {
  
  _impl_.cast_time_ = value;
}
inline void SkillCastNotify::set_cast_time(float value) {
  _internal_set_cast_time(value);
  // @@protoc_insertion_point(field_set:broadcast.SkillCastNotify.cast_time)
}

// float attack_angle = 5;
inline void SkillCastNotify::clear_attack_angle() {
  _impl_.attack_angle_ = 0;
}
inline float SkillCastNotify::_internal_attack_angle() const {
  return _impl_.attack_angle_;
}
inline float SkillCastNotify::attack_angle() const {
  // @@protoc_insertion_point(field_get:broadcast.SkillCastNotify.attack_angle)
  return _internal_attack_angle();
}
inline void SkillCastNotify::_internal_set_attack_angle(float value) {
  
  _impl_.attack_angle_ = value;
}
inline void SkillCastNotify::set_attack_angle(float value) {
  _internal_set_attack_angle(value);
  // @@protoc_insertion_point(field_set:broadcast.SkillCastNotify.attack_angle)
}

// -------------------------------------------------------------------

// EntityAttackNotify

// string entity_id = 1;
inline void EntityAttackNotify::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& EntityAttackNotify::entity_id() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityAttackNotify.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntityAttackNotify::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.EntityAttackNotify.entity_id)
}
inline std::string* EntityAttackNotify::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:broadcast.EntityAttackNotify.entity_id)
  return _s;
}
inline const std::string& EntityAttackNotify::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void EntityAttackNotify::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EntityAttackNotify::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* EntityAttackNotify::release_entity_id() {
  // @@protoc_insertion_point(field_release:broadcast.EntityAttackNotify.entity_id)
  return _impl_.entity_id_.Release();
}
inline void EntityAttackNotify::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.EntityAttackNotify.entity_id)
}

// .combat.EntityType entity_type = 2;
inline void EntityAttackNotify::clear_entity_type() {
  _impl_.entity_type_ = 0;
}
inline ::combat::EntityType EntityAttackNotify::_internal_entity_type() const {
  return static_cast< ::combat::EntityType >(_impl_.entity_type_);
}
inline ::combat::EntityType EntityAttackNotify::entity_type() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityAttackNotify.entity_type)
  return _internal_entity_type();
}
inline void EntityAttackNotify::_internal_set_entity_type(::combat::EntityType value) {
  
  _impl_.entity_type_ = value;
}
inline void EntityAttackNotify::set_entity_type(::combat::EntityType value) {
  _internal_set_entity_type(value);
  // @@protoc_insertion_point(field_set:broadcast.EntityAttackNotify.entity_type)
}

// string target_id = 3;
inline void EntityAttackNotify::clear_target_id() {
  _impl_.target_id_.ClearToEmpty();
}
inline const std::string& EntityAttackNotify::target_id() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityAttackNotify.target_id)
  return _internal_target_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntityAttackNotify::set_target_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.EntityAttackNotify.target_id)
}
inline std::string* EntityAttackNotify::mutable_target_id() {
  std::string* _s = _internal_mutable_target_id();
  // @@protoc_insertion_point(field_mutable:broadcast.EntityAttackNotify.target_id)
  return _s;
}
inline const std::string& EntityAttackNotify::_internal_target_id() const {
  return _impl_.target_id_.Get();
}
inline void EntityAttackNotify::_internal_set_target_id(const std::string& value) {
  
  _impl_.target_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EntityAttackNotify::_internal_mutable_target_id() {
  
  return _impl_.target_id_.Mutable(GetArenaForAllocation());
}
inline std::string* EntityAttackNotify::release_target_id() {
  // @@protoc_insertion_point(field_release:broadcast.EntityAttackNotify.target_id)
  return _impl_.target_id_.Release();
}
inline void EntityAttackNotify::set_allocated_target_id(std::string* target_id) {
  if (target_id != nullptr) {
    
  } else {
    
  }
  _impl_.target_id_.SetAllocated(target_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_id_.IsDefault()) {
    _impl_.target_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.EntityAttackNotify.target_id)
}

// float attack_angle = 4;
inline void EntityAttackNotify::clear_attack_angle() {
  _impl_.attack_angle_ = 0;
}
inline float EntityAttackNotify::_internal_attack_angle() const {
  return _impl_.attack_angle_;
}
inline float EntityAttackNotify::attack_angle() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityAttackNotify.attack_angle)
  return _internal_attack_angle();
}
inline void EntityAttackNotify::_internal_set_attack_angle(float value) {
  
  _impl_.attack_angle_ = value;
}
inline void EntityAttackNotify::set_attack_angle(float value) {
  _internal_set_attack_angle(value);
  // @@protoc_insertion_point(field_set:broadcast.EntityAttackNotify.attack_angle)
}

// string skill_id = 5;
inline void EntityAttackNotify::clear_skill_id() {
  _impl_.skill_id_.ClearToEmpty();
}
inline const std::string& EntityAttackNotify::skill_id() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityAttackNotify.skill_id)
  return _internal_skill_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntityAttackNotify::set_skill_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skill_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.EntityAttackNotify.skill_id)
}
inline std::string* EntityAttackNotify::mutable_skill_id() {
  std::string* _s = _internal_mutable_skill_id();
  // @@protoc_insertion_point(field_mutable:broadcast.EntityAttackNotify.skill_id)
  return _s;
}
inline const std::string& EntityAttackNotify::_internal_skill_id() const {
  return _impl_.skill_id_.Get();
}
inline void EntityAttackNotify::_internal_set_skill_id(const std::string& value) {
  
  _impl_.skill_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EntityAttackNotify::_internal_mutable_skill_id() {
  
  return _impl_.skill_id_.Mutable(GetArenaForAllocation());
}
inline std::string* EntityAttackNotify::release_skill_id() {
  // @@protoc_insertion_point(field_release:broadcast.EntityAttackNotify.skill_id)
  return _impl_.skill_id_.Release();
}
inline void EntityAttackNotify::set_allocated_skill_id(std::string* skill_id) {
  if (skill_id != nullptr) {
    
  } else {
    
  }
  _impl_.skill_id_.SetAllocated(skill_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skill_id_.IsDefault()) {
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.EntityAttackNotify.skill_id)
}

// float cast_time = 6;
inline void EntityAttackNotify::clear_cast_time() {
  _impl_.cast_time_ = 0;
}
inline float EntityAttackNotify::_internal_cast_time() const {
  return _impl_.cast_time_;
}
inline float EntityAttackNotify::cast_time() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityAttackNotify.cast_time)
  return _internal_cast_time();
}
inline void EntityAttackNotify::_internal_set_cast_time(float value) {
  
  _impl_.cast_time_ = value;
}
inline void EntityAttackNotify::set_cast_time(float value) {
  _internal_set_cast_time(value);
  // @@protoc_insertion_point(field_set:broadcast.EntityAttackNotify.cast_time)
}

// -------------------------------------------------------------------

// EntityHitNotify

// string entity_id = 1;
inline void EntityHitNotify::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& EntityHitNotify::entity_id() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityHitNotify.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntityHitNotify::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.EntityHitNotify.entity_id)
}
inline std::string* EntityHitNotify::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:broadcast.EntityHitNotify.entity_id)
  return _s;
}
inline const std::string& EntityHitNotify::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void EntityHitNotify::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EntityHitNotify::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* EntityHitNotify::release_entity_id() {
  // @@protoc_insertion_point(field_release:broadcast.EntityHitNotify.entity_id)
  return _impl_.entity_id_.Release();
}
inline void EntityHitNotify::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.EntityHitNotify.entity_id)
}

// .combat.EntityType entity_type = 2;
inline void EntityHitNotify::clear_entity_type() {
  _impl_.entity_type_ = 0;
}
inline ::combat::EntityType EntityHitNotify::_internal_entity_type() const {
  return static_cast< ::combat::EntityType >(_impl_.entity_type_);
}
inline ::combat::EntityType EntityHitNotify::entity_type() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityHitNotify.entity_type)
  return _internal_entity_type();
}
inline void EntityHitNotify::_internal_set_entity_type(::combat::EntityType value) {
  
  _impl_.entity_type_ = value;
}
inline void EntityHitNotify::set_entity_type(::combat::EntityType value) {
  _internal_set_entity_type(value);
  // @@protoc_insertion_point(field_set:broadcast.EntityHitNotify.entity_type)
}

// string attacker_id = 3;
inline void EntityHitNotify::clear_attacker_id() {
  _impl_.attacker_id_.ClearToEmpty();
}
inline const std::string& EntityHitNotify::attacker_id() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityHitNotify.attacker_id)
  return _internal_attacker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntityHitNotify::set_attacker_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.attacker_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:broadcast.EntityHitNotify.attacker_id)
}
inline std::string* EntityHitNotify::mutable_attacker_id() {
  std::string* _s = _internal_mutable_attacker_id();
  // @@protoc_insertion_point(field_mutable:broadcast.EntityHitNotify.attacker_id)
  return _s;
}
inline const std::string& EntityHitNotify::_internal_attacker_id() const {
  return _impl_.attacker_id_.Get();
}
inline void EntityHitNotify::_internal_set_attacker_id(const std::string& value) {
  
  _impl_.attacker_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EntityHitNotify::_internal_mutable_attacker_id() {
  
  return _impl_.attacker_id_.Mutable(GetArenaForAllocation());
}
inline std::string* EntityHitNotify::release_attacker_id() {
  // @@protoc_insertion_point(field_release:broadcast.EntityHitNotify.attacker_id)
  return _impl_.attacker_id_.Release();
}
inline void EntityHitNotify::set_allocated_attacker_id(std::string* attacker_id) {
  if (attacker_id != nullptr) {
    
  } else {
    
  }
  _impl_.attacker_id_.SetAllocated(attacker_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attacker_id_.IsDefault()) {
    _impl_.attacker_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:broadcast.EntityHitNotify.attacker_id)
}

// int32 damage = 4;
inline void EntityHitNotify::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t EntityHitNotify::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t EntityHitNotify::damage() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityHitNotify.damage)
  return _internal_damage();
}
inline void EntityHitNotify::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void EntityHitNotify::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:broadcast.EntityHitNotify.damage)
}

// .common.Status new_status = 5;
inline void EntityHitNotify::clear_new_status() {
  _impl_.new_status_ = 0;
}
inline ::common::Status EntityHitNotify::_internal_new_status() const {
  return static_cast< ::common::Status >(_impl_.new_status_);
}
inline ::common::Status EntityHitNotify::new_status() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityHitNotify.new_status)
  return _internal_new_status();
}
inline void EntityHitNotify::_internal_set_new_status(::common::Status value) {
  
  _impl_.new_status_ = value;
}
inline void EntityHitNotify::set_new_status(::common::Status value) {
  _internal_set_new_status(value);
  // @@protoc_insertion_point(field_set:broadcast.EntityHitNotify.new_status)
}

// .common.MonsterState new_monster_state = 6;
inline void EntityHitNotify::clear_new_monster_state() {
  _impl_.new_monster_state_ = 0;
}
inline ::common::MonsterState EntityHitNotify::_internal_new_monster_state() const {
  return static_cast< ::common::MonsterState >(_impl_.new_monster_state_);
}
inline ::common::MonsterState EntityHitNotify::new_monster_state() const {
  // @@protoc_insertion_point(field_get:broadcast.EntityHitNotify.new_monster_state)
  return _internal_new_monster_state();
}
inline void EntityHitNotify::_internal_set_new_monster_state(::common::MonsterState value) {
  
  _impl_.new_monster_state_ = value;
}
inline void EntityHitNotify::set_new_monster_state(::common::MonsterState value) {
  _internal_set_new_monster_state(value);
  // @@protoc_insertion_point(field_set:broadcast.EntityHitNotify.new_monster_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace broadcast

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_broadcast_2eproto
