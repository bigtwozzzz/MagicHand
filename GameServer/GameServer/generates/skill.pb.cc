// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill.proto

#include "skill.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace skill {
PROTOBUF_CONSTEXPR SkillDefinition::SkillDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.effects_)*/{}
  , /*decltype(_impl_._effects_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skill_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skill_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skill_type_)*/0
  , /*decltype(_impl_.base_damage_)*/0
  , /*decltype(_impl_.cast_time_)*/0
  , /*decltype(_impl_.cool_down_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.mana_cost_)*/0
  , /*decltype(_impl_.element_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkillDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillDefinitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillDefinitionDefaultTypeInternal() {}
  union {
    SkillDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillDefinitionDefaultTypeInternal _SkillDefinition_default_instance_;
}  // namespace skill
static ::_pb::Metadata file_level_metadata_skill_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_skill_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_skill_2eproto = nullptr;

const uint32_t TableStruct_skill_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::SkillDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::SkillDefinition, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::skill::SkillDefinition, _impl_.skill_name_),
  PROTOBUF_FIELD_OFFSET(::skill::SkillDefinition, _impl_.skill_type_),
  PROTOBUF_FIELD_OFFSET(::skill::SkillDefinition, _impl_.base_damage_),
  PROTOBUF_FIELD_OFFSET(::skill::SkillDefinition, _impl_.cast_time_),
  PROTOBUF_FIELD_OFFSET(::skill::SkillDefinition, _impl_.cool_down_),
  PROTOBUF_FIELD_OFFSET(::skill::SkillDefinition, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::skill::SkillDefinition, _impl_.mana_cost_),
  PROTOBUF_FIELD_OFFSET(::skill::SkillDefinition, _impl_.effects_),
  PROTOBUF_FIELD_OFFSET(::skill::SkillDefinition, _impl_.element_type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skill::SkillDefinition)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::skill::_SkillDefinition_default_instance_._instance,
};

const char descriptor_table_protodef_skill_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013skill.proto\022\005skill\032\014common.proto\"\214\002\n\017S"
  "killDefinition\022\020\n\010skill_id\030\001 \001(\t\022\022\n\nskil"
  "l_name\030\002 \001(\t\022$\n\nskill_type\030\003 \001(\0162\020.skill"
  ".SkillType\022\023\n\013base_damage\030\004 \001(\005\022\021\n\tcast_"
  "time\030\005 \001(\002\022\021\n\tcool_down\030\006 \001(\002\022\020\n\010duratio"
  "n\030\007 \001(\002\022\021\n\tmana_cost\030\010 \001(\005\022\"\n\007effects\030\t "
  "\003(\0162\021.skill.EffectType\022)\n\014element_type\030\n"
  " \001(\0162\023.common.ElementType*l\n\tSkillType\022\020"
  "\n\014BASIC_ATTACK\020\000\022\023\n\017ELEMENTAL_SPELL\020\001\022\022\n"
  "\016CONTROL_EFFECT\020\002\022\017\n\013BUFF_DEBUFF\020\003\022\023\n\017SP"
  "ECIAL_ABILITY\020\004*l\n\nEffectType\022\n\n\006DAMAGE\020"
  "\000\022\010\n\004HEAL\020\001\022\010\n\004STUN\020\002\022\010\n\004SLOW\020\003\022\017\n\013SPEED"
  "_BOOST\020\004\022\r\n\tINVISIBLE\020\005\022\024\n\020ELEMENTAL_DAM"
  "AGE\020\006b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_skill_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_skill_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_skill_2eproto = {
    false, false, 533, descriptor_table_protodef_skill_2eproto,
    "skill.proto",
    &descriptor_table_skill_2eproto_once, descriptor_table_skill_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_skill_2eproto::offsets,
    file_level_metadata_skill_2eproto, file_level_enum_descriptors_skill_2eproto,
    file_level_service_descriptors_skill_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_skill_2eproto_getter() {
  return &descriptor_table_skill_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_skill_2eproto(&descriptor_table_skill_2eproto);
namespace skill {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_skill_2eproto);
  return file_level_enum_descriptors_skill_2eproto[0];
}
bool SkillType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EffectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_skill_2eproto);
  return file_level_enum_descriptors_skill_2eproto[1];
}
bool EffectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SkillDefinition::_Internal {
 public:
};

SkillDefinition::SkillDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:skill.SkillDefinition)
}
SkillDefinition::SkillDefinition(const SkillDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkillDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.effects_){from._impl_.effects_}
    , /*decltype(_impl_._effects_cached_byte_size_)*/{0}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.skill_name_){}
    , decltype(_impl_.skill_type_){}
    , decltype(_impl_.base_damage_){}
    , decltype(_impl_.cast_time_){}
    , decltype(_impl_.cool_down_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.mana_cost_){}
    , decltype(_impl_.element_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.skill_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skill_id().empty()) {
    _this->_impl_.skill_id_.Set(from._internal_skill_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.skill_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skill_name().empty()) {
    _this->_impl_.skill_name_.Set(from._internal_skill_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skill_type_, &from._impl_.skill_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.element_type_) -
    reinterpret_cast<char*>(&_impl_.skill_type_)) + sizeof(_impl_.element_type_));
  // @@protoc_insertion_point(copy_constructor:skill.SkillDefinition)
}

inline void SkillDefinition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.effects_){arena}
    , /*decltype(_impl_._effects_cached_byte_size_)*/{0}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.skill_name_){}
    , decltype(_impl_.skill_type_){0}
    , decltype(_impl_.base_damage_){0}
    , decltype(_impl_.cast_time_){0}
    , decltype(_impl_.cool_down_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.mana_cost_){0}
    , decltype(_impl_.element_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.skill_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.skill_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skill_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SkillDefinition::~SkillDefinition() {
  // @@protoc_insertion_point(destructor:skill.SkillDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.effects_.~RepeatedField();
  _impl_.skill_id_.Destroy();
  _impl_.skill_name_.Destroy();
}

void SkillDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkillDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.SkillDefinition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effects_.Clear();
  _impl_.skill_id_.ClearToEmpty();
  _impl_.skill_name_.ClearToEmpty();
  ::memset(&_impl_.skill_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.element_type_) -
      reinterpret_cast<char*>(&_impl_.skill_type_)) + sizeof(_impl_.element_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string skill_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_skill_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "skill.SkillDefinition.skill_id"));
        } else
          goto handle_unusual;
        continue;
      // string skill_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_skill_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "skill.SkillDefinition.skill_name"));
        } else
          goto handle_unusual;
        continue;
      // .skill.SkillType skill_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_skill_type(static_cast<::skill::SkillType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 base_damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.base_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cast_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.cast_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cool_down = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.cool_down_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 mana_cost = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.mana_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .skill.EffectType effects = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_effects(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_effects(static_cast<::skill::EffectType>(val));
        } else
          goto handle_unusual;
        continue;
      // .common.ElementType element_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_element_type(static_cast<::common::ElementType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillDefinition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.SkillDefinition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string skill_id = 1;
  if (!this->_internal_skill_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skill_id().data(), static_cast<int>(this->_internal_skill_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skill.SkillDefinition.skill_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_skill_id(), target);
  }

  // string skill_name = 2;
  if (!this->_internal_skill_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skill_name().data(), static_cast<int>(this->_internal_skill_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "skill.SkillDefinition.skill_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_skill_name(), target);
  }

  // .skill.SkillType skill_type = 3;
  if (this->_internal_skill_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_skill_type(), target);
  }

  // int32 base_damage = 4;
  if (this->_internal_base_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_base_damage(), target);
  }

  // float cast_time = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = this->_internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_cast_time(), target);
  }

  // float cool_down = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cool_down = this->_internal_cool_down();
  uint32_t raw_cool_down;
  memcpy(&raw_cool_down, &tmp_cool_down, sizeof(tmp_cool_down));
  if (raw_cool_down != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_cool_down(), target);
  }

  // float duration = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_duration(), target);
  }

  // int32 mana_cost = 8;
  if (this->_internal_mana_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_mana_cost(), target);
  }

  // repeated .skill.EffectType effects = 9;
  {
    int byte_size = _impl_._effects_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          9, _impl_.effects_, byte_size, target);
    }
  }

  // .common.ElementType element_type = 10;
  if (this->_internal_element_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_element_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.SkillDefinition)
  return target;
}

size_t SkillDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.SkillDefinition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .skill.EffectType effects = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_effects_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_effects(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._effects_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string skill_id = 1;
  if (!this->_internal_skill_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skill_id());
  }

  // string skill_name = 2;
  if (!this->_internal_skill_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skill_name());
  }

  // .skill.SkillType skill_type = 3;
  if (this->_internal_skill_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_skill_type());
  }

  // int32 base_damage = 4;
  if (this->_internal_base_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_base_damage());
  }

  // float cast_time = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = this->_internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    total_size += 1 + 4;
  }

  // float cool_down = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cool_down = this->_internal_cool_down();
  uint32_t raw_cool_down;
  memcpy(&raw_cool_down, &tmp_cool_down, sizeof(tmp_cool_down));
  if (raw_cool_down != 0) {
    total_size += 1 + 4;
  }

  // float duration = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 1 + 4;
  }

  // int32 mana_cost = 8;
  if (this->_internal_mana_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mana_cost());
  }

  // .common.ElementType element_type = 10;
  if (this->_internal_element_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_element_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkillDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillDefinition::GetClassData() const { return &_class_data_; }


void SkillDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkillDefinition*>(&to_msg);
  auto& from = static_cast<const SkillDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:skill.SkillDefinition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.effects_.MergeFrom(from._impl_.effects_);
  if (!from._internal_skill_id().empty()) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  if (!from._internal_skill_name().empty()) {
    _this->_internal_set_skill_name(from._internal_skill_name());
  }
  if (from._internal_skill_type() != 0) {
    _this->_internal_set_skill_type(from._internal_skill_type());
  }
  if (from._internal_base_damage() != 0) {
    _this->_internal_set_base_damage(from._internal_base_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cast_time = from._internal_cast_time();
  uint32_t raw_cast_time;
  memcpy(&raw_cast_time, &tmp_cast_time, sizeof(tmp_cast_time));
  if (raw_cast_time != 0) {
    _this->_internal_set_cast_time(from._internal_cast_time());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cool_down = from._internal_cool_down();
  uint32_t raw_cool_down;
  memcpy(&raw_cool_down, &tmp_cool_down, sizeof(tmp_cool_down));
  if (raw_cool_down != 0) {
    _this->_internal_set_cool_down(from._internal_cool_down());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = from._internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_mana_cost() != 0) {
    _this->_internal_set_mana_cost(from._internal_mana_cost());
  }
  if (from._internal_element_type() != 0) {
    _this->_internal_set_element_type(from._internal_element_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillDefinition::CopyFrom(const SkillDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.SkillDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDefinition::IsInitialized() const {
  return true;
}

void SkillDefinition::InternalSwap(SkillDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.effects_.InternalSwap(&other->_impl_.effects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skill_id_, lhs_arena,
      &other->_impl_.skill_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skill_name_, lhs_arena,
      &other->_impl_.skill_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillDefinition, _impl_.element_type_)
      + sizeof(SkillDefinition::_impl_.element_type_)
      - PROTOBUF_FIELD_OFFSET(SkillDefinition, _impl_.skill_type_)>(
          reinterpret_cast<char*>(&_impl_.skill_type_),
          reinterpret_cast<char*>(&other->_impl_.skill_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_skill_2eproto_getter, &descriptor_table_skill_2eproto_once,
      file_level_metadata_skill_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skill
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skill::SkillDefinition*
Arena::CreateMaybeMessage< ::skill::SkillDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::SkillDefinition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
