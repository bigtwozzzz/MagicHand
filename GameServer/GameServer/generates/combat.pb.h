// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: combat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_combat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_combat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_combat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_combat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_combat_2eproto;
namespace combat {
class AttackRequest;
struct AttackRequestDefaultTypeInternal;
extern AttackRequestDefaultTypeInternal _AttackRequest_default_instance_;
class HitEvent;
struct HitEventDefaultTypeInternal;
extern HitEventDefaultTypeInternal _HitEvent_default_instance_;
}  // namespace combat
PROTOBUF_NAMESPACE_OPEN
template<> ::combat::AttackRequest* Arena::CreateMaybeMessage<::combat::AttackRequest>(Arena*);
template<> ::combat::HitEvent* Arena::CreateMaybeMessage<::combat::HitEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace combat {

enum EntityType : int {
  CHARACTER = 0,
  MONSTER = 1,
  EntityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EntityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EntityType_IsValid(int value);
constexpr EntityType EntityType_MIN = CHARACTER;
constexpr EntityType EntityType_MAX = MONSTER;
constexpr int EntityType_ARRAYSIZE = EntityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityType_descriptor();
template<typename T>
inline const std::string& EntityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntityType_descriptor(), enum_t_value);
}
inline bool EntityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EntityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntityType>(
    EntityType_descriptor(), name, value);
}
// ===================================================================

class AttackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:combat.AttackRequest) */ {
 public:
  inline AttackRequest() : AttackRequest(nullptr) {}
  ~AttackRequest() override;
  explicit PROTOBUF_CONSTEXPR AttackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttackRequest(const AttackRequest& from);
  AttackRequest(AttackRequest&& from) noexcept
    : AttackRequest() {
    *this = ::std::move(from);
  }

  inline AttackRequest& operator=(const AttackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttackRequest& operator=(AttackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttackRequest* internal_default_instance() {
    return reinterpret_cast<const AttackRequest*>(
               &_AttackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AttackRequest& a, AttackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AttackRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttackRequest& from) {
    AttackRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttackRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "combat.AttackRequest";
  }
  protected:
  explicit AttackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kTargetIdFieldNumber = 3,
    kSkillIdFieldNumber = 5,
    kEntityTypeFieldNumber = 2,
    kAttackAngleFieldNumber = 4,
    kCastTimeFieldNumber = 6,
  };
  // string entity_id = 1;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // string target_id = 3;
  void clear_target_id();
  const std::string& target_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_id();
  PROTOBUF_NODISCARD std::string* release_target_id();
  void set_allocated_target_id(std::string* target_id);
  private:
  const std::string& _internal_target_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_id(const std::string& value);
  std::string* _internal_mutable_target_id();
  public:

  // string skill_id = 5;
  void clear_skill_id();
  const std::string& skill_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skill_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skill_id();
  PROTOBUF_NODISCARD std::string* release_skill_id();
  void set_allocated_skill_id(std::string* skill_id);
  private:
  const std::string& _internal_skill_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skill_id(const std::string& value);
  std::string* _internal_mutable_skill_id();
  public:

  // .combat.EntityType entity_type = 2;
  void clear_entity_type();
  ::combat::EntityType entity_type() const;
  void set_entity_type(::combat::EntityType value);
  private:
  ::combat::EntityType _internal_entity_type() const;
  void _internal_set_entity_type(::combat::EntityType value);
  public:

  // float attack_angle = 4;
  void clear_attack_angle();
  float attack_angle() const;
  void set_attack_angle(float value);
  private:
  float _internal_attack_angle() const;
  void _internal_set_attack_angle(float value);
  public:

  // float cast_time = 6;
  void clear_cast_time();
  float cast_time() const;
  void set_cast_time(float value);
  private:
  float _internal_cast_time() const;
  void _internal_set_cast_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:combat.AttackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_id_;
    int entity_type_;
    float attack_angle_;
    float cast_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_combat_2eproto;
};
// -------------------------------------------------------------------

class HitEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:combat.HitEvent) */ {
 public:
  inline HitEvent() : HitEvent(nullptr) {}
  ~HitEvent() override;
  explicit PROTOBUF_CONSTEXPR HitEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HitEvent(const HitEvent& from);
  HitEvent(HitEvent&& from) noexcept
    : HitEvent() {
    *this = ::std::move(from);
  }

  inline HitEvent& operator=(const HitEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline HitEvent& operator=(HitEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HitEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const HitEvent* internal_default_instance() {
    return reinterpret_cast<const HitEvent*>(
               &_HitEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HitEvent& a, HitEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(HitEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HitEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HitEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HitEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HitEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HitEvent& from) {
    HitEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HitEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "combat.HitEvent";
  }
  protected:
  explicit HitEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kAttackerIdFieldNumber = 3,
    kEntityTypeFieldNumber = 2,
    kDamageFieldNumber = 4,
    kNewStatusFieldNumber = 5,
    kNewMonsterStateFieldNumber = 6,
  };
  // string entity_id = 1;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // string attacker_id = 3;
  void clear_attacker_id();
  const std::string& attacker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attacker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attacker_id();
  PROTOBUF_NODISCARD std::string* release_attacker_id();
  void set_allocated_attacker_id(std::string* attacker_id);
  private:
  const std::string& _internal_attacker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attacker_id(const std::string& value);
  std::string* _internal_mutable_attacker_id();
  public:

  // .combat.EntityType entity_type = 2;
  void clear_entity_type();
  ::combat::EntityType entity_type() const;
  void set_entity_type(::combat::EntityType value);
  private:
  ::combat::EntityType _internal_entity_type() const;
  void _internal_set_entity_type(::combat::EntityType value);
  public:

  // int32 damage = 4;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // .common.Status new_status = 5;
  void clear_new_status();
  ::common::Status new_status() const;
  void set_new_status(::common::Status value);
  private:
  ::common::Status _internal_new_status() const;
  void _internal_set_new_status(::common::Status value);
  public:

  // .common.MonsterState new_monster_state = 6;
  void clear_new_monster_state();
  ::common::MonsterState new_monster_state() const;
  void set_new_monster_state(::common::MonsterState value);
  private:
  ::common::MonsterState _internal_new_monster_state() const;
  void _internal_set_new_monster_state(::common::MonsterState value);
  public:

  // @@protoc_insertion_point(class_scope:combat.HitEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attacker_id_;
    int entity_type_;
    int32_t damage_;
    int new_status_;
    int new_monster_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_combat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AttackRequest

// string entity_id = 1;
inline void AttackRequest::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& AttackRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:combat.AttackRequest.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttackRequest::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:combat.AttackRequest.entity_id)
}
inline std::string* AttackRequest::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:combat.AttackRequest.entity_id)
  return _s;
}
inline const std::string& AttackRequest::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void AttackRequest::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AttackRequest::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AttackRequest::release_entity_id() {
  // @@protoc_insertion_point(field_release:combat.AttackRequest.entity_id)
  return _impl_.entity_id_.Release();
}
inline void AttackRequest::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:combat.AttackRequest.entity_id)
}

// .combat.EntityType entity_type = 2;
inline void AttackRequest::clear_entity_type() {
  _impl_.entity_type_ = 0;
}
inline ::combat::EntityType AttackRequest::_internal_entity_type() const {
  return static_cast< ::combat::EntityType >(_impl_.entity_type_);
}
inline ::combat::EntityType AttackRequest::entity_type() const {
  // @@protoc_insertion_point(field_get:combat.AttackRequest.entity_type)
  return _internal_entity_type();
}
inline void AttackRequest::_internal_set_entity_type(::combat::EntityType value) {
  
  _impl_.entity_type_ = value;
}
inline void AttackRequest::set_entity_type(::combat::EntityType value) {
  _internal_set_entity_type(value);
  // @@protoc_insertion_point(field_set:combat.AttackRequest.entity_type)
}

// string target_id = 3;
inline void AttackRequest::clear_target_id() {
  _impl_.target_id_.ClearToEmpty();
}
inline const std::string& AttackRequest::target_id() const {
  // @@protoc_insertion_point(field_get:combat.AttackRequest.target_id)
  return _internal_target_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttackRequest::set_target_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:combat.AttackRequest.target_id)
}
inline std::string* AttackRequest::mutable_target_id() {
  std::string* _s = _internal_mutable_target_id();
  // @@protoc_insertion_point(field_mutable:combat.AttackRequest.target_id)
  return _s;
}
inline const std::string& AttackRequest::_internal_target_id() const {
  return _impl_.target_id_.Get();
}
inline void AttackRequest::_internal_set_target_id(const std::string& value) {
  
  _impl_.target_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AttackRequest::_internal_mutable_target_id() {
  
  return _impl_.target_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AttackRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:combat.AttackRequest.target_id)
  return _impl_.target_id_.Release();
}
inline void AttackRequest::set_allocated_target_id(std::string* target_id) {
  if (target_id != nullptr) {
    
  } else {
    
  }
  _impl_.target_id_.SetAllocated(target_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_id_.IsDefault()) {
    _impl_.target_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:combat.AttackRequest.target_id)
}

// float attack_angle = 4;
inline void AttackRequest::clear_attack_angle() {
  _impl_.attack_angle_ = 0;
}
inline float AttackRequest::_internal_attack_angle() const {
  return _impl_.attack_angle_;
}
inline float AttackRequest::attack_angle() const {
  // @@protoc_insertion_point(field_get:combat.AttackRequest.attack_angle)
  return _internal_attack_angle();
}
inline void AttackRequest::_internal_set_attack_angle(float value) {
  
  _impl_.attack_angle_ = value;
}
inline void AttackRequest::set_attack_angle(float value) {
  _internal_set_attack_angle(value);
  // @@protoc_insertion_point(field_set:combat.AttackRequest.attack_angle)
}

// string skill_id = 5;
inline void AttackRequest::clear_skill_id() {
  _impl_.skill_id_.ClearToEmpty();
}
inline const std::string& AttackRequest::skill_id() const {
  // @@protoc_insertion_point(field_get:combat.AttackRequest.skill_id)
  return _internal_skill_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttackRequest::set_skill_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skill_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:combat.AttackRequest.skill_id)
}
inline std::string* AttackRequest::mutable_skill_id() {
  std::string* _s = _internal_mutable_skill_id();
  // @@protoc_insertion_point(field_mutable:combat.AttackRequest.skill_id)
  return _s;
}
inline const std::string& AttackRequest::_internal_skill_id() const {
  return _impl_.skill_id_.Get();
}
inline void AttackRequest::_internal_set_skill_id(const std::string& value) {
  
  _impl_.skill_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AttackRequest::_internal_mutable_skill_id() {
  
  return _impl_.skill_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AttackRequest::release_skill_id() {
  // @@protoc_insertion_point(field_release:combat.AttackRequest.skill_id)
  return _impl_.skill_id_.Release();
}
inline void AttackRequest::set_allocated_skill_id(std::string* skill_id) {
  if (skill_id != nullptr) {
    
  } else {
    
  }
  _impl_.skill_id_.SetAllocated(skill_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skill_id_.IsDefault()) {
    _impl_.skill_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:combat.AttackRequest.skill_id)
}

// float cast_time = 6;
inline void AttackRequest::clear_cast_time() {
  _impl_.cast_time_ = 0;
}
inline float AttackRequest::_internal_cast_time() const {
  return _impl_.cast_time_;
}
inline float AttackRequest::cast_time() const {
  // @@protoc_insertion_point(field_get:combat.AttackRequest.cast_time)
  return _internal_cast_time();
}
inline void AttackRequest::_internal_set_cast_time(float value) {
  
  _impl_.cast_time_ = value;
}
inline void AttackRequest::set_cast_time(float value) {
  _internal_set_cast_time(value);
  // @@protoc_insertion_point(field_set:combat.AttackRequest.cast_time)
}

// -------------------------------------------------------------------

// HitEvent

// string entity_id = 1;
inline void HitEvent::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& HitEvent::entity_id() const {
  // @@protoc_insertion_point(field_get:combat.HitEvent.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HitEvent::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:combat.HitEvent.entity_id)
}
inline std::string* HitEvent::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:combat.HitEvent.entity_id)
  return _s;
}
inline const std::string& HitEvent::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void HitEvent::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HitEvent::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HitEvent::release_entity_id() {
  // @@protoc_insertion_point(field_release:combat.HitEvent.entity_id)
  return _impl_.entity_id_.Release();
}
inline void HitEvent::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:combat.HitEvent.entity_id)
}

// .combat.EntityType entity_type = 2;
inline void HitEvent::clear_entity_type() {
  _impl_.entity_type_ = 0;
}
inline ::combat::EntityType HitEvent::_internal_entity_type() const {
  return static_cast< ::combat::EntityType >(_impl_.entity_type_);
}
inline ::combat::EntityType HitEvent::entity_type() const {
  // @@protoc_insertion_point(field_get:combat.HitEvent.entity_type)
  return _internal_entity_type();
}
inline void HitEvent::_internal_set_entity_type(::combat::EntityType value) {
  
  _impl_.entity_type_ = value;
}
inline void HitEvent::set_entity_type(::combat::EntityType value) {
  _internal_set_entity_type(value);
  // @@protoc_insertion_point(field_set:combat.HitEvent.entity_type)
}

// string attacker_id = 3;
inline void HitEvent::clear_attacker_id() {
  _impl_.attacker_id_.ClearToEmpty();
}
inline const std::string& HitEvent::attacker_id() const {
  // @@protoc_insertion_point(field_get:combat.HitEvent.attacker_id)
  return _internal_attacker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HitEvent::set_attacker_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.attacker_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:combat.HitEvent.attacker_id)
}
inline std::string* HitEvent::mutable_attacker_id() {
  std::string* _s = _internal_mutable_attacker_id();
  // @@protoc_insertion_point(field_mutable:combat.HitEvent.attacker_id)
  return _s;
}
inline const std::string& HitEvent::_internal_attacker_id() const {
  return _impl_.attacker_id_.Get();
}
inline void HitEvent::_internal_set_attacker_id(const std::string& value) {
  
  _impl_.attacker_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HitEvent::_internal_mutable_attacker_id() {
  
  return _impl_.attacker_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HitEvent::release_attacker_id() {
  // @@protoc_insertion_point(field_release:combat.HitEvent.attacker_id)
  return _impl_.attacker_id_.Release();
}
inline void HitEvent::set_allocated_attacker_id(std::string* attacker_id) {
  if (attacker_id != nullptr) {
    
  } else {
    
  }
  _impl_.attacker_id_.SetAllocated(attacker_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attacker_id_.IsDefault()) {
    _impl_.attacker_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:combat.HitEvent.attacker_id)
}

// int32 damage = 4;
inline void HitEvent::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t HitEvent::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t HitEvent::damage() const {
  // @@protoc_insertion_point(field_get:combat.HitEvent.damage)
  return _internal_damage();
}
inline void HitEvent::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void HitEvent::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:combat.HitEvent.damage)
}

// .common.Status new_status = 5;
inline void HitEvent::clear_new_status() {
  _impl_.new_status_ = 0;
}
inline ::common::Status HitEvent::_internal_new_status() const {
  return static_cast< ::common::Status >(_impl_.new_status_);
}
inline ::common::Status HitEvent::new_status() const {
  // @@protoc_insertion_point(field_get:combat.HitEvent.new_status)
  return _internal_new_status();
}
inline void HitEvent::_internal_set_new_status(::common::Status value) {
  
  _impl_.new_status_ = value;
}
inline void HitEvent::set_new_status(::common::Status value) {
  _internal_set_new_status(value);
  // @@protoc_insertion_point(field_set:combat.HitEvent.new_status)
}

// .common.MonsterState new_monster_state = 6;
inline void HitEvent::clear_new_monster_state() {
  _impl_.new_monster_state_ = 0;
}
inline ::common::MonsterState HitEvent::_internal_new_monster_state() const {
  return static_cast< ::common::MonsterState >(_impl_.new_monster_state_);
}
inline ::common::MonsterState HitEvent::new_monster_state() const {
  // @@protoc_insertion_point(field_get:combat.HitEvent.new_monster_state)
  return _internal_new_monster_state();
}
inline void HitEvent::_internal_set_new_monster_state(::common::MonsterState value) {
  
  _impl_.new_monster_state_ = value;
}
inline void HitEvent::set_new_monster_state(::common::MonsterState value) {
  _internal_set_new_monster_state(value);
  // @@protoc_insertion_point(field_set:combat.HitEvent.new_monster_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace combat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::combat::EntityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::combat::EntityType>() {
  return ::combat::EntityType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_combat_2eproto
