// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace common {

enum MonsterState : int {
  M_MOVE = 0,
  M_ATTACK = 1,
  M_STUNNED = 2,
  M_SCARED = 3,
  M_DEAD = 4,
  M_SPAWNING = 5,
  MonsterState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MonsterState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MonsterState_IsValid(int value);
constexpr MonsterState MonsterState_MIN = M_MOVE;
constexpr MonsterState MonsterState_MAX = M_SPAWNING;
constexpr int MonsterState_ARRAYSIZE = MonsterState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterState_descriptor();
template<typename T>
inline const std::string& MonsterState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MonsterState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MonsterState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MonsterState_descriptor(), enum_t_value);
}
inline bool MonsterState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MonsterState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MonsterState>(
    MonsterState_descriptor(), name, value);
}
enum MonsterType : int {
  ZOMBIE_BASIC = 0,
  ZOMBIE_FAST = 1,
  ZOMBIE_TANK = 2,
  ZOMBIE_EXPLODE = 3,
  ZOMBIE_BOSS = 4,
  SKELETON = 5,
  GHOST = 6,
  MonsterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MonsterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MonsterType_IsValid(int value);
constexpr MonsterType MonsterType_MIN = ZOMBIE_BASIC;
constexpr MonsterType MonsterType_MAX = GHOST;
constexpr int MonsterType_ARRAYSIZE = MonsterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterType_descriptor();
template<typename T>
inline const std::string& MonsterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MonsterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MonsterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MonsterType_descriptor(), enum_t_value);
}
inline bool MonsterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MonsterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MonsterType>(
    MonsterType_descriptor(), name, value);
}
enum Status : int {
  IDLE = 0,
  CASTING = 1,
  STUNNED = 2,
  DEAD = 3,
  INVINCIBLE = 4,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = IDLE;
constexpr Status Status_MAX = INVINCIBLE;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum StageSelectState : int {
  PENDING = 0,
  CONFIRMED = 1,
  REJECTED = 2,
  StageSelectState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StageSelectState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StageSelectState_IsValid(int value);
constexpr StageSelectState StageSelectState_MIN = PENDING;
constexpr StageSelectState StageSelectState_MAX = REJECTED;
constexpr int StageSelectState_ARRAYSIZE = StageSelectState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StageSelectState_descriptor();
template<typename T>
inline const std::string& StageSelectState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StageSelectState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StageSelectState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StageSelectState_descriptor(), enum_t_value);
}
inline bool StageSelectState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StageSelectState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StageSelectState>(
    StageSelectState_descriptor(), name, value);
}
enum ElementType : int {
  NONE = 0,
  FIRE = 1,
  WATER = 2,
  ICE = 3,
  EARTH = 4,
  AIR = 5,
  ElementType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ElementType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ElementType_IsValid(int value);
constexpr ElementType ElementType_MIN = NONE;
constexpr ElementType ElementType_MAX = AIR;
constexpr int ElementType_ARRAYSIZE = ElementType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElementType_descriptor();
template<typename T>
inline const std::string& ElementType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ElementType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ElementType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ElementType_descriptor(), enum_t_value);
}
inline bool ElementType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ElementType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ElementType>(
    ElementType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::common::MonsterState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::MonsterState>() {
  return ::common::MonsterState_descriptor();
}
template <> struct is_proto_enum< ::common::MonsterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::MonsterType>() {
  return ::common::MonsterType_descriptor();
}
template <> struct is_proto_enum< ::common::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::Status>() {
  return ::common::Status_descriptor();
}
template <> struct is_proto_enum< ::common::StageSelectState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::StageSelectState>() {
  return ::common::StageSelectState_descriptor();
}
template <> struct is_proto_enum< ::common::ElementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::ElementType>() {
  return ::common::ElementType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
